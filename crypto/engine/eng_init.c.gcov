        -:    0:Source:eng_init.c
        -:    0:Graph:eng_init.gcno
        -:    0:Data:eng_init.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/engine/eng_init.c */
        -:    2:/* ====================================================================
        -:    3: * Copyright (c) 1999-2001 The OpenSSL Project.  All rights reserved.
        -:    4: *
        -:    5: * Redistribution and use in source and binary forms, with or without
        -:    6: * modification, are permitted provided that the following conditions
        -:    7: * are met:
        -:    8: *
        -:    9: * 1. Redistributions of source code must retain the above copyright
        -:   10: *    notice, this list of conditions and the following disclaimer. 
        -:   11: *
        -:   12: * 2. Redistributions in binary form must reproduce the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer in
        -:   14: *    the documentation and/or other materials provided with the
        -:   15: *    distribution.
        -:   16: *
        -:   17: * 3. All advertising materials mentioning features or use of this
        -:   18: *    software must display the following acknowledgment:
        -:   19: *    "This product includes software developed by the OpenSSL Project
        -:   20: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   21: *
        -:   22: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   23: *    endorse or promote products derived from this software without
        -:   24: *    prior written permission. For written permission, please contact
        -:   25: *    licensing@OpenSSL.org.
        -:   26: *
        -:   27: * 5. Products derived from this software may not be called "OpenSSL"
        -:   28: *    nor may "OpenSSL" appear in their names without prior written
        -:   29: *    permission of the OpenSSL Project.
        -:   30: *
        -:   31: * 6. Redistributions of any form whatsoever must retain the following
        -:   32: *    acknowledgment:
        -:   33: *    "This product includes software developed by the OpenSSL Project
        -:   34: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   35: *
        -:   36: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   37: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   38: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   39: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   40: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   41: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   42: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   43: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   44: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   45: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   46: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   47: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   48: * ====================================================================
        -:   49: *
        -:   50: * This product includes cryptographic software written by Eric Young
        -:   51: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   52: * Hudson (tjh@cryptsoft.com).
        -:   53: *
        -:   54: */
        -:   55:
        -:   56:#include "eng_int.h"
        -:   57:
        -:   58:/* Initialise a engine type for use (or up its functional reference count
        -:   59: * if it's already in use). This version is only used internally. */
    41942:   60:int engine_unlocked_init(ENGINE *e)
        -:   61:	{
        -:   62:	int to_return = 1;
        -:   63:
    41942:   64:	if((e->funct_ref == 0) && e->init)
        -:   65:		/* This is the first functional reference and the engine
        -:   66:		 * requires initialisation so we do it now. */
    20000:   67:		to_return = e->init(e);
    41942:   68:	if(to_return)
        -:   69:		{
        -:   70:		/* OK, we return a functional reference which is also a
        -:   71:		 * structural reference. */
    41942:   72:		e->struct_ref++;
    41942:   73:		e->funct_ref++;
        -:   74:		engine_ref_debug(e, 0, 1)
        -:   75:		engine_ref_debug(e, 1, 1)
        -:   76:		}
    41942:   77:	return to_return;
        -:   78:	}
        -:   79:
        -:   80:/* Free a functional reference to a engine type. This version is only used
        -:   81: * internally. */
    41942:   82:int engine_unlocked_finish(ENGINE *e, int unlock_for_handlers)
        -:   83:	{
        -:   84:	int to_return = 1;
        -:   85:
        -:   86:	/* Reduce the functional reference count here so if it's the terminating
        -:   87:	 * case, we can release the lock safely and call the finish() handler
        -:   88:	 * without risk of a race. We get a race if we leave the count until
        -:   89:	 * after and something else is calling "finish" at the same time -
        -:   90:	 * there's a chance that both threads will together take the count from
        -:   91:	 * 2 to 0 without either calling finish(). */
    41942:   92:	e->funct_ref--;
        -:   93:	engine_ref_debug(e, 1, -1);
    41942:   94:	if((e->funct_ref == 0) && e->finish)
        -:   95:		{
    10000:   96:		if(unlock_for_handlers)
    #####:   97:			CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
    10000:   98:		to_return = e->finish(e);
    10000:   99:		if(unlock_for_handlers)
    #####:  100:			CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
    10000:  101:		if(!to_return)
        -:  102:			return 0;
        -:  103:		}
        -:  104:#ifdef REF_CHECK
        -:  105:	if(e->funct_ref < 0)
        -:  106:		{
        -:  107:		fprintf(stderr,"ENGINE_finish, bad functional reference count\n");
        -:  108:		abort();
        -:  109:		}
        -:  110:#endif
        -:  111:	/* Release the structural reference too */
    41942:  112:	if(!engine_free_util(e, 0))
        -:  113:		{
    #####:  114:		ENGINEerr(ENGINE_F_ENGINE_UNLOCKED_FINISH,ENGINE_R_FINISH_FAILED);
    #####:  115:		return 0;
        -:  116:		}
        -:  117:	return to_return;
        -:  118:	}
        -:  119:
        -:  120:/* The API (locked) version of "init" */
    #####:  121:int ENGINE_init(ENGINE *e)
        -:  122:	{
        -:  123:	int ret;
    #####:  124:	if(e == NULL)
        -:  125:		{
    #####:  126:		ENGINEerr(ENGINE_F_ENGINE_INIT,ERR_R_PASSED_NULL_PARAMETER);
    #####:  127:		return 0;
        -:  128:		}
    #####:  129:	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
    #####:  130:	ret = engine_unlocked_init(e);
    #####:  131:	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
    #####:  132:	return ret;
        -:  133:	}
        -:  134:
        -:  135:/* The API (locked) version of "finish" */
    21942:  136:int ENGINE_finish(ENGINE *e)
        -:  137:	{
        -:  138:	int to_return = 1;
        -:  139:
    21942:  140:	if(e == NULL)
        -:  141:		{
    #####:  142:		ENGINEerr(ENGINE_F_ENGINE_FINISH,ERR_R_PASSED_NULL_PARAMETER);
    #####:  143:		return 0;
        -:  144:		}
    21942:  145:	CRYPTO_w_lock(CRYPTO_LOCK_ENGINE);
    21942:  146:	to_return = engine_unlocked_finish(e, 1);
    21942:  147:	CRYPTO_w_unlock(CRYPTO_LOCK_ENGINE);
    21942:  148:	if(!to_return)
        -:  149:		{
    #####:  150:		ENGINEerr(ENGINE_F_ENGINE_FINISH,ENGINE_R_FINISH_FAILED);
    #####:  151:		return 0;
        -:  152:		}
        -:  153:	return to_return;
        -:  154:	}
