        -:    0:Source:tb_digest.c
        -:    0:Graph:tb_digest.gcno
        -:    0:Data:tb_digest.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* ====================================================================
        -:    2: * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
        -:    3: *
        -:    4: * Redistribution and use in source and binary forms, with or without
        -:    5: * modification, are permitted provided that the following conditions
        -:    6: * are met:
        -:    7: *
        -:    8: * 1. Redistributions of source code must retain the above copyright
        -:    9: *    notice, this list of conditions and the following disclaimer. 
        -:   10: *
        -:   11: * 2. Redistributions in binary form must reproduce the above copyright
        -:   12: *    notice, this list of conditions and the following disclaimer in
        -:   13: *    the documentation and/or other materials provided with the
        -:   14: *    distribution.
        -:   15: *
        -:   16: * 3. All advertising materials mentioning features or use of this
        -:   17: *    software must display the following acknowledgment:
        -:   18: *    "This product includes software developed by the OpenSSL Project
        -:   19: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   20: *
        -:   21: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   22: *    endorse or promote products derived from this software without
        -:   23: *    prior written permission. For written permission, please contact
        -:   24: *    licensing@OpenSSL.org.
        -:   25: *
        -:   26: * 5. Products derived from this software may not be called "OpenSSL"
        -:   27: *    nor may "OpenSSL" appear in their names without prior written
        -:   28: *    permission of the OpenSSL Project.
        -:   29: *
        -:   30: * 6. Redistributions of any form whatsoever must retain the following
        -:   31: *    acknowledgment:
        -:   32: *    "This product includes software developed by the OpenSSL Project
        -:   33: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   34: *
        -:   35: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   36: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   37: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   38: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   39: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   40: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   41: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   42: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   43: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   44: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   45: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   46: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   47: * ====================================================================
        -:   48: *
        -:   49: * This product includes cryptographic software written by Eric Young
        -:   50: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   51: * Hudson (tjh@cryptsoft.com).
        -:   52: *
        -:   53: */
        -:   54:
        -:   55:#include "eng_int.h"
        -:   56:
        -:   57:/* If this symbol is defined then ENGINE_get_digest_engine(), the function that
        -:   58: * is used by EVP to hook in digest code and cache defaults (etc), will display
        -:   59: * brief debugging summaries to stderr with the 'nid'. */
        -:   60:/* #define ENGINE_DIGEST_DEBUG */
        -:   61:
        -:   62:static ENGINE_TABLE *digest_table = NULL;
        -:   63:
    #####:   64:void ENGINE_unregister_digests(ENGINE *e)
        -:   65:	{
    #####:   66:	engine_table_unregister(&digest_table, e);
    #####:   67:	}
        -:   68:
    10000:   69:static void engine_unregister_all_digests(void)
        -:   70:	{
    10000:   71:	engine_table_cleanup(&digest_table);
    10000:   72:	}
        -:   73:
   130000:   74:int ENGINE_register_digests(ENGINE *e)
        -:   75:	{
   130000:   76:	if(e->digests)
        -:   77:		{
        -:   78:		const int *nids;
    20000:   79:		int num_nids = e->digests(e, NULL, &nids, 0);
    20000:   80:		if(num_nids > 0)
    20000:   81:			return engine_table_register(&digest_table,
        -:   82:					engine_unregister_all_digests, e, nids,
        -:   83:					num_nids, 0);
        -:   84:		}
        -:   85:	return 1;
        -:   86:	}
        -:   87:
    #####:   88:void ENGINE_register_all_digests()
        -:   89:	{
        -:   90:	ENGINE *e;
        -:   91:
    #####:   92:	for(e=ENGINE_get_first() ; e ; e=ENGINE_get_next(e))
    #####:   93:		ENGINE_register_digests(e);
    #####:   94:	}
        -:   95:
    #####:   96:int ENGINE_set_default_digests(ENGINE *e)
        -:   97:	{
    #####:   98:	if(e->digests)
        -:   99:		{
        -:  100:		const int *nids;
    #####:  101:		int num_nids = e->digests(e, NULL, &nids, 0);
    #####:  102:		if(num_nids > 0)
    #####:  103:			return engine_table_register(&digest_table,
        -:  104:					engine_unregister_all_digests, e, nids,
        -:  105:					num_nids, 1);
        -:  106:		}
        -:  107:	return 1;
        -:  108:	}
        -:  109:
        -:  110:/* Exposed API function to get a functional reference from the implementation
        -:  111: * table (ie. try to get a functional reference from the tabled structural
        -:  112: * references) for a given digest 'nid' */
   711377:  113:ENGINE *ENGINE_get_digest_engine(int nid)
        -:  114:	{
   711377:  115:	return engine_table_select(&digest_table, nid);
        -:  116:	}
        -:  117:
        -:  118:/* Obtains a digest implementation from an ENGINE functional reference */
    #####:  119:const EVP_MD *ENGINE_get_digest(ENGINE *e, int nid)
        -:  120:	{
        -:  121:	const EVP_MD *ret;
        -:  122:	ENGINE_DIGESTS_PTR fn = ENGINE_get_digests(e);
    #####:  123:	if(!fn || !fn(e, &ret, NULL, nid))
        -:  124:		{
    #####:  125:		ENGINEerr(ENGINE_F_ENGINE_GET_DIGEST,
        -:  126:				ENGINE_R_UNIMPLEMENTED_DIGEST);
    #####:  127:		return NULL;
        -:  128:		}
    #####:  129:	return ret;
        -:  130:	}
        -:  131:
        -:  132:/* Gets the digest callback from an ENGINE structure */
    #####:  133:ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE *e)
        -:  134:	{
    #####:  135:	return e->digests;
        -:  136:	}
        -:  137:
        -:  138:/* Sets the digest callback in an ENGINE structure */
    10000:  139:int ENGINE_set_digests(ENGINE *e, ENGINE_DIGESTS_PTR f)
        -:  140:	{
    10000:  141:	e->digests = f;
    10000:  142:	return 1;
        -:  143:	}
