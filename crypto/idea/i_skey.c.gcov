        -:    0:Source:i_skey.c
        -:    0:Graph:i_skey.gcno
        -:    0:Data:i_skey.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/idea/i_skey.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <openssl/crypto.h>
        -:   60:#include <openssl/idea.h>
        -:   61:#include "idea_lcl.h"
        -:   62:
        -:   63:static IDEA_INT inverse(unsigned int xin);
    #####:   64:void idea_set_encrypt_key(const unsigned char *key, IDEA_KEY_SCHEDULE *ks)
        -:   65:#ifdef OPENSSL_FIPS
        -:   66:	{
        -:   67:	fips_cipher_abort(IDEA);
        -:   68:	private_idea_set_encrypt_key(key, ks);
        -:   69:	}
        -:   70:void private_idea_set_encrypt_key(const unsigned char *key, IDEA_KEY_SCHEDULE *ks)
        -:   71:#endif
        -:   72:	{
        -:   73:	int i;
        -:   74:	register IDEA_INT *kt,*kf,r0,r1,r2;
        -:   75:
    #####:   76:	kt= &(ks->data[0][0]);
    #####:   77:	n2s(key,kt[0]); n2s(key,kt[1]); n2s(key,kt[2]); n2s(key,kt[3]);
    #####:   78:	n2s(key,kt[4]); n2s(key,kt[5]); n2s(key,kt[6]); n2s(key,kt[7]);
        -:   79:
        -:   80:	kf=kt;
    #####:   81:	kt+=8;
    #####:   82:	for (i=0; i<6; i++)
        -:   83:		{
    #####:   84:		r2= kf[1];
    #####:   85:		r1= kf[2];
    #####:   86:		*(kt++)= ((r2<<9) | (r1>>7))&0xffff;
    #####:   87:		r0= kf[3];
    #####:   88:		*(kt++)= ((r1<<9) | (r0>>7))&0xffff;
    #####:   89:		r1= kf[4];
    #####:   90:		*(kt++)= ((r0<<9) | (r1>>7))&0xffff;
    #####:   91:		r0= kf[5];
    #####:   92:		*(kt++)= ((r1<<9) | (r0>>7))&0xffff;
    #####:   93:		r1= kf[6];
    #####:   94:		*(kt++)= ((r0<<9) | (r1>>7))&0xffff;
    #####:   95:		r0= kf[7];
    #####:   96:		*(kt++)= ((r1<<9) | (r0>>7))&0xffff;
    #####:   97:		r1= kf[0];
    #####:   98:		if (i >= 5) break;
    #####:   99:		*(kt++)= ((r0<<9) | (r1>>7))&0xffff;
    #####:  100:		*(kt++)= ((r1<<9) | (r2>>7))&0xffff;
    #####:  101:		kf+=8;
        -:  102:		}
    #####:  103:	}
        -:  104:
    #####:  105:void idea_set_decrypt_key(IDEA_KEY_SCHEDULE *ek, IDEA_KEY_SCHEDULE *dk)
        -:  106:	{
        -:  107:	int r;
        -:  108:	register IDEA_INT *fp,*tp,t;
        -:  109:
    #####:  110:	tp= &(dk->data[0][0]);
    #####:  111:	fp= &(ek->data[8][0]);
    #####:  112:	for (r=0; r<9; r++)
        -:  113:		{
    #####:  114:		*(tp++)=inverse(fp[0]);
    #####:  115:		*(tp++)=((int)(0x10000L-fp[2])&0xffff);
    #####:  116:		*(tp++)=((int)(0x10000L-fp[1])&0xffff);
    #####:  117:		*(tp++)=inverse(fp[3]);
    #####:  118:		if (r == 8) break;
    #####:  119:		fp-=6;
    #####:  120:		*(tp++)=fp[4];
    #####:  121:		*(tp++)=fp[5];
        -:  122:		}
        -:  123:
        -:  124:	tp= &(dk->data[0][0]);
    #####:  125:	t=tp[1];
    #####:  126:	tp[1]=tp[2];
    #####:  127:	tp[2]=t;
        -:  128:
    #####:  129:	t=tp[49];
    #####:  130:	tp[49]=tp[50];
    #####:  131:	tp[50]=t;
    #####:  132:	}
        -:  133:
        -:  134:/* taken directly from the 'paper' I'll have a look at it later */
        -:  135:static IDEA_INT inverse(unsigned int xin)
        -:  136:	{
        -:  137:	long n1,n2,q,r,b1,b2,t;
        -:  138:
    #####:  139:	if (xin == 0)
        -:  140:		b2=0;
        -:  141:	else
        -:  142:		{
        -:  143:		n1=0x10001;
    #####:  144:		n2=xin;
        -:  145:		b2=1;
        -:  146:		b1=0;
        -:  147:
        -:  148:		do	{
    #####:  149:			r=(n1%n2);
    #####:  150:			q=(n1-r)/n2;
    #####:  151:			if (r == 0)
    #####:  152:				{ if (b2 < 0) b2=0x10001+b2; }
        -:  153:			else
        -:  154:				{
        -:  155:				n1=n2;
        -:  156:				n2=r;
        -:  157:				t=b2;
    #####:  158:				b2=b1-q*b2;
        -:  159:				b1=t;
        -:  160:				}
    #####:  161:			} while (r != 0);
        -:  162:		}
    #####:  163:	return((IDEA_INT)b2);
        -:  164:	}
