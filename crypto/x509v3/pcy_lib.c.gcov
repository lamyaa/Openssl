        -:    0:Source:pcy_lib.c
        -:    0:Graph:pcy_lib.gcno
        -:    0:Data:pcy_lib.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* pcy_lib.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 2004.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 2004 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/x509.h>
        -:   62:#include <openssl/x509v3.h>
        -:   63:
        -:   64:#include "pcy_int.h"
        -:   65:
        -:   66:/* accessor functions */
        -:   67:
        -:   68:/* X509_POLICY_TREE stuff */
        -:   69:
    #####:   70:int X509_policy_tree_level_count(const X509_POLICY_TREE *tree)
        -:   71:	{
    #####:   72:	if (!tree)
        -:   73:		return 0;
    #####:   74:	return tree->nlevel;
        -:   75:	}
        -:   76:
        -:   77:X509_POLICY_LEVEL *
    #####:   78:	X509_policy_tree_get0_level(const X509_POLICY_TREE *tree, int i)
        -:   79:	{
    #####:   80:	if (!tree || (i < 0) || (i >= tree->nlevel))
        -:   81:		return NULL;
    #####:   82:	return tree->levels + i;
        -:   83:	}
        -:   84:
        -:   85:STACK_OF(X509_POLICY_NODE) *
    #####:   86:		X509_policy_tree_get0_policies(const X509_POLICY_TREE *tree)
        -:   87:	{
    #####:   88:	if (!tree)
        -:   89:		return NULL;
    #####:   90:	return tree->auth_policies;
        -:   91:	}
        -:   92:
        -:   93:STACK_OF(X509_POLICY_NODE) *
    #####:   94:	X509_policy_tree_get0_user_policies(const X509_POLICY_TREE *tree)
        -:   95:	{
    #####:   96:	if (!tree)
        -:   97:		return NULL;
    #####:   98:	if (tree->flags & POLICY_FLAG_ANY_POLICY)
    #####:   99:		return tree->auth_policies;
        -:  100:	else
    #####:  101:		return tree->user_policies;
        -:  102:	}
        -:  103:
        -:  104:/* X509_POLICY_LEVEL stuff */
        -:  105:
    #####:  106:int X509_policy_level_node_count(X509_POLICY_LEVEL *level)
        -:  107:	{
        -:  108:	int n;
    #####:  109:	if (!level)
        -:  110:		return 0;
    #####:  111:	if (level->anyPolicy)
        -:  112:		n = 1;
        -:  113:	else
        -:  114:		n = 0;
    #####:  115:	if (level->nodes)
    #####:  116:		n += sk_X509_POLICY_NODE_num(level->nodes);
    #####:  117:	return n;
        -:  118:	}
        -:  119:
    #####:  120:X509_POLICY_NODE *X509_policy_level_get0_node(X509_POLICY_LEVEL *level, int i)
        -:  121:	{
    #####:  122:	if (!level)
        -:  123:		return NULL;
    #####:  124:	if (level->anyPolicy)
        -:  125:		{
    #####:  126:		if (i == 0)
        -:  127:			return level->anyPolicy;
    #####:  128:		i--;
        -:  129:		}
    #####:  130:	return sk_X509_POLICY_NODE_value(level->nodes, i);
        -:  131:	}
        -:  132:
        -:  133:/* X509_POLICY_NODE stuff */
        -:  134:
    #####:  135:const ASN1_OBJECT *X509_policy_node_get0_policy(const X509_POLICY_NODE *node)
        -:  136:	{
    #####:  137:	if (!node)
        -:  138:		return NULL;
    #####:  139:	return node->data->valid_policy;
        -:  140:	}
        -:  141:
        -:  142:#if 0
        -:  143:int X509_policy_node_get_critical(const X509_POLICY_NODE *node)
        -:  144:	{
        -:  145:	if (node_critical(node))
        -:  146:		return 1;
        -:  147:	return 0;
        -:  148:	}
        -:  149:#endif
        -:  150:
        -:  151:STACK_OF(POLICYQUALINFO) *
    #####:  152:		X509_policy_node_get0_qualifiers(const X509_POLICY_NODE *node)
        -:  153:	{
    #####:  154:	if (!node)
        -:  155:		return NULL;
    #####:  156:	return node->data->qualifier_set;
        -:  157:	}
        -:  158:
        -:  159:const X509_POLICY_NODE *
    #####:  160:		X509_policy_node_get0_parent(const X509_POLICY_NODE *node)
        -:  161:	{
    #####:  162:	if (!node)
        -:  163:		return NULL;
    #####:  164:	return node->parent;
        -:  165:	}
        -:  166:
        -:  167:
