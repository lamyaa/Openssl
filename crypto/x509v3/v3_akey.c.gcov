        -:    0:Source:v3_akey.c
        -:    0:Graph:v3_akey.gcno
        -:    0:Data:v3_akey.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* v3_akey.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 1999.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/conf.h>
        -:   62:#include <openssl/asn1.h>
        -:   63:#include <openssl/asn1t.h>
        -:   64:#include <openssl/x509v3.h>
        -:   65:
        -:   66:static STACK_OF(CONF_VALUE) *i2v_AUTHORITY_KEYID(X509V3_EXT_METHOD *method,
        -:   67:			AUTHORITY_KEYID *akeyid, STACK_OF(CONF_VALUE) *extlist);
        -:   68:static AUTHORITY_KEYID *v2i_AUTHORITY_KEYID(X509V3_EXT_METHOD *method,
        -:   69:			X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values);
        -:   70:
        -:   71:const X509V3_EXT_METHOD v3_akey_id =
        -:   72:	{
        -:   73:	NID_authority_key_identifier,
        -:   74:	X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_KEYID),
        -:   75:	0,0,0,0,
        -:   76:	0,0,
        -:   77:	(X509V3_EXT_I2V)i2v_AUTHORITY_KEYID,
        -:   78:	(X509V3_EXT_V2I)v2i_AUTHORITY_KEYID,
        -:   79:	0,0,
        -:   80:	NULL
        -:   81:	};
        -:   82:
    #####:   83:static STACK_OF(CONF_VALUE) *i2v_AUTHORITY_KEYID(X509V3_EXT_METHOD *method,
        -:   84:	     AUTHORITY_KEYID *akeyid, STACK_OF(CONF_VALUE) *extlist)
        -:   85:{
        -:   86:	char *tmp;
    #####:   87:	if(akeyid->keyid) {
    #####:   88:		tmp = hex_to_string(akeyid->keyid->data, akeyid->keyid->length);
    #####:   89:		X509V3_add_value("keyid", tmp, &extlist);
    #####:   90:		OPENSSL_free(tmp);
        -:   91:	}
    #####:   92:	if(akeyid->issuer) 
    #####:   93:		extlist = i2v_GENERAL_NAMES(NULL, akeyid->issuer, extlist);
    #####:   94:	if(akeyid->serial) {
    #####:   95:		tmp = hex_to_string(akeyid->serial->data,
    #####:   96:						 akeyid->serial->length);
    #####:   97:		X509V3_add_value("serial", tmp, &extlist);
    #####:   98:		OPENSSL_free(tmp);
        -:   99:	}
    #####:  100:	return extlist;
        -:  101:}
        -:  102:
        -:  103:/* Currently two options:
        -:  104: * keyid: use the issuers subject keyid, the value 'always' means its is
        -:  105: * an error if the issuer certificate doesn't have a key id.
        -:  106: * issuer: use the issuers cert issuer and serial number. The default is
        -:  107: * to only use this if keyid is not present. With the option 'always'
        -:  108: * this is always included.
        -:  109: */
        -:  110:
    #####:  111:static AUTHORITY_KEYID *v2i_AUTHORITY_KEYID(X509V3_EXT_METHOD *method,
        -:  112:	     X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *values)
        -:  113:	{
        -:  114:	char keyid=0, issuer=0;
        -:  115:	int i;
        -:  116:	CONF_VALUE *cnf;
        -:  117:	ASN1_OCTET_STRING *ikeyid = NULL;
        -:  118:	X509_NAME *isname = NULL;
        -:  119:	GENERAL_NAMES * gens = NULL;
        -:  120:	GENERAL_NAME *gen = NULL;
        -:  121:	ASN1_INTEGER *serial = NULL;
        -:  122:	X509_EXTENSION *ext;
        -:  123:	X509 *cert;
        -:  124:	AUTHORITY_KEYID *akeyid;
        -:  125:
    #####:  126:	for(i = 0; i < sk_CONF_VALUE_num(values); i++)
        -:  127:		{
    #####:  128:		cnf = sk_CONF_VALUE_value(values, i);
    #####:  129:		if(!strcmp(cnf->name, "keyid"))
        -:  130:			{
        -:  131:			keyid = 1;
    #####:  132:			if(cnf->value && !strcmp(cnf->value, "always"))
        -:  133:				keyid = 2;
        -:  134:			}
    #####:  135:		else if(!strcmp(cnf->name, "issuer"))
        -:  136:			{
        -:  137:			issuer = 1;
    #####:  138:			if(cnf->value && !strcmp(cnf->value, "always"))
        -:  139:				issuer = 2;
        -:  140:			}
        -:  141:		else
        -:  142:			{
    #####:  143:			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNKNOWN_OPTION);
    #####:  144:			ERR_add_error_data(2, "name=", cnf->name);
    #####:  145:			return NULL;
        -:  146:			}
        -:  147:		}
        -:  148:
    #####:  149:	if(!ctx || !ctx->issuer_cert)
        -:  150:		{
    #####:  151:		if(ctx && (ctx->flags==CTX_TEST))
    #####:  152:			return AUTHORITY_KEYID_new();
    #####:  153:		X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_NO_ISSUER_CERTIFICATE);
    #####:  154:		return NULL;
        -:  155:		}
        -:  156:
        -:  157:	cert = ctx->issuer_cert;
        -:  158:
    #####:  159:	if(keyid)
        -:  160:		{
    #####:  161:		i = X509_get_ext_by_NID(cert, NID_subject_key_identifier, -1);
    #####:  162:		if((i >= 0)  && (ext = X509_get_ext(cert, i)))
    #####:  163:			ikeyid = X509V3_EXT_d2i(ext);
    #####:  164:		if(keyid==2 && !ikeyid)
        -:  165:			{
    #####:  166:			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNABLE_TO_GET_ISSUER_KEYID);
    #####:  167:			return NULL;
        -:  168:			}
        -:  169:		}
        -:  170:
    #####:  171:	if((issuer && !ikeyid) || (issuer == 2))
        -:  172:		{
    #####:  173:		isname = X509_NAME_dup(X509_get_issuer_name(cert));
    #####:  174:		serial = M_ASN1_INTEGER_dup(X509_get_serialNumber(cert));
    #####:  175:		if(!isname || !serial)
        -:  176:			{
    #####:  177:			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS);
    #####:  178:			goto err;
        -:  179:			}
        -:  180:		}
        -:  181:
    #####:  182:	if(!(akeyid = AUTHORITY_KEYID_new())) goto err;
        -:  183:
    #####:  184:	if(isname)
        -:  185:		{
    #####:  186:		if(!(gens = sk_GENERAL_NAME_new_null())
    #####:  187:			|| !(gen = GENERAL_NAME_new())
    #####:  188:			|| !sk_GENERAL_NAME_push(gens, gen))
        -:  189:			{
    #####:  190:			X509V3err(X509V3_F_V2I_AUTHORITY_KEYID,ERR_R_MALLOC_FAILURE);
    #####:  191:			goto err;
        -:  192:			}
    #####:  193:		gen->type = GEN_DIRNAME;
    #####:  194:		gen->d.dirn = isname;
        -:  195:		}
        -:  196:
    #####:  197:	akeyid->issuer = gens;
    #####:  198:	akeyid->serial = serial;
    #####:  199:	akeyid->keyid = ikeyid;
        -:  200:
    #####:  201:	return akeyid;
        -:  202:
        -:  203: err:
    #####:  204:	X509_NAME_free(isname);
    #####:  205:	M_ASN1_INTEGER_free(serial);
    #####:  206:	M_ASN1_OCTET_STRING_free(ikeyid);
    #####:  207:	return NULL;
        -:  208:	}
