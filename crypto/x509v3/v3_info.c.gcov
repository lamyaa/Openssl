        -:    0:Source:v3_info.c
        -:    0:Graph:v3_info.gcno
        -:    0:Data:v3_info.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* v3_info.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 1999.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/conf.h>
        -:   62:#include <openssl/asn1.h>
        -:   63:#include <openssl/asn1t.h>
        -:   64:#include <openssl/x509v3.h>
        -:   65:
        -:   66:static STACK_OF(CONF_VALUE) *i2v_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
        -:   67:				AUTHORITY_INFO_ACCESS *ainfo,
        -:   68:						STACK_OF(CONF_VALUE) *ret);
        -:   69:static AUTHORITY_INFO_ACCESS *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
        -:   70:				 X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval);
        -:   71:
        -:   72:const X509V3_EXT_METHOD v3_info =
        -:   73:{ NID_info_access, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
        -:   74:0,0,0,0,
        -:   75:0,0,
        -:   76:(X509V3_EXT_I2V)i2v_AUTHORITY_INFO_ACCESS,
        -:   77:(X509V3_EXT_V2I)v2i_AUTHORITY_INFO_ACCESS,
        -:   78:0,0,
        -:   79:NULL};
        -:   80:
        -:   81:const X509V3_EXT_METHOD v3_sinfo =
        -:   82:{ NID_sinfo_access, X509V3_EXT_MULTILINE, ASN1_ITEM_ref(AUTHORITY_INFO_ACCESS),
        -:   83:0,0,0,0,
        -:   84:0,0,
        -:   85:(X509V3_EXT_I2V)i2v_AUTHORITY_INFO_ACCESS,
        -:   86:(X509V3_EXT_V2I)v2i_AUTHORITY_INFO_ACCESS,
        -:   87:0,0,
        -:   88:NULL};
        -:   89:
        -:   90:ASN1_SEQUENCE(ACCESS_DESCRIPTION) = {
        -:   91:	ASN1_SIMPLE(ACCESS_DESCRIPTION, method, ASN1_OBJECT),
        -:   92:	ASN1_SIMPLE(ACCESS_DESCRIPTION, location, GENERAL_NAME)
        -:   93:} ASN1_SEQUENCE_END(ACCESS_DESCRIPTION)
        -:   94:
    #####:   95:IMPLEMENT_ASN1_FUNCTIONS(ACCESS_DESCRIPTION)
        -:   96:
        -:   97:ASN1_ITEM_TEMPLATE(AUTHORITY_INFO_ACCESS) = 
        -:   98:	ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, GeneralNames, ACCESS_DESCRIPTION)
        -:   99:ASN1_ITEM_TEMPLATE_END(AUTHORITY_INFO_ACCESS)
        -:  100:
    #####:  101:IMPLEMENT_ASN1_FUNCTIONS(AUTHORITY_INFO_ACCESS)
        -:  102:
    #####:  103:static STACK_OF(CONF_VALUE) *i2v_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
        -:  104:				AUTHORITY_INFO_ACCESS *ainfo,
        -:  105:						STACK_OF(CONF_VALUE) *ret)
        -:  106:{
        -:  107:	ACCESS_DESCRIPTION *desc;
        -:  108:	int i,nlen;
        -:  109:	char objtmp[80], *ntmp;
        -:  110:	CONF_VALUE *vtmp;
    #####:  111:	for(i = 0; i < sk_ACCESS_DESCRIPTION_num(ainfo); i++) {
    #####:  112:		desc = sk_ACCESS_DESCRIPTION_value(ainfo, i);
    #####:  113:		ret = i2v_GENERAL_NAME(method, desc->location, ret);
    #####:  114:		if(!ret) break;
    #####:  115:		vtmp = sk_CONF_VALUE_value(ret, i);
    #####:  116:		i2t_ASN1_OBJECT(objtmp, sizeof objtmp, desc->method);
    #####:  117:		nlen = strlen(objtmp) + strlen(vtmp->name) + 5;
    #####:  118:		ntmp = OPENSSL_malloc(nlen);
    #####:  119:		if(!ntmp) {
    #####:  120:			X509V3err(X509V3_F_I2V_AUTHORITY_INFO_ACCESS,
        -:  121:					ERR_R_MALLOC_FAILURE);
    #####:  122:			return NULL;
        -:  123:		}
    #####:  124:		BUF_strlcpy(ntmp, objtmp, nlen);
    #####:  125:		BUF_strlcat(ntmp, " - ", nlen);
    #####:  126:		BUF_strlcat(ntmp, vtmp->name, nlen);
    #####:  127:		OPENSSL_free(vtmp->name);
    #####:  128:		vtmp->name = ntmp;
        -:  129:		
        -:  130:	}
    #####:  131:	if(!ret) return sk_CONF_VALUE_new_null();
        -:  132:	return ret;
        -:  133:}
        -:  134:
    #####:  135:static AUTHORITY_INFO_ACCESS *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD *method,
        -:  136:				 X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)
        -:  137:{
        -:  138:	AUTHORITY_INFO_ACCESS *ainfo = NULL;
        -:  139:	CONF_VALUE *cnf, ctmp;
        -:  140:	ACCESS_DESCRIPTION *acc;
        -:  141:	int i, objlen;
        -:  142:	char *objtmp, *ptmp;
    #####:  143:	if(!(ainfo = sk_ACCESS_DESCRIPTION_new_null())) {
    #####:  144:		X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,ERR_R_MALLOC_FAILURE);
    #####:  145:		return NULL;
        -:  146:	}
    #####:  147:	for(i = 0; i < sk_CONF_VALUE_num(nval); i++) {
    #####:  148:		cnf = sk_CONF_VALUE_value(nval, i);
    #####:  149:		if(!(acc = ACCESS_DESCRIPTION_new())
    #####:  150:			|| !sk_ACCESS_DESCRIPTION_push(ainfo, acc)) {
    #####:  151:			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,ERR_R_MALLOC_FAILURE);
    #####:  152:			goto err;
        -:  153:		}
    #####:  154:		ptmp = strchr(cnf->name, ';');
    #####:  155:		if(!ptmp) {
    #####:  156:			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,X509V3_R_INVALID_SYNTAX);
    #####:  157:			goto err;
        -:  158:		}
    #####:  159:		objlen = ptmp - cnf->name;
    #####:  160:		ctmp.name = ptmp + 1;
    #####:  161:		ctmp.value = cnf->value;
    #####:  162:		if(!v2i_GENERAL_NAME_ex(acc->location, method, ctx, &ctmp, 0))
        -:  163:								 goto err; 
    #####:  164:		if(!(objtmp = OPENSSL_malloc(objlen + 1))) {
    #####:  165:			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,ERR_R_MALLOC_FAILURE);
    #####:  166:			goto err;
        -:  167:		}
    #####:  168:		strncpy(objtmp, cnf->name, objlen);
    #####:  169:		objtmp[objlen] = 0;
    #####:  170:		acc->method = OBJ_txt2obj(objtmp, 0);
    #####:  171:		if(!acc->method) {
    #####:  172:			X509V3err(X509V3_F_V2I_AUTHORITY_INFO_ACCESS,X509V3_R_BAD_OBJECT);
    #####:  173:			ERR_add_error_data(2, "value=", objtmp);
    #####:  174:			OPENSSL_free(objtmp);
    #####:  175:			goto err;
        -:  176:		}
    #####:  177:		OPENSSL_free(objtmp);
        -:  178:
        -:  179:	}
        -:  180:	return ainfo;
        -:  181:	err:
    #####:  182:	sk_ACCESS_DESCRIPTION_pop_free(ainfo, ACCESS_DESCRIPTION_free);
    #####:  183:	return NULL;
        -:  184:}
        -:  185:
    #####:  186:int i2a_ACCESS_DESCRIPTION(BIO *bp, ACCESS_DESCRIPTION* a)
        -:  187:        {
    #####:  188:	i2a_ASN1_OBJECT(bp, a->method);
        -:  189:#ifdef UNDEF
        -:  190:	i2a_GENERAL_NAME(bp, a->location);
        -:  191:#endif
    #####:  192:	return 2;
        -:  193:	}
