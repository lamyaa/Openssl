        -:    0:Source:v3_prn.c
        -:    0:Graph:v3_prn.gcno
        -:    0:Data:v3_prn.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* v3_prn.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 1999.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:/* X509 v3 extension utilities */
        -:   59:
        -:   60:#include <stdio.h>
        -:   61:#include "cryptlib.h"
        -:   62:#include <openssl/conf.h>
        -:   63:#include <openssl/x509v3.h>
        -:   64:
        -:   65:/* Extension printing routines */
        -:   66:
        -:   67:static int unknown_ext_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent, int supported);
        -:   68:
        -:   69:/* Print out a name+value stack */
        -:   70:
    #####:   71:void X509V3_EXT_val_prn(BIO *out, STACK_OF(CONF_VALUE) *val, int indent, int ml)
        -:   72:{
        -:   73:	int i;
        -:   74:	CONF_VALUE *nval;
    #####:   75:	if(!val) return;
    #####:   76:	if(!ml || !sk_CONF_VALUE_num(val)) {
    #####:   77:		BIO_printf(out, "%*s", indent, "");
    #####:   78:		if(!sk_CONF_VALUE_num(val)) BIO_puts(out, "<EMPTY>\n");
        -:   79:	}
    #####:   80:	for(i = 0; i < sk_CONF_VALUE_num(val); i++) {
    #####:   81:		if(ml) BIO_printf(out, "%*s", indent, "");
    #####:   82:		else if(i > 0) BIO_printf(out, ", ");
    #####:   83:		nval = sk_CONF_VALUE_value(val, i);
    #####:   84:		if(!nval->name) BIO_puts(out, nval->value);
    #####:   85:		else if(!nval->value) BIO_puts(out, nval->name);
        -:   86:#ifndef CHARSET_EBCDIC
    #####:   87:		else BIO_printf(out, "%s:%s", nval->name, nval->value);
        -:   88:#else
        -:   89:		else {
        -:   90:			int len;
        -:   91:			char *tmp;
        -:   92:			len = strlen(nval->value)+1;
        -:   93:			tmp = OPENSSL_malloc(len);
        -:   94:			if (tmp)
        -:   95:			{
        -:   96:				ascii2ebcdic(tmp, nval->value, len);
        -:   97:				BIO_printf(out, "%s:%s", nval->name, tmp);
        -:   98:				OPENSSL_free(tmp);
        -:   99:			}
        -:  100:		}
        -:  101:#endif
    #####:  102:		if(ml) BIO_puts(out, "\n");
        -:  103:	}
        -:  104:}
        -:  105:
        -:  106:/* Main routine: print out a general extension */
        -:  107:
    #####:  108:int X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent)
        -:  109:{
        -:  110:	void *ext_str = NULL;
        -:  111:	char *value = NULL;
        -:  112:	const unsigned char *p;
        -:  113:	const X509V3_EXT_METHOD *method;	
        -:  114:	STACK_OF(CONF_VALUE) *nval = NULL;
        -:  115:	int ok = 1;
        -:  116:
    #####:  117:	if(!(method = X509V3_EXT_get(ext)))
    #####:  118:		return unknown_ext_print(out, ext, flag, indent, 0);
    #####:  119:	p = ext->value->data;
    #####:  120:	if(method->it) ext_str = ASN1_item_d2i(NULL, &p, ext->value->length, ASN1_ITEM_ptr(method->it));
    #####:  121:	else ext_str = method->d2i(NULL, &p, ext->value->length);
        -:  122:
    #####:  123:	if(!ext_str) return unknown_ext_print(out, ext, flag, indent, 1);
        -:  124:
    #####:  125:	if(method->i2s) {
    #####:  126:		if(!(value = method->i2s(method, ext_str))) {
        -:  127:			ok = 0;
        -:  128:			goto err;
        -:  129:		}
        -:  130:#ifndef CHARSET_EBCDIC
    #####:  131:		BIO_printf(out, "%*s%s", indent, "", value);
        -:  132:#else
        -:  133:		{
        -:  134:			int len;
        -:  135:			char *tmp;
        -:  136:			len = strlen(value)+1;
        -:  137:			tmp = OPENSSL_malloc(len);
        -:  138:			if (tmp)
        -:  139:			{
        -:  140:				ascii2ebcdic(tmp, value, len);
        -:  141:				BIO_printf(out, "%*s%s", indent, "", tmp);
        -:  142:				OPENSSL_free(tmp);
        -:  143:			}
        -:  144:		}
        -:  145:#endif
    #####:  146:	} else if(method->i2v) {
    #####:  147:		if(!(nval = method->i2v(method, ext_str, NULL))) {
        -:  148:			ok = 0;
        -:  149:			goto err;
        -:  150:		}
    #####:  151:		X509V3_EXT_val_prn(out, nval, indent,
    #####:  152:				 method->ext_flags & X509V3_EXT_MULTILINE);
    #####:  153:	} else if(method->i2r) {
    #####:  154:		if(!method->i2r(method, ext_str, out, indent)) ok = 0;
        -:  155:	} else ok = 0;
        -:  156:
        -:  157:	err:
    #####:  158:		sk_CONF_VALUE_pop_free(nval, X509V3_conf_free);
    #####:  159:		if(value) OPENSSL_free(value);
    #####:  160:		if(method->it) ASN1_item_free(ext_str, ASN1_ITEM_ptr(method->it));
    #####:  161:		else method->ext_free(ext_str);
    #####:  162:		return ok;
        -:  163:}
        -:  164:
    #####:  165:int X509V3_extensions_print(BIO *bp, char *title, STACK_OF(X509_EXTENSION) *exts, unsigned long flag, int indent)
        -:  166:{
        -:  167:	int i, j;
        -:  168:
    #####:  169:	if(sk_X509_EXTENSION_num(exts) <= 0) return 1;
        -:  170:
    #####:  171:	if(title) 
        -:  172:		{
    #####:  173:		BIO_printf(bp,"%*s%s:\n",indent, "", title);
    #####:  174:		indent += 4;
        -:  175:		}
        -:  176:
    #####:  177:	for (i=0; i<sk_X509_EXTENSION_num(exts); i++)
        -:  178:		{
        -:  179:		ASN1_OBJECT *obj;
        -:  180:		X509_EXTENSION *ex;
    #####:  181:		ex=sk_X509_EXTENSION_value(exts, i);
    #####:  182:		if (indent && BIO_printf(bp,"%*s",indent, "") <= 0) return 0;
    #####:  183:		obj=X509_EXTENSION_get_object(ex);
    #####:  184:		i2a_ASN1_OBJECT(bp,obj);
    #####:  185:		j=X509_EXTENSION_get_critical(ex);
    #####:  186:		if (BIO_printf(bp,": %s\n",j?"critical":"") <= 0)
        -:  187:			return 0;
    #####:  188:		if(!X509V3_EXT_print(bp, ex, flag, indent + 4))
        -:  189:			{
    #####:  190:			BIO_printf(bp, "%*s", indent + 4, "");
    #####:  191:			M_ASN1_OCTET_STRING_print(bp,ex->value);
        -:  192:			}
    #####:  193:		if (BIO_write(bp,"\n",1) <= 0) return 0;
        -:  194:		}
        -:  195:	return 1;
        -:  196:}
        -:  197:
    #####:  198:static int unknown_ext_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent, int supported)
        -:  199:{
    #####:  200:	switch(flag & X509V3_EXT_UNKNOWN_MASK) {
        -:  201:
        -:  202:		case X509V3_EXT_DEFAULT:
        -:  203:		return 0;
        -:  204:
        -:  205:		case X509V3_EXT_ERROR_UNKNOWN:
    #####:  206:		if(supported)
    #####:  207:			BIO_printf(out, "%*s<Parse Error>", indent, "");
        -:  208:		else
    #####:  209:			BIO_printf(out, "%*s<Not Supported>", indent, "");
        -:  210:		return 1;
        -:  211:
        -:  212:		case X509V3_EXT_PARSE_UNKNOWN:
    #####:  213:			return ASN1_parse_dump(out,
    #####:  214:				ext->value->data, ext->value->length, indent, -1);
        -:  215:		case X509V3_EXT_DUMP_UNKNOWN:
    #####:  216:			return BIO_dump_indent(out, (char *)ext->value->data, ext->value->length, indent);
        -:  217:
        -:  218:		default:
        -:  219:		return 1;
        -:  220:	}
        -:  221:}
        -:  222:	
        -:  223:
        -:  224:#ifndef OPENSSL_NO_FP_API
    #####:  225:int X509V3_EXT_print_fp(FILE *fp, X509_EXTENSION *ext, int flag, int indent)
        -:  226:{
        -:  227:	BIO *bio_tmp;
        -:  228:	int ret;
    #####:  229:	if(!(bio_tmp = BIO_new_fp(fp, BIO_NOCLOSE))) return 0;
    #####:  230:	ret = X509V3_EXT_print(bio_tmp, ext, flag, indent);
    #####:  231:	BIO_free(bio_tmp);
    #####:  232:	return ret;
        -:  233:}
        -:  234:#endif
