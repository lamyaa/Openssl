        -:    0:Source:rsa_saos.c
        -:    0:Graph:rsa_saos.gcno
        -:    0:Data:rsa_saos.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/rsa/rsa_saos.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/bn.h>
        -:   62:#include <openssl/rsa.h>
        -:   63:#include <openssl/objects.h>
        -:   64:#include <openssl/x509.h>
        -:   65:
    #####:   66:int RSA_sign_ASN1_OCTET_STRING(int type,
        -:   67:	const unsigned char *m, unsigned int m_len,
        -:   68:	unsigned char *sigret, unsigned int *siglen, RSA *rsa)
        -:   69:	{
        -:   70:	ASN1_OCTET_STRING sig;
        -:   71:	int i,j,ret=1;
        -:   72:	unsigned char *p,*s;
        -:   73:
    #####:   74:	sig.type=V_ASN1_OCTET_STRING;
    #####:   75:	sig.length=m_len;
    #####:   76:	sig.data=(unsigned char *)m;
        -:   77:
    #####:   78:	i=i2d_ASN1_OCTET_STRING(&sig,NULL);
    #####:   79:	j=RSA_size(rsa);
    #####:   80:	if (i > (j-RSA_PKCS1_PADDING_SIZE))
        -:   81:		{
    #####:   82:		RSAerr(RSA_F_RSA_SIGN_ASN1_OCTET_STRING,RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY);
    #####:   83:		return(0);
        -:   84:		}
    #####:   85:	s=(unsigned char *)OPENSSL_malloc((unsigned int)j+1);
    #####:   86:	if (s == NULL)
        -:   87:		{
    #####:   88:		RSAerr(RSA_F_RSA_SIGN_ASN1_OCTET_STRING,ERR_R_MALLOC_FAILURE);
    #####:   89:		return(0);
        -:   90:		}
    #####:   91:	p=s;
    #####:   92:	i2d_ASN1_OCTET_STRING(&sig,&p);
    #####:   93:	i=RSA_private_encrypt(i,s,sigret,rsa,RSA_PKCS1_PADDING);
    #####:   94:	if (i <= 0)
        -:   95:		ret=0;
        -:   96:	else
    #####:   97:		*siglen=i;
        -:   98:
    #####:   99:	OPENSSL_cleanse(s,(unsigned int)j+1);
    #####:  100:	OPENSSL_free(s);
    #####:  101:	return(ret);
        -:  102:	}
        -:  103:
    #####:  104:int RSA_verify_ASN1_OCTET_STRING(int dtype,
        -:  105:	const unsigned char *m,
        -:  106:	unsigned int m_len, unsigned char *sigbuf, unsigned int siglen,
        -:  107:	RSA *rsa)
        -:  108:	{
        -:  109:	int i,ret=0;
        -:  110:	unsigned char *s;
        -:  111:	const unsigned char *p;
        -:  112:	ASN1_OCTET_STRING *sig=NULL;
        -:  113:
    #####:  114:	if (siglen != (unsigned int)RSA_size(rsa))
        -:  115:		{
    #####:  116:		RSAerr(RSA_F_RSA_VERIFY_ASN1_OCTET_STRING,RSA_R_WRONG_SIGNATURE_LENGTH);
    #####:  117:		return(0);
        -:  118:		}
        -:  119:
    #####:  120:	s=(unsigned char *)OPENSSL_malloc((unsigned int)siglen);
    #####:  121:	if (s == NULL)
        -:  122:		{
    #####:  123:		RSAerr(RSA_F_RSA_VERIFY_ASN1_OCTET_STRING,ERR_R_MALLOC_FAILURE);
    #####:  124:		goto err;
        -:  125:		}
    #####:  126:	i=RSA_public_decrypt((int)siglen,sigbuf,s,rsa,RSA_PKCS1_PADDING);
        -:  127:
    #####:  128:	if (i <= 0) goto err;
        -:  129:
    #####:  130:	p=s;
    #####:  131:	sig=d2i_ASN1_OCTET_STRING(NULL,&p,(long)i);
    #####:  132:	if (sig == NULL) goto err;
        -:  133:
    #####:  134:	if (	((unsigned int)sig->length != m_len) ||
    #####:  135:		(memcmp(m,sig->data,m_len) != 0))
        -:  136:		{
    #####:  137:		RSAerr(RSA_F_RSA_VERIFY_ASN1_OCTET_STRING,RSA_R_BAD_SIGNATURE);
        -:  138:		}
        -:  139:	else
        -:  140:		ret=1;
        -:  141:err:
    #####:  142:	if (sig != NULL) M_ASN1_OCTET_STRING_free(sig);
    #####:  143:	if (s != NULL)
        -:  144:		{
    #####:  145:		OPENSSL_cleanse(s,(unsigned int)siglen);
    #####:  146:		OPENSSL_free(s);
        -:  147:		}
    #####:  148:	return(ret);
        -:  149:	}
        -:  150:
