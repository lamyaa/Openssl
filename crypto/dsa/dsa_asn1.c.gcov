        -:    0:Source:dsa_asn1.c
        -:    0:Graph:dsa_asn1.gcno
        -:    0:Data:dsa_asn1.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* dsa_asn1.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 2000.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 2000-2005 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/dsa.h>
        -:   62:#include <openssl/asn1.h>
        -:   63:#include <openssl/asn1t.h>
        -:   64:#include <openssl/rand.h>
        -:   65:
        -:   66:/* Override the default new methods */
    #####:   67:static int sig_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it,
        -:   68:								void *exarg)
        -:   69:{
    #####:   70:	if(operation == ASN1_OP_NEW_PRE) {
        -:   71:		DSA_SIG *sig;
    #####:   72:		sig = OPENSSL_malloc(sizeof(DSA_SIG));
    #####:   73:		if (!sig)
        -:   74:			{
    #####:   75:			DSAerr(DSA_F_SIG_CB, ERR_R_MALLOC_FAILURE);
    #####:   76:			return 0;
        -:   77:			}
    #####:   78:		sig->r = NULL;
    #####:   79:		sig->s = NULL;
    #####:   80:		*pval = (ASN1_VALUE *)sig;
    #####:   81:		return 2;
        -:   82:	}
        -:   83:	return 1;
        -:   84:}
        -:   85:
        -:   86:ASN1_SEQUENCE_cb(DSA_SIG, sig_cb) = {
        -:   87:	ASN1_SIMPLE(DSA_SIG, r, CBIGNUM),
        -:   88:	ASN1_SIMPLE(DSA_SIG, s, CBIGNUM)
        -:   89:} ASN1_SEQUENCE_END_cb(DSA_SIG, DSA_SIG)
        -:   90:
    #####:   91:IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(DSA_SIG, DSA_SIG, DSA_SIG)
        -:   92:
        -:   93:/* Override the default free and new methods */
    #####:   94:static int dsa_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it,
        -:   95:							void *exarg)
        -:   96:{
    #####:   97:	if(operation == ASN1_OP_NEW_PRE) {
    #####:   98:		*pval = (ASN1_VALUE *)DSA_new();
    #####:   99:		if(*pval) return 2;
    #####:  100:		return 0;
    #####:  101:	} else if(operation == ASN1_OP_FREE_PRE) {
    #####:  102:		DSA_free((DSA *)*pval);
    #####:  103:		*pval = NULL;
    #####:  104:		return 2;
        -:  105:	}
        -:  106:	return 1;
        -:  107:}
        -:  108:
        -:  109:ASN1_SEQUENCE_cb(DSAPrivateKey, dsa_cb) = {
        -:  110:	ASN1_SIMPLE(DSA, version, LONG),
        -:  111:	ASN1_SIMPLE(DSA, p, BIGNUM),
        -:  112:	ASN1_SIMPLE(DSA, q, BIGNUM),
        -:  113:	ASN1_SIMPLE(DSA, g, BIGNUM),
        -:  114:	ASN1_SIMPLE(DSA, pub_key, BIGNUM),
        -:  115:	ASN1_SIMPLE(DSA, priv_key, BIGNUM)
        -:  116:} ASN1_SEQUENCE_END_cb(DSA, DSAPrivateKey)
        -:  117:
    #####:  118:IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(DSA, DSAPrivateKey, DSAPrivateKey)
        -:  119:
        -:  120:ASN1_SEQUENCE_cb(DSAparams, dsa_cb) = {
        -:  121:	ASN1_SIMPLE(DSA, p, BIGNUM),
        -:  122:	ASN1_SIMPLE(DSA, q, BIGNUM),
        -:  123:	ASN1_SIMPLE(DSA, g, BIGNUM),
        -:  124:} ASN1_SEQUENCE_END_cb(DSA, DSAparams)
        -:  125:
    #####:  126:IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(DSA, DSAparams, DSAparams)
        -:  127:
        -:  128:/* DSA public key is a bit trickier... its effectively a CHOICE type
        -:  129: * decided by a field called write_params which can either write out
        -:  130: * just the public key as an INTEGER or the parameters and public key
        -:  131: * in a SEQUENCE
        -:  132: */
        -:  133:
        -:  134:ASN1_SEQUENCE(dsa_pub_internal) = {
        -:  135:	ASN1_SIMPLE(DSA, pub_key, BIGNUM),
        -:  136:	ASN1_SIMPLE(DSA, p, BIGNUM),
        -:  137:	ASN1_SIMPLE(DSA, q, BIGNUM),
        -:  138:	ASN1_SIMPLE(DSA, g, BIGNUM)
        -:  139:} ASN1_SEQUENCE_END_name(DSA, dsa_pub_internal)
        -:  140:
        -:  141:ASN1_CHOICE_cb(DSAPublicKey, dsa_cb) = {
        -:  142:	ASN1_SIMPLE(DSA, pub_key, BIGNUM),
        -:  143:	ASN1_EX_COMBINE(0, 0, dsa_pub_internal)
        -:  144:} ASN1_CHOICE_END_cb(DSA, DSAPublicKey, write_params)
        -:  145:
    #####:  146:IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(DSA, DSAPublicKey, DSAPublicKey)
        -:  147:
    #####:  148:DSA *DSAparams_dup(DSA *dsa)
        -:  149:	{
    #####:  150:	return ASN1_item_dup(ASN1_ITEM_rptr(DSAparams), dsa);
        -:  151:	}
        -:  152:
    #####:  153:int DSA_sign(int type, const unsigned char *dgst, int dlen, unsigned char *sig,
        -:  154:	     unsigned int *siglen, DSA *dsa)
        -:  155:	{
        -:  156:	DSA_SIG *s;
    #####:  157:	RAND_seed(dgst, dlen);
    #####:  158:	s=DSA_do_sign(dgst,dlen,dsa);
    #####:  159:	if (s == NULL)
        -:  160:		{
    #####:  161:		*siglen=0;
    #####:  162:		return(0);
        -:  163:		}
    #####:  164:	*siglen=i2d_DSA_SIG(s,&sig);
    #####:  165:	DSA_SIG_free(s);
    #####:  166:	return(1);
        -:  167:	}
        -:  168:
        -:  169:/* data has already been hashed (probably with SHA or SHA-1). */
        -:  170:/* returns
        -:  171: *      1: correct signature
        -:  172: *      0: incorrect signature
        -:  173: *     -1: error
        -:  174: */
    #####:  175:int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
        -:  176:	     const unsigned char *sigbuf, int siglen, DSA *dsa)
        -:  177:	{
        -:  178:	DSA_SIG *s;
        -:  179:	int ret=-1;
        -:  180:
    #####:  181:	s = DSA_SIG_new();
    #####:  182:	if (s == NULL) return(ret);
    #####:  183:	if (d2i_DSA_SIG(&s,&sigbuf,siglen) == NULL) goto err;
    #####:  184:	ret=DSA_do_verify(dgst,dgst_len,s,dsa);
        -:  185:err:
    #####:  186:	DSA_SIG_free(s);
    #####:  187:	return(ret);
        -:  188:	}
