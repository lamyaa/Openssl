        -:    0:Source:ecp_mont.c
        -:    0:Graph:ecp_mont.gcno
        -:    0:Data:ecp_mont.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/ec/ecp_mont.c */
        -:    2:/*
        -:    3: * Originally written by Bodo Moeller for the OpenSSL project.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    openssl-core@openssl.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:/* ====================================================================
        -:   59: * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
        -:   60: * Portions of this software developed by SUN MICROSYSTEMS, INC.,
        -:   61: * and contributed to the OpenSSL project.
        -:   62: */
        -:   63:
        -:   64:#include <openssl/err.h>
        -:   65:
        -:   66:#ifdef OPENSSL_FIPS
        -:   67:#include <openssl/fips.h>
        -:   68:#endif
        -:   69:
        -:   70:#include "ec_lcl.h"
        -:   71:
        -:   72:
    #####:   73:const EC_METHOD *EC_GFp_mont_method(void)
        -:   74:	{
        -:   75:#ifdef OPENSSL_FIPS
        -:   76:	return fips_ec_gfp_mont_method();
        -:   77:#else
        -:   78:	static const EC_METHOD ret = {
        -:   79:		EC_FLAGS_DEFAULT_OCT,
        -:   80:		NID_X9_62_prime_field,
        -:   81:		ec_GFp_mont_group_init,
        -:   82:		ec_GFp_mont_group_finish,
        -:   83:		ec_GFp_mont_group_clear_finish,
        -:   84:		ec_GFp_mont_group_copy,
        -:   85:		ec_GFp_mont_group_set_curve,
        -:   86:		ec_GFp_simple_group_get_curve,
        -:   87:		ec_GFp_simple_group_get_degree,
        -:   88:		ec_GFp_simple_group_check_discriminant,
        -:   89:		ec_GFp_simple_point_init,
        -:   90:		ec_GFp_simple_point_finish,
        -:   91:		ec_GFp_simple_point_clear_finish,
        -:   92:		ec_GFp_simple_point_copy,
        -:   93:		ec_GFp_simple_point_set_to_infinity,
        -:   94:		ec_GFp_simple_set_Jprojective_coordinates_GFp,
        -:   95:		ec_GFp_simple_get_Jprojective_coordinates_GFp,
        -:   96:		ec_GFp_simple_point_set_affine_coordinates,
        -:   97:		ec_GFp_simple_point_get_affine_coordinates,
        -:   98:		0,0,0,
        -:   99:		ec_GFp_simple_add,
        -:  100:		ec_GFp_simple_dbl,
        -:  101:		ec_GFp_simple_invert,
        -:  102:		ec_GFp_simple_is_at_infinity,
        -:  103:		ec_GFp_simple_is_on_curve,
        -:  104:		ec_GFp_simple_cmp,
        -:  105:		ec_GFp_simple_make_affine,
        -:  106:		ec_GFp_simple_points_make_affine,
        -:  107:		0 /* mul */,
        -:  108:		0 /* precompute_mult */,
        -:  109:		0 /* have_precompute_mult */,	
        -:  110:		ec_GFp_mont_field_mul,
        -:  111:		ec_GFp_mont_field_sqr,
        -:  112:		0 /* field_div */,
        -:  113:		ec_GFp_mont_field_encode,
        -:  114:		ec_GFp_mont_field_decode,
        -:  115:		ec_GFp_mont_field_set_to_one };
        -:  116:
    #####:  117:	return &ret;
        -:  118:#endif
        -:  119:	}
        -:  120:
        -:  121:
    #####:  122:int ec_GFp_mont_group_init(EC_GROUP *group)
        -:  123:	{
        -:  124:	int ok;
        -:  125:
    #####:  126:	ok = ec_GFp_simple_group_init(group);
    #####:  127:	group->field_data1 = NULL;
    #####:  128:	group->field_data2 = NULL;
    #####:  129:	return ok;
        -:  130:	}
        -:  131:
        -:  132:
    #####:  133:void ec_GFp_mont_group_finish(EC_GROUP *group)
        -:  134:	{
    #####:  135:	if (group->field_data1 != NULL)
        -:  136:		{
    #####:  137:		BN_MONT_CTX_free(group->field_data1);
    #####:  138:		group->field_data1 = NULL;
        -:  139:		}
    #####:  140:	if (group->field_data2 != NULL)
        -:  141:		{
    #####:  142:		BN_free(group->field_data2);
    #####:  143:		group->field_data2 = NULL;
        -:  144:		}
    #####:  145:	ec_GFp_simple_group_finish(group);
    #####:  146:	}
        -:  147:
        -:  148:
    #####:  149:void ec_GFp_mont_group_clear_finish(EC_GROUP *group)
        -:  150:	{
    #####:  151:	if (group->field_data1 != NULL)
        -:  152:		{
    #####:  153:		BN_MONT_CTX_free(group->field_data1);
    #####:  154:		group->field_data1 = NULL;
        -:  155:		}
    #####:  156:	if (group->field_data2 != NULL)
        -:  157:		{
    #####:  158:		BN_clear_free(group->field_data2);
    #####:  159:		group->field_data2 = NULL;
        -:  160:		}
    #####:  161:	ec_GFp_simple_group_clear_finish(group);
    #####:  162:	}
        -:  163:
        -:  164:
    #####:  165:int ec_GFp_mont_group_copy(EC_GROUP *dest, const EC_GROUP *src)
        -:  166:	{
    #####:  167:	if (dest->field_data1 != NULL)
        -:  168:		{
    #####:  169:		BN_MONT_CTX_free(dest->field_data1);
    #####:  170:		dest->field_data1 = NULL;
        -:  171:		}
    #####:  172:	if (dest->field_data2 != NULL)
        -:  173:		{
    #####:  174:		BN_clear_free(dest->field_data2);
    #####:  175:		dest->field_data2 = NULL;
        -:  176:		}
        -:  177:
    #####:  178:	if (!ec_GFp_simple_group_copy(dest, src)) return 0;
        -:  179:
    #####:  180:	if (src->field_data1 != NULL)
        -:  181:		{
    #####:  182:		dest->field_data1 = BN_MONT_CTX_new();
    #####:  183:		if (dest->field_data1 == NULL) return 0;
    #####:  184:		if (!BN_MONT_CTX_copy(dest->field_data1, src->field_data1)) goto err;
        -:  185:		}
    #####:  186:	if (src->field_data2 != NULL)
        -:  187:		{
    #####:  188:		dest->field_data2 = BN_dup(src->field_data2);
    #####:  189:		if (dest->field_data2 == NULL) goto err;
        -:  190:		}
        -:  191:
        -:  192:	return 1;
        -:  193:
        -:  194: err:
    #####:  195:	if (dest->field_data1 != NULL)
        -:  196:		{
    #####:  197:		BN_MONT_CTX_free(dest->field_data1);
    #####:  198:		dest->field_data1 = NULL;
        -:  199:		}
        -:  200:	return 0;	
        -:  201:	}
        -:  202:
        -:  203:
    #####:  204:int ec_GFp_mont_group_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
        -:  205:	{
        -:  206:	BN_CTX *new_ctx = NULL;
        -:  207:	BN_MONT_CTX *mont = NULL;
        -:  208:	BIGNUM *one = NULL;
        -:  209:	int ret = 0;
        -:  210:
    #####:  211:	if (group->field_data1 != NULL)
        -:  212:		{
    #####:  213:		BN_MONT_CTX_free(group->field_data1);
    #####:  214:		group->field_data1 = NULL;
        -:  215:		}
    #####:  216:	if (group->field_data2 != NULL)
        -:  217:		{
    #####:  218:		BN_free(group->field_data2);
    #####:  219:		group->field_data2 = NULL;
        -:  220:		}
        -:  221:	
    #####:  222:	if (ctx == NULL)
        -:  223:		{
    #####:  224:		ctx = new_ctx = BN_CTX_new();
    #####:  225:		if (ctx == NULL)
        -:  226:			return 0;
        -:  227:		}
        -:  228:
    #####:  229:	mont = BN_MONT_CTX_new();
    #####:  230:	if (mont == NULL) goto err;
    #####:  231:	if (!BN_MONT_CTX_set(mont, p, ctx))
        -:  232:		{
    #####:  233:		ECerr(EC_F_EC_GFP_MONT_GROUP_SET_CURVE, ERR_R_BN_LIB);
    #####:  234:		goto err;
        -:  235:		}
    #####:  236:	one = BN_new();
    #####:  237:	if (one == NULL) goto err;
    #####:  238:	if (!BN_to_montgomery(one, BN_value_one(), mont, ctx)) goto err;
        -:  239:
    #####:  240:	group->field_data1 = mont;
        -:  241:	mont = NULL;
    #####:  242:	group->field_data2 = one;
        -:  243:	one = NULL;
        -:  244:
    #####:  245:	ret = ec_GFp_simple_group_set_curve(group, p, a, b, ctx);
        -:  246:
    #####:  247:	if (!ret)
        -:  248:		{
    #####:  249:		BN_MONT_CTX_free(group->field_data1);
    #####:  250:		group->field_data1 = NULL;
    #####:  251:		BN_free(group->field_data2);
    #####:  252:		group->field_data2 = NULL;
        -:  253:		}
        -:  254:
        -:  255: err:
    #####:  256:	if (new_ctx != NULL)
    #####:  257:		BN_CTX_free(new_ctx);
    #####:  258:	if (mont != NULL)
    #####:  259:		BN_MONT_CTX_free(mont);
    #####:  260:	return ret;
        -:  261:	}
        -:  262:
        -:  263:
    #####:  264:int ec_GFp_mont_field_mul(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
        -:  265:	{
    #####:  266:	if (group->field_data1 == NULL)
        -:  267:		{
    #####:  268:		ECerr(EC_F_EC_GFP_MONT_FIELD_MUL, EC_R_NOT_INITIALIZED);
    #####:  269:		return 0;
        -:  270:		}
        -:  271:
    #####:  272:	return BN_mod_mul_montgomery(r, a, b, group->field_data1, ctx);
        -:  273:	}
        -:  274:
        -:  275:
    #####:  276:int ec_GFp_mont_field_sqr(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
        -:  277:	{
    #####:  278:	if (group->field_data1 == NULL)
        -:  279:		{
    #####:  280:		ECerr(EC_F_EC_GFP_MONT_FIELD_SQR, EC_R_NOT_INITIALIZED);
    #####:  281:		return 0;
        -:  282:		}
        -:  283:
    #####:  284:	return BN_mod_mul_montgomery(r, a, a, group->field_data1, ctx);
        -:  285:	}
        -:  286:
        -:  287:
    #####:  288:int ec_GFp_mont_field_encode(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
        -:  289:	{
    #####:  290:	if (group->field_data1 == NULL)
        -:  291:		{
    #####:  292:		ECerr(EC_F_EC_GFP_MONT_FIELD_ENCODE, EC_R_NOT_INITIALIZED);
    #####:  293:		return 0;
        -:  294:		}
        -:  295:
    #####:  296:	return BN_to_montgomery(r, a, (BN_MONT_CTX *)group->field_data1, ctx);
        -:  297:	}
        -:  298:
        -:  299:
    #####:  300:int ec_GFp_mont_field_decode(const EC_GROUP *group, BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
        -:  301:	{
    #####:  302:	if (group->field_data1 == NULL)
        -:  303:		{
    #####:  304:		ECerr(EC_F_EC_GFP_MONT_FIELD_DECODE, EC_R_NOT_INITIALIZED);
    #####:  305:		return 0;
        -:  306:		}
        -:  307:
    #####:  308:	return BN_from_montgomery(r, a, group->field_data1, ctx);
        -:  309:	}
        -:  310:
        -:  311:
    #####:  312:int ec_GFp_mont_field_set_to_one(const EC_GROUP *group, BIGNUM *r, BN_CTX *ctx)
        -:  313:	{
    #####:  314:	if (group->field_data2 == NULL)
        -:  315:		{
    #####:  316:		ECerr(EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE, EC_R_NOT_INITIALIZED);
    #####:  317:		return 0;
        -:  318:		}
        -:  319:
    #####:  320:	if (!BN_copy(r, group->field_data2)) return 0;
    #####:  321:	return 1;
        -:  322:	}
