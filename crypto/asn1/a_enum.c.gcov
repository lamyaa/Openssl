        -:    0:Source:a_enum.c
        -:    0:Graph:a_enum.gcno
        -:    0:Data:a_enum.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/asn1/a_enum.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/asn1.h>
        -:   62:#include <openssl/bn.h>
        -:   63:
        -:   64:/* 
        -:   65: * Code for ENUMERATED type: identical to INTEGER apart from a different tag.
        -:   66: * for comments on encoding see a_int.c
        -:   67: */
        -:   68:
    #####:   69:int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)
        -:   70:	{
        -:   71:	int j,k;
        -:   72:	unsigned int i;
        -:   73:	unsigned char buf[sizeof(long)+1];
        -:   74:	long d;
        -:   75:
    #####:   76:	a->type=V_ASN1_ENUMERATED;
    #####:   77:	if (a->length < (int)(sizeof(long)+1))
        -:   78:		{
    #####:   79:		if (a->data != NULL)
    #####:   80:			OPENSSL_free(a->data);
    #####:   81:		if ((a->data=(unsigned char *)OPENSSL_malloc(sizeof(long)+1)) != NULL)
        -:   82:			memset((char *)a->data,0,sizeof(long)+1);
        -:   83:		}
    #####:   84:	if (a->data == NULL)
        -:   85:		{
    #####:   86:		ASN1err(ASN1_F_ASN1_ENUMERATED_SET,ERR_R_MALLOC_FAILURE);
    #####:   87:		return(0);
        -:   88:		}
        -:   89:	d=v;
    #####:   90:	if (d < 0)
        -:   91:		{
    #####:   92:		d= -d;
    #####:   93:		a->type=V_ASN1_NEG_ENUMERATED;
        -:   94:		}
        -:   95:
    #####:   96:	for (i=0; i<sizeof(long); i++)
        -:   97:		{
    #####:   98:		if (d == 0) break;
    #####:   99:		buf[i]=(int)d&0xff;
    #####:  100:		d>>=8;
        -:  101:		}
        -:  102:	j=0;
    #####:  103:	for (k=i-1; k >=0; k--)
    #####:  104:		a->data[j++]=buf[k];
    #####:  105:	a->length=j;
    #####:  106:	return(1);
        -:  107:	}
        -:  108:
    #####:  109:long ASN1_ENUMERATED_get(ASN1_ENUMERATED *a)
        -:  110:	{
        -:  111:	int neg=0,i;
        -:  112:	long r=0;
        -:  113:
    #####:  114:	if (a == NULL) return(0L);
    #####:  115:	i=a->type;
    #####:  116:	if (i == V_ASN1_NEG_ENUMERATED)
        -:  117:		neg=1;
    #####:  118:	else if (i != V_ASN1_ENUMERATED)
        -:  119:		return -1;
        -:  120:	
    #####:  121:	if (a->length > (int)sizeof(long))
        -:  122:		{
        -:  123:		/* hmm... a bit ugly */
        -:  124:		return(0xffffffffL);
        -:  125:		}
    #####:  126:	if (a->data == NULL)
        -:  127:		return 0;
        -:  128:
    #####:  129:	for (i=0; i<a->length; i++)
        -:  130:		{
    #####:  131:		r<<=8;
    #####:  132:		r|=(unsigned char)a->data[i];
        -:  133:		}
    #####:  134:	if (neg) r= -r;
    #####:  135:	return(r);
        -:  136:	}
        -:  137:
    #####:  138:ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(BIGNUM *bn, ASN1_ENUMERATED *ai)
        -:  139:	{
        -:  140:	ASN1_ENUMERATED *ret;
        -:  141:	int len,j;
        -:  142:
    #####:  143:	if (ai == NULL)
    #####:  144:		ret=M_ASN1_ENUMERATED_new();
        -:  145:	else
        -:  146:		ret=ai;
    #####:  147:	if (ret == NULL)
        -:  148:		{
    #####:  149:		ASN1err(ASN1_F_BN_TO_ASN1_ENUMERATED,ERR_R_NESTED_ASN1_ERROR);
    #####:  150:		goto err;
        -:  151:		}
    #####:  152:	if(BN_is_negative(bn)) ret->type = V_ASN1_NEG_ENUMERATED;
    #####:  153:	else ret->type=V_ASN1_ENUMERATED;
    #####:  154:	j=BN_num_bits(bn);
    #####:  155:	len=((j == 0)?0:((j/8)+1));
    #####:  156:	if (ret->length < len+4)
        -:  157:		{
    #####:  158:		unsigned char *new_data=OPENSSL_realloc(ret->data, len+4);
    #####:  159:		if (!new_data)
        -:  160:			{
    #####:  161:			ASN1err(ASN1_F_BN_TO_ASN1_ENUMERATED,ERR_R_MALLOC_FAILURE);
    #####:  162:			goto err;
        -:  163:			}
    #####:  164:		ret->data=new_data;
        -:  165:		}
        -:  166:
    #####:  167:	ret->length=BN_bn2bin(bn,ret->data);
    #####:  168:	return(ret);
        -:  169:err:
    #####:  170:	if (ret != ai) M_ASN1_ENUMERATED_free(ret);
        -:  171:	return(NULL);
        -:  172:	}
        -:  173:
    #####:  174:BIGNUM *ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED *ai, BIGNUM *bn)
        -:  175:	{
        -:  176:	BIGNUM *ret;
        -:  177:
    #####:  178:	if ((ret=BN_bin2bn(ai->data,ai->length,bn)) == NULL)
    #####:  179:		ASN1err(ASN1_F_ASN1_ENUMERATED_TO_BN,ASN1_R_BN_LIB);
    #####:  180:	else if(ai->type == V_ASN1_NEG_ENUMERATED) BN_set_negative(ret,1);
    #####:  181:	return(ret);
        -:  182:	}
