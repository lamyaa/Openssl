        -:    0:Source:x_algor.c
        -:    0:Graph:x_algor.gcno
        -:    0:Data:x_algor.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* x_algor.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 2000.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stddef.h>
        -:   60:#include <openssl/x509.h>
        -:   61:#include <openssl/asn1.h>
        -:   62:#include <openssl/asn1t.h>
        -:   63:
        -:   64:ASN1_SEQUENCE(X509_ALGOR) = {
        -:   65:	ASN1_SIMPLE(X509_ALGOR, algorithm, ASN1_OBJECT),
        -:   66:	ASN1_OPT(X509_ALGOR, parameter, ASN1_ANY)
        -:   67:} ASN1_SEQUENCE_END(X509_ALGOR)
        -:   68:
        -:   69:ASN1_ITEM_TEMPLATE(X509_ALGORS) = 
        -:   70:	ASN1_EX_TEMPLATE_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, algorithms, X509_ALGOR)
        -:   71:ASN1_ITEM_TEMPLATE_END(X509_ALGORS)
        -:   72:
    20000:   73:IMPLEMENT_ASN1_FUNCTIONS(X509_ALGOR)
    #####:   74:IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(X509_ALGORS, X509_ALGORS, X509_ALGORS)
    #####:   75:IMPLEMENT_ASN1_DUP_FUNCTION(X509_ALGOR)
        -:   76:
        -:   77:IMPLEMENT_STACK_OF(X509_ALGOR)
        -:   78:IMPLEMENT_ASN1_SET_OF(X509_ALGOR)
        -:   79:
    #####:   80:int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval)
        -:   81:	{
    #####:   82:	if (!alg)
        -:   83:		return 0;
    #####:   84:	if (ptype != V_ASN1_UNDEF)
        -:   85:		{
    #####:   86:		if (alg->parameter == NULL)
    #####:   87:			alg->parameter = ASN1_TYPE_new();
    #####:   88:		if (alg->parameter == NULL)
        -:   89:			return 0;
        -:   90:		}
    #####:   91:	if (alg)
        -:   92:		{
    #####:   93:		if (alg->algorithm)
    #####:   94:			ASN1_OBJECT_free(alg->algorithm);
    #####:   95:		alg->algorithm = aobj;
        -:   96:		}
    #####:   97:	if (ptype == 0)
        -:   98:		return 1;	
    #####:   99:	if (ptype == V_ASN1_UNDEF)
        -:  100:		{
    #####:  101:		if (alg->parameter)
        -:  102:			{
    #####:  103:			ASN1_TYPE_free(alg->parameter);
    #####:  104:			alg->parameter = NULL;
        -:  105:			}
        -:  106:		}
        -:  107:	else
    #####:  108:		ASN1_TYPE_set(alg->parameter, ptype, pval);
        -:  109:	return 1;
        -:  110:	}
        -:  111:
    #####:  112:void X509_ALGOR_get0(ASN1_OBJECT **paobj, int *pptype, void **ppval,
        -:  113:						X509_ALGOR *algor)
        -:  114:	{
    #####:  115:	if (paobj)
    #####:  116:		*paobj = algor->algorithm;
    #####:  117:	if (pptype)
        -:  118:		{
    #####:  119:		if (algor->parameter == NULL)
        -:  120:			{
    #####:  121:			*pptype = V_ASN1_UNDEF;
    #####:  122:			return;
        -:  123:			}
        -:  124:		else
    #####:  125:			*pptype = algor->parameter->type;
    #####:  126:		if (ppval)
    #####:  127:			*ppval = algor->parameter->value.ptr;
        -:  128:		}
        -:  129:	}
        -:  130:
        -:  131:/* Set up an X509_ALGOR DigestAlgorithmIdentifier from an EVP_MD */
        -:  132:
    #####:  133:void X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md)
        -:  134:	{
        -:  135:	int param_type;
        -:  136:
    #####:  137:	if (md->flags & EVP_MD_FLAG_DIGALGID_ABSENT)
        -:  138:		param_type = V_ASN1_UNDEF;
        -:  139:	else
        -:  140:		param_type = V_ASN1_NULL;
        -:  141:
    #####:  142:	X509_ALGOR_set0(alg, OBJ_nid2obj(EVP_MD_type(md)), param_type, NULL);
        -:  143:
    #####:  144:	}
