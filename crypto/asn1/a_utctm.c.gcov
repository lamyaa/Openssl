        -:    0:Source:a_utctm.c
        -:    0:Graph:a_utctm.gcno
        -:    0:Data:a_utctm.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/asn1/a_utctm.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include <time.h>
        -:   61:#include "cryptlib.h"
        -:   62:#include "o_time.h"
        -:   63:#include <openssl/asn1.h>
        -:   64:
        -:   65:#if 0
        -:   66:int i2d_ASN1_UTCTIME(ASN1_UTCTIME *a, unsigned char **pp)
        -:   67:	{
        -:   68:#ifndef CHARSET_EBCDIC
        -:   69:	return(i2d_ASN1_bytes((ASN1_STRING *)a,pp,
        -:   70:		V_ASN1_UTCTIME,V_ASN1_UNIVERSAL));
        -:   71:#else
        -:   72:	/* KLUDGE! We convert to ascii before writing DER */
        -:   73:	int len;
        -:   74:	char tmp[24];
        -:   75:	ASN1_STRING x = *(ASN1_STRING *)a;
        -:   76:
        -:   77:	len = x.length;
        -:   78:	ebcdic2ascii(tmp, x.data, (len >= sizeof tmp) ? sizeof tmp : len);
        -:   79:	x.data = tmp;
        -:   80:	return i2d_ASN1_bytes(&x, pp, V_ASN1_UTCTIME,V_ASN1_UNIVERSAL);
        -:   81:#endif
        -:   82:	}
        -:   83:
        -:   84:
        -:   85:ASN1_UTCTIME *d2i_ASN1_UTCTIME(ASN1_UTCTIME **a, unsigned char **pp,
        -:   86:	     long length)
        -:   87:	{
        -:   88:	ASN1_UTCTIME *ret=NULL;
        -:   89:
        -:   90:	ret=(ASN1_UTCTIME *)d2i_ASN1_bytes((ASN1_STRING **)a,pp,length,
        -:   91:		V_ASN1_UTCTIME,V_ASN1_UNIVERSAL);
        -:   92:	if (ret == NULL)
        -:   93:		{
        -:   94:		ASN1err(ASN1_F_D2I_ASN1_UTCTIME,ERR_R_NESTED_ASN1_ERROR);
        -:   95:		return(NULL);
        -:   96:		}
        -:   97:#ifdef CHARSET_EBCDIC
        -:   98:	ascii2ebcdic(ret->data, ret->data, ret->length);
        -:   99:#endif
        -:  100:	if (!ASN1_UTCTIME_check(ret))
        -:  101:		{
        -:  102:		ASN1err(ASN1_F_D2I_ASN1_UTCTIME,ASN1_R_INVALID_TIME_FORMAT);
        -:  103:		goto err;
        -:  104:		}
        -:  105:
        -:  106:	return(ret);
        -:  107:err:
        -:  108:	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
        -:  109:		M_ASN1_UTCTIME_free(ret);
        -:  110:	return(NULL);
        -:  111:	}
        -:  112:
        -:  113:#endif
        -:  114:
    #####:  115:int ASN1_UTCTIME_check(ASN1_UTCTIME *d)
        -:  116:	{
        -:  117:	static const int min[8]={ 0, 1, 1, 0, 0, 0, 0, 0};
        -:  118:	static const int max[8]={99,12,31,23,59,59,12,59};
        -:  119:	char *a;
        -:  120:	int n,i,l,o;
        -:  121:
    #####:  122:	if (d->type != V_ASN1_UTCTIME) return(0);
    #####:  123:	l=d->length;
    #####:  124:	a=(char *)d->data;
        -:  125:	o=0;
        -:  126:
    #####:  127:	if (l < 11) goto err;
    #####:  128:	for (i=0; i<6; i++)
        -:  129:		{
    #####:  130:		if ((i == 5) && ((a[o] == 'Z') ||
    #####:  131:			(a[o] == '+') || (a[o] == '-')))
        -:  132:			{ i++; break; }
    #####:  133:		if ((a[o] < '0') || (a[o] > '9')) goto err;
    #####:  134:		n= a[o]-'0';
    #####:  135:		if (++o > l) goto err;
        -:  136:
    #####:  137:		if ((a[o] < '0') || (a[o] > '9')) goto err;
    #####:  138:		n=(n*10)+ a[o]-'0';
    #####:  139:		if (++o > l) goto err;
        -:  140:
    #####:  141:		if ((n < min[i]) || (n > max[i])) goto err;
        -:  142:		}
    #####:  143:	if (a[o] == 'Z')
    #####:  144:		o++;
    #####:  145:	else if ((a[o] == '+') || (a[o] == '-'))
        -:  146:		{
    #####:  147:		o++;
    #####:  148:		if (o+4 > l) goto err;
    #####:  149:		for (i=6; i<8; i++)
        -:  150:			{
    #####:  151:			if ((a[o] < '0') || (a[o] > '9')) goto err;
    #####:  152:			n= a[o]-'0';
    #####:  153:			o++;
    #####:  154:			if ((a[o] < '0') || (a[o] > '9')) goto err;
    #####:  155:			n=(n*10)+ a[o]-'0';
    #####:  156:			if ((n < min[i]) || (n > max[i])) goto err;
    #####:  157:			o++;
        -:  158:			}
        -:  159:		}
    #####:  160:	return(o == l);
        -:  161:err:
        -:  162:	return(0);
        -:  163:	}
        -:  164:
    #####:  165:int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
        -:  166:	{
        -:  167:	ASN1_UTCTIME t;
        -:  168:
    #####:  169:	t.type=V_ASN1_UTCTIME;
    #####:  170:	t.length=strlen(str);
    #####:  171:	t.data=(unsigned char *)str;
    #####:  172:	if (ASN1_UTCTIME_check(&t))
        -:  173:		{
    #####:  174:		if (s != NULL)
        -:  175:			{
    #####:  176:			if (!ASN1_STRING_set((ASN1_STRING *)s,
        -:  177:				(unsigned char *)str,t.length))
        -:  178:				return 0;
    #####:  179:			s->type = V_ASN1_UTCTIME;
        -:  180:			}
        -:  181:		return(1);
        -:  182:		}
        -:  183:	else
        -:  184:		return(0);
        -:  185:	}
        -:  186:
    #####:  187:ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
        -:  188:	{
    #####:  189:	return ASN1_UTCTIME_adj(s, t, 0, 0);
        -:  190:	}
        -:  191:
     3850:  192:ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
        -:  193:				int offset_day, long offset_sec)
        -:  194:	{
        -:  195:	char *p;
        -:  196:	struct tm *ts;
        -:  197:	struct tm data;
        -:  198:	size_t len = 20;
        -:  199:
     3850:  200:	if (s == NULL)
    #####:  201:		s=M_ASN1_UTCTIME_new();
     3850:  202:	if (s == NULL)
        -:  203:		return(NULL);
        -:  204:
     3850:  205:	ts=OPENSSL_gmtime(&t, &data);
     3850:  206:	if (ts == NULL)
        -:  207:		return(NULL);
        -:  208:
     3850:  209:	if (offset_day || offset_sec)
        -:  210:		{ 
    #####:  211:		if (!OPENSSL_gmtime_adj(ts, offset_day, offset_sec))
        -:  212:			return NULL;
        -:  213:		}
        -:  214:
     3850:  215:	if((ts->tm_year < 50) || (ts->tm_year >= 150))
        -:  216:		return NULL;
        -:  217:
     3850:  218:	p=(char *)s->data;
     3850:  219:	if ((p == NULL) || ((size_t)s->length < len))
        -:  220:		{
    #####:  221:		p=OPENSSL_malloc(len);
    #####:  222:		if (p == NULL)
        -:  223:			{
    #####:  224:			ASN1err(ASN1_F_ASN1_UTCTIME_ADJ,ERR_R_MALLOC_FAILURE);
    #####:  225:			return(NULL);
        -:  226:			}
    #####:  227:		if (s->data != NULL)
    #####:  228:			OPENSSL_free(s->data);
    #####:  229:		s->data=(unsigned char *)p;
        -:  230:		}
        -:  231:
     7700:  232:	BIO_snprintf(p,len,"%02d%02d%02d%02d%02d%02dZ",ts->tm_year%100,
     3850:  233:		     ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
     3850:  234:	s->length=strlen(p);
     3850:  235:	s->type=V_ASN1_UTCTIME;
        -:  236:#ifdef CHARSET_EBCDIC_not
        -:  237:	ebcdic2ascii(s->data, s->data, s->length);
        -:  238:#endif
     3850:  239:	return(s);
        -:  240:	}
        -:  241:
        -:  242:
    #####:  243:int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
        -:  244:	{
        -:  245:	struct tm *tm;
        -:  246:	struct tm data;
        -:  247:	int offset;
        -:  248:	int year;
        -:  249:
        -:  250:#define g2(p) (((p)[0]-'0')*10+(p)[1]-'0')
        -:  251:
    #####:  252:	if (s->data[12] == 'Z')
        -:  253:		offset=0;
        -:  254:	else
        -:  255:		{
    #####:  256:		offset = g2(s->data+13)*60+g2(s->data+15);
    #####:  257:		if (s->data[12] == '-')
    #####:  258:			offset = -offset;
        -:  259:		}
        -:  260:
    #####:  261:	t -= offset*60; /* FIXME: may overflow in extreme cases */
        -:  262:
    #####:  263:	tm = OPENSSL_gmtime(&t, &data);
        -:  264:	
        -:  265:#define return_cmp(a,b) if ((a)<(b)) return -1; else if ((a)>(b)) return 1
    #####:  266:	year = g2(s->data);
    #####:  267:	if (year < 50)
    #####:  268:		year += 100;
    #####:  269:	return_cmp(year,              tm->tm_year);
    #####:  270:	return_cmp(g2(s->data+2) - 1, tm->tm_mon);
    #####:  271:	return_cmp(g2(s->data+4),     tm->tm_mday);
    #####:  272:	return_cmp(g2(s->data+6),     tm->tm_hour);
    #####:  273:	return_cmp(g2(s->data+8),     tm->tm_min);
    #####:  274:	return_cmp(g2(s->data+10),    tm->tm_sec);
        -:  275:#undef g2
        -:  276:#undef return_cmp
        -:  277:
    #####:  278:	return 0;
        -:  279:	}
        -:  280:
        -:  281:
        -:  282:#if 0
        -:  283:time_t ASN1_UTCTIME_get(const ASN1_UTCTIME *s)
        -:  284:	{
        -:  285:	struct tm tm;
        -:  286:	int offset;
        -:  287:
        -:  288:	memset(&tm,'\0',sizeof tm);
        -:  289:
        -:  290:#define g2(p) (((p)[0]-'0')*10+(p)[1]-'0')
        -:  291:	tm.tm_year=g2(s->data);
        -:  292:	if(tm.tm_year < 50)
        -:  293:		tm.tm_year+=100;
        -:  294:	tm.tm_mon=g2(s->data+2)-1;
        -:  295:	tm.tm_mday=g2(s->data+4);
        -:  296:	tm.tm_hour=g2(s->data+6);
        -:  297:	tm.tm_min=g2(s->data+8);
        -:  298:	tm.tm_sec=g2(s->data+10);
        -:  299:	if(s->data[12] == 'Z')
        -:  300:		offset=0;
        -:  301:	else
        -:  302:		{
        -:  303:		offset=g2(s->data+13)*60+g2(s->data+15);
        -:  304:		if(s->data[12] == '-')
        -:  305:			offset= -offset;
        -:  306:		}
        -:  307:#undef g2
        -:  308:
        -:  309:	return mktime(&tm)-offset*60; /* FIXME: mktime assumes the current timezone
        -:  310:	                               * instead of UTC, and unless we rewrite OpenSSL
        -:  311:				       * in Lisp we cannot locally change the timezone
        -:  312:				       * without possibly interfering with other parts
        -:  313:	                               * of the program. timegm, which uses UTC, is
        -:  314:				       * non-standard.
        -:  315:	                               * Also time_t is inappropriate for general
        -:  316:	                               * UTC times because it may a 32 bit type. */
        -:  317:	}
        -:  318:#endif
