        -:    0:Source:a_gentm.c
        -:    0:Graph:a_gentm.gcno
        -:    0:Data:a_gentm.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/asn1/a_gentm.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:/* GENERALIZEDTIME implementation, written by Steve Henson. Based on UTCTIME */
        -:   60:
        -:   61:#include <stdio.h>
        -:   62:#include <time.h>
        -:   63:#include "cryptlib.h"
        -:   64:#include "o_time.h"
        -:   65:#include <openssl/asn1.h>
        -:   66:
        -:   67:#if 0
        -:   68:
        -:   69:int i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME *a, unsigned char **pp)
        -:   70:	{
        -:   71:#ifdef CHARSET_EBCDIC
        -:   72:	/* KLUDGE! We convert to ascii before writing DER */
        -:   73:	int len;
        -:   74:	char tmp[24];
        -:   75:	ASN1_STRING tmpstr = *(ASN1_STRING *)a;
        -:   76:
        -:   77:	len = tmpstr.length;
        -:   78:	ebcdic2ascii(tmp, tmpstr.data, (len >= sizeof tmp) ? sizeof tmp : len);
        -:   79:	tmpstr.data = tmp;
        -:   80:
        -:   81:	a = (ASN1_GENERALIZEDTIME *) &tmpstr;
        -:   82:#endif
        -:   83:	return(i2d_ASN1_bytes((ASN1_STRING *)a,pp,
        -:   84:		V_ASN1_GENERALIZEDTIME,V_ASN1_UNIVERSAL));
        -:   85:	}
        -:   86:
        -:   87:
        -:   88:ASN1_GENERALIZEDTIME *d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME **a,
        -:   89:	     unsigned char **pp, long length)
        -:   90:	{
        -:   91:	ASN1_GENERALIZEDTIME *ret=NULL;
        -:   92:
        -:   93:	ret=(ASN1_GENERALIZEDTIME *)d2i_ASN1_bytes((ASN1_STRING **)a,pp,length,
        -:   94:		V_ASN1_GENERALIZEDTIME,V_ASN1_UNIVERSAL);
        -:   95:	if (ret == NULL)
        -:   96:		{
        -:   97:		ASN1err(ASN1_F_D2I_ASN1_GENERALIZEDTIME,ERR_R_NESTED_ASN1_ERROR);
        -:   98:		return(NULL);
        -:   99:		}
        -:  100:#ifdef CHARSET_EBCDIC
        -:  101:	ascii2ebcdic(ret->data, ret->data, ret->length);
        -:  102:#endif
        -:  103:	if (!ASN1_GENERALIZEDTIME_check(ret))
        -:  104:		{
        -:  105:		ASN1err(ASN1_F_D2I_ASN1_GENERALIZEDTIME,ASN1_R_INVALID_TIME_FORMAT);
        -:  106:		goto err;
        -:  107:		}
        -:  108:
        -:  109:	return(ret);
        -:  110:err:
        -:  111:	if ((ret != NULL) && ((a == NULL) || (*a != ret)))
        -:  112:		M_ASN1_GENERALIZEDTIME_free(ret);
        -:  113:	return(NULL);
        -:  114:	}
        -:  115:
        -:  116:#endif
        -:  117:
    #####:  118:int ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME *d)
        -:  119:	{
        -:  120:	static const int min[9]={ 0, 0, 1, 1, 0, 0, 0, 0, 0};
        -:  121:	static const int max[9]={99, 99,12,31,23,59,59,12,59};
        -:  122:	char *a;
        -:  123:	int n,i,l,o;
        -:  124:
    #####:  125:	if (d->type != V_ASN1_GENERALIZEDTIME) return(0);
    #####:  126:	l=d->length;
    #####:  127:	a=(char *)d->data;
        -:  128:	o=0;
        -:  129:	/* GENERALIZEDTIME is similar to UTCTIME except the year is
        -:  130:         * represented as YYYY. This stuff treats everything as a two digit
        -:  131:         * field so make first two fields 00 to 99
        -:  132:         */
    #####:  133:	if (l < 13) goto err;
    #####:  134:	for (i=0; i<7; i++)
        -:  135:		{
    #####:  136:		if ((i == 6) && ((a[o] == 'Z') ||
    #####:  137:			(a[o] == '+') || (a[o] == '-')))
        -:  138:			{ i++; break; }
    #####:  139:		if ((a[o] < '0') || (a[o] > '9')) goto err;
    #####:  140:		n= a[o]-'0';
    #####:  141:		if (++o > l) goto err;
        -:  142:
    #####:  143:		if ((a[o] < '0') || (a[o] > '9')) goto err;
    #####:  144:		n=(n*10)+ a[o]-'0';
    #####:  145:		if (++o > l) goto err;
        -:  146:
    #####:  147:		if ((n < min[i]) || (n > max[i])) goto err;
        -:  148:		}
        -:  149:	/* Optional fractional seconds: decimal point followed by one
        -:  150:	 * or more digits.
        -:  151:	 */
    #####:  152:	if (a[o] == '.')
        -:  153:		{
    #####:  154:		if (++o > l) goto err;
        -:  155:		i = o;
    #####:  156:		while ((a[o] >= '0') && (a[o] <= '9') && (o <= l))
    #####:  157:			o++;
        -:  158:		/* Must have at least one digit after decimal point */
    #####:  159:		if (i == o) goto err;
        -:  160:		}
        -:  161:
    #####:  162:	if (a[o] == 'Z')
    #####:  163:		o++;
    #####:  164:	else if ((a[o] == '+') || (a[o] == '-'))
        -:  165:		{
    #####:  166:		o++;
    #####:  167:		if (o+4 > l) goto err;
    #####:  168:		for (i=7; i<9; i++)
        -:  169:			{
    #####:  170:			if ((a[o] < '0') || (a[o] > '9')) goto err;
    #####:  171:			n= a[o]-'0';
    #####:  172:			o++;
    #####:  173:			if ((a[o] < '0') || (a[o] > '9')) goto err;
    #####:  174:			n=(n*10)+ a[o]-'0';
    #####:  175:			if ((n < min[i]) || (n > max[i])) goto err;
    #####:  176:			o++;
        -:  177:			}
        -:  178:		}
        -:  179:	else
        -:  180:		{
        -:  181:		/* Missing time zone information. */
        -:  182:		goto err;
        -:  183:		}
    #####:  184:	return(o == l);
        -:  185:err:
        -:  186:	return(0);
        -:  187:	}
        -:  188:
    #####:  189:int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
        -:  190:	{
        -:  191:	ASN1_GENERALIZEDTIME t;
        -:  192:
    #####:  193:	t.type=V_ASN1_GENERALIZEDTIME;
    #####:  194:	t.length=strlen(str);
    #####:  195:	t.data=(unsigned char *)str;
    #####:  196:	if (ASN1_GENERALIZEDTIME_check(&t))
        -:  197:		{
    #####:  198:		if (s != NULL)
        -:  199:			{
    #####:  200:			if (!ASN1_STRING_set((ASN1_STRING *)s,
        -:  201:				(unsigned char *)str,t.length))
        -:  202:				return 0;
    #####:  203:			s->type=V_ASN1_GENERALIZEDTIME;
        -:  204:			}
        -:  205:		return(1);
        -:  206:		}
        -:  207:	else
        -:  208:		return(0);
        -:  209:	}
        -:  210:
    #####:  211:ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
        -:  212:	     time_t t)
        -:  213:	{
    #####:  214:		return ASN1_GENERALIZEDTIME_adj(s, t, 0, 0);
        -:  215:	}
        -:  216:
     5170:  217:ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
        -:  218:	     time_t t, int offset_day, long offset_sec)
        -:  219:	{
        -:  220:	char *p;
        -:  221:	struct tm *ts;
        -:  222:	struct tm data;
        -:  223:	size_t len = 20; 
        -:  224:
     5170:  225:	if (s == NULL)
    #####:  226:		s=M_ASN1_GENERALIZEDTIME_new();
     5170:  227:	if (s == NULL)
        -:  228:		return(NULL);
        -:  229:
     5170:  230:	ts=OPENSSL_gmtime(&t, &data);
     5170:  231:	if (ts == NULL)
        -:  232:		return(NULL);
        -:  233:
     5170:  234:	if (offset_day || offset_sec)
        -:  235:		{ 
    #####:  236:		if (!OPENSSL_gmtime_adj(ts, offset_day, offset_sec))
        -:  237:			return NULL;
        -:  238:		}
        -:  239:
     5170:  240:	p=(char *)s->data;
     5170:  241:	if ((p == NULL) || ((size_t)s->length < len))
        -:  242:		{
    #####:  243:		p=OPENSSL_malloc(len);
    #####:  244:		if (p == NULL)
        -:  245:			{
    #####:  246:			ASN1err(ASN1_F_ASN1_GENERALIZEDTIME_ADJ,
        -:  247:				ERR_R_MALLOC_FAILURE);
    #####:  248:			return(NULL);
        -:  249:			}
    #####:  250:		if (s->data != NULL)
    #####:  251:			OPENSSL_free(s->data);
    #####:  252:		s->data=(unsigned char *)p;
        -:  253:		}
        -:  254:
    10340:  255:	BIO_snprintf(p,len,"%04d%02d%02d%02d%02d%02dZ",ts->tm_year + 1900,
     5170:  256:		     ts->tm_mon+1,ts->tm_mday,ts->tm_hour,ts->tm_min,ts->tm_sec);
     5170:  257:	s->length=strlen(p);
     5170:  258:	s->type=V_ASN1_GENERALIZEDTIME;
        -:  259:#ifdef CHARSET_EBCDIC_not
        -:  260:	ebcdic2ascii(s->data, s->data, s->length);
        -:  261:#endif
     5170:  262:	return(s);
        -:  263:	}
