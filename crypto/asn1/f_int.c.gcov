        -:    0:Source:f_int.c
        -:    0:Graph:f_int.gcno
        -:    0:Data:f_int.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/asn1/f_int.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/buffer.h>
        -:   62:#include <openssl/asn1.h>
        -:   63:
    #####:   64:int i2a_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *a)
        -:   65:	{
        -:   66:	int i,n=0;
        -:   67:	static const char *h="0123456789ABCDEF";
        -:   68:	char buf[2];
        -:   69:
    #####:   70:	if (a == NULL) return(0);
        -:   71:
    #####:   72:	if (a->type & V_ASN1_NEG)
        -:   73:		{
    #####:   74:		if (BIO_write(bp, "-", 1) != 1) goto err;
        -:   75:		n = 1;
        -:   76:		}
        -:   77:
    #####:   78:	if (a->length == 0)
        -:   79:		{
    #####:   80:		if (BIO_write(bp,"00",2) != 2) goto err;
    #####:   81:		n += 2;
        -:   82:		}
        -:   83:	else
        -:   84:		{
    #####:   85:		for (i=0; i<a->length; i++)
        -:   86:			{
    #####:   87:			if ((i != 0) && (i%35 == 0))
        -:   88:				{
    #####:   89:				if (BIO_write(bp,"\\\n",2) != 2) goto err;
    #####:   90:				n+=2;
        -:   91:				}
    #####:   92:			buf[0]=h[((unsigned char)a->data[i]>>4)&0x0f];
    #####:   93:			buf[1]=h[((unsigned char)a->data[i]   )&0x0f];
    #####:   94:			if (BIO_write(bp,buf,2) != 2) goto err;
    #####:   95:			n+=2;
        -:   96:			}
        -:   97:		}
    #####:   98:	return(n);
        -:   99:err:
        -:  100:	return(-1);
        -:  101:	}
        -:  102:
    #####:  103:int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
        -:  104:	{
        -:  105:	int ret=0;
        -:  106:	int i,j,k,m,n,again,bufsize;
        -:  107:	unsigned char *s=NULL,*sp;
        -:  108:	unsigned char *bufp;
        -:  109:	int num=0,slen=0,first=1;
        -:  110:
    #####:  111:	bs->type=V_ASN1_INTEGER;
        -:  112:
    #####:  113:	bufsize=BIO_gets(bp,buf,size);
        -:  114:	for (;;)
        -:  115:		{
    #####:  116:		if (bufsize < 1) goto err_sl;
        -:  117:		i=bufsize;
    #####:  118:		if (buf[i-1] == '\n') buf[--i]='\0';
    #####:  119:		if (i == 0) goto err_sl;
    #####:  120:		if (buf[i-1] == '\r') buf[--i]='\0';
    #####:  121:		if (i == 0) goto err_sl;
    #####:  122:		again=(buf[i-1] == '\\');
        -:  123:
    #####:  124:		for (j=0; j<i; j++)
        -:  125:			{
        -:  126:#ifndef CHARSET_EBCDIC
    #####:  127:			if (!(	((buf[j] >= '0') && (buf[j] <= '9')) ||
        -:  128:				((buf[j] >= 'a') && (buf[j] <= 'f')) ||
    #####:  129:				((buf[j] >= 'A') && (buf[j] <= 'F'))))
        -:  130:#else
        -:  131:			/* This #ifdef is not strictly necessary, since
        -:  132:			 * the characters A...F a...f 0...9 are contiguous
        -:  133:			 * (yes, even in EBCDIC - but not the whole alphabet).
        -:  134:			 * Nevertheless, isxdigit() is faster.
        -:  135:			 */
        -:  136:			if (!isxdigit(buf[j]))
        -:  137:#endif
        -:  138:				{
        -:  139:				i=j;
        -:  140:				break;
        -:  141:				}
        -:  142:			}
    #####:  143:		buf[i]='\0';
        -:  144:		/* We have now cleared all the crap off the end of the
        -:  145:		 * line */
    #####:  146:		if (i < 2) goto err_sl;
        -:  147:
        -:  148:		bufp=(unsigned char *)buf;
    #####:  149:		if (first)
        -:  150:			{
        -:  151:			first=0;
    #####:  152:			if ((bufp[0] == '0') && (buf[1] == '0'))
        -:  153:				{
    #####:  154:				bufp+=2;
    #####:  155:				i-=2;
        -:  156:				}
        -:  157:			}
        -:  158:		k=0;
    #####:  159:		i-=again;
    #####:  160:		if (i%2 != 0)
        -:  161:			{
    #####:  162:			ASN1err(ASN1_F_A2I_ASN1_INTEGER,ASN1_R_ODD_NUMBER_OF_CHARS);
    #####:  163:			goto err;
        -:  164:			}
    #####:  165:		i/=2;
    #####:  166:		if (num+i > slen)
        -:  167:			{
    #####:  168:			if (s == NULL)
    #####:  169:				sp=(unsigned char *)OPENSSL_malloc(
        -:  170:					(unsigned int)num+i*2);
        -:  171:			else
    #####:  172:				sp=OPENSSL_realloc_clean(s,slen,num+i*2);
    #####:  173:			if (sp == NULL)
        -:  174:				{
    #####:  175:				ASN1err(ASN1_F_A2I_ASN1_INTEGER,ERR_R_MALLOC_FAILURE);
    #####:  176:				if (s != NULL) OPENSSL_free(s);
        -:  177:				goto err;
        -:  178:				}
        -:  179:			s=sp;
    #####:  180:			slen=num+i*2;
        -:  181:			}
    #####:  182:		for (j=0; j<i; j++,k+=2)
        -:  183:			{
    #####:  184:			for (n=0; n<2; n++)
        -:  185:				{
    #####:  186:				m=bufp[k+n];
    #####:  187:				if ((m >= '0') && (m <= '9'))
    #####:  188:					m-='0';
    #####:  189:				else if ((m >= 'a') && (m <= 'f'))
    #####:  190:					m=m-'a'+10;
    #####:  191:				else if ((m >= 'A') && (m <= 'F'))
    #####:  192:					m=m-'A'+10;
        -:  193:				else
        -:  194:					{
    #####:  195:					ASN1err(ASN1_F_A2I_ASN1_INTEGER,ASN1_R_NON_HEX_CHARACTERS);
    #####:  196:					goto err;
        -:  197:					}
    #####:  198:				s[num+j]<<=4;
    #####:  199:				s[num+j]|=m;
        -:  200:				}
        -:  201:			}
        -:  202:		num+=i;
    #####:  203:		if (again)
    #####:  204:			bufsize=BIO_gets(bp,buf,size);
        -:  205:		else
        -:  206:			break;
    #####:  207:		}
    #####:  208:	bs->length=num;
    #####:  209:	bs->data=s;
        -:  210:	ret=1;
        -:  211:err:
        -:  212:	if (0)
        -:  213:		{
        -:  214:err_sl:
    #####:  215:		ASN1err(ASN1_F_A2I_ASN1_INTEGER,ASN1_R_SHORT_LINE);
        -:  216:		}
    #####:  217:	return(ret);
        -:  218:	}
        -:  219:
