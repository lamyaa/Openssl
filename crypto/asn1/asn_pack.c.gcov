        -:    0:Source:asn_pack.c
        -:    0:Graph:asn_pack.gcno
        -:    0:Data:asn_pack.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* asn_pack.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 1999.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/asn1.h>
        -:   62:
        -:   63:#ifndef NO_ASN1_OLD
        -:   64:
        -:   65:/* ASN1 packing and unpacking functions */
        -:   66:
        -:   67:/* Turn an ASN1 encoded SEQUENCE OF into a STACK of structures */
        -:   68:
    #####:   69:STACK_OF(OPENSSL_BLOCK) *ASN1_seq_unpack(const unsigned char *buf, int len,
        -:   70:			 d2i_of_void *d2i, void (*free_func)(OPENSSL_BLOCK))
        -:   71:{
        -:   72:    STACK_OF(OPENSSL_BLOCK) *sk;
        -:   73:    const unsigned char *pbuf;
    #####:   74:    pbuf =  buf;
    #####:   75:    if (!(sk = d2i_ASN1_SET(NULL, &pbuf, len, d2i, free_func,
        -:   76:					V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL)))
    #####:   77:		 ASN1err(ASN1_F_ASN1_SEQ_UNPACK,ASN1_R_DECODE_ERROR);
    #####:   78:    return sk;
        -:   79:}
        -:   80:
        -:   81:/* Turn a STACK structures into an ASN1 encoded SEQUENCE OF structure in a
        -:   82: * OPENSSL_malloc'ed buffer
        -:   83: */
        -:   84:
    #####:   85:unsigned char *ASN1_seq_pack(STACK_OF(OPENSSL_BLOCK) *safes, i2d_of_void *i2d,
        -:   86:			     unsigned char **buf, int *len)
        -:   87:{
        -:   88:	int safelen;
        -:   89:	unsigned char *safe, *p;
    #####:   90:	if (!(safelen = i2d_ASN1_SET(safes, NULL, i2d, V_ASN1_SEQUENCE,
        -:   91:					      V_ASN1_UNIVERSAL, IS_SEQUENCE))) {
    #####:   92:		ASN1err(ASN1_F_ASN1_SEQ_PACK,ASN1_R_ENCODE_ERROR);
    #####:   93:		return NULL;
        -:   94:	}
    #####:   95:	if (!(safe = OPENSSL_malloc (safelen))) {
    #####:   96:		ASN1err(ASN1_F_ASN1_SEQ_PACK,ERR_R_MALLOC_FAILURE);
    #####:   97:		return NULL;
        -:   98:	}
    #####:   99:	p = safe;
    #####:  100:	i2d_ASN1_SET(safes, &p, i2d, V_ASN1_SEQUENCE, V_ASN1_UNIVERSAL,
        -:  101:								 IS_SEQUENCE);
    #####:  102:	if (len) *len = safelen;
    #####:  103:	if (buf) *buf = safe;
    #####:  104:	return safe;
        -:  105:}
        -:  106:
        -:  107:/* Extract an ASN1 object from an ASN1_STRING */
        -:  108:
    #####:  109:void *ASN1_unpack_string(ASN1_STRING *oct, d2i_of_void *d2i)
        -:  110:{
        -:  111:	const unsigned char *p;
        -:  112:	char *ret;
        -:  113:
    #####:  114:	p = oct->data;
    #####:  115:	if(!(ret = d2i(NULL, &p, oct->length)))
    #####:  116:		ASN1err(ASN1_F_ASN1_UNPACK_STRING,ASN1_R_DECODE_ERROR);
    #####:  117:	return ret;
        -:  118:}
        -:  119:
        -:  120:/* Pack an ASN1 object into an ASN1_STRING */
        -:  121:
    #####:  122:ASN1_STRING *ASN1_pack_string(void *obj, i2d_of_void *i2d, ASN1_STRING **oct)
        -:  123:{
        -:  124:	unsigned char *p;
        -:  125:	ASN1_STRING *octmp;
        -:  126:
    #####:  127:	if (!oct || !*oct) {
    #####:  128:		if (!(octmp = ASN1_STRING_new ())) {
    #####:  129:			ASN1err(ASN1_F_ASN1_PACK_STRING,ERR_R_MALLOC_FAILURE);
    #####:  130:			return NULL;
        -:  131:		}
    #####:  132:		if (oct) *oct = octmp;
        -:  133:	} else octmp = *oct;
        -:  134:		
    #####:  135:	if (!(octmp->length = i2d(obj, NULL))) {
    #####:  136:		ASN1err(ASN1_F_ASN1_PACK_STRING,ASN1_R_ENCODE_ERROR);
    #####:  137:		return NULL;
        -:  138:	}
    #####:  139:	if (!(p = OPENSSL_malloc (octmp->length))) {
    #####:  140:		ASN1err(ASN1_F_ASN1_PACK_STRING,ERR_R_MALLOC_FAILURE);
    #####:  141:		return NULL;
        -:  142:	}
    #####:  143:	octmp->data = p;
    #####:  144:	i2d (obj, &p);
    #####:  145:	return octmp;
        -:  146:}
        -:  147:
        -:  148:#endif
        -:  149:
        -:  150:/* ASN1_ITEM versions of the above */
        -:  151:
    #####:  152:ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
        -:  153:{
        -:  154:	ASN1_STRING *octmp;
        -:  155:
    #####:  156:	if (!oct || !*oct) {
    #####:  157:		if (!(octmp = ASN1_STRING_new ())) {
    #####:  158:			ASN1err(ASN1_F_ASN1_ITEM_PACK,ERR_R_MALLOC_FAILURE);
    #####:  159:			return NULL;
        -:  160:		}
    #####:  161:		if (oct) *oct = octmp;
        -:  162:	} else octmp = *oct;
        -:  163:
    #####:  164:	if(octmp->data) {
    #####:  165:		OPENSSL_free(octmp->data);
    #####:  166:		octmp->data = NULL;
        -:  167:	}
        -:  168:		
    #####:  169:	if (!(octmp->length = ASN1_item_i2d(obj, &octmp->data, it))) {
    #####:  170:		ASN1err(ASN1_F_ASN1_ITEM_PACK,ASN1_R_ENCODE_ERROR);
    #####:  171:		return NULL;
        -:  172:	}
    #####:  173:	if (!octmp->data) {
    #####:  174:		ASN1err(ASN1_F_ASN1_ITEM_PACK,ERR_R_MALLOC_FAILURE);
    #####:  175:		return NULL;
        -:  176:	}
        -:  177:	return octmp;
        -:  178:}
        -:  179:
        -:  180:/* Extract an ASN1 object from an ASN1_STRING */
        -:  181:
    #####:  182:void *ASN1_item_unpack(ASN1_STRING *oct, const ASN1_ITEM *it)
        -:  183:{
        -:  184:	const unsigned char *p;
        -:  185:	void *ret;
        -:  186:
    #####:  187:	p = oct->data;
    #####:  188:	if(!(ret = ASN1_item_d2i(NULL, &p, oct->length, it)))
    #####:  189:		ASN1err(ASN1_F_ASN1_ITEM_UNPACK,ASN1_R_DECODE_ERROR);
    #####:  190:	return ret;
        -:  191:}
