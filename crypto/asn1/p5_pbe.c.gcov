        -:    0:Source:p5_pbe.c
        -:    0:Graph:p5_pbe.gcno
        -:    0:Data:p5_pbe.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* p5_pbe.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 1999.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/asn1t.h>
        -:   62:#include <openssl/x509.h>
        -:   63:#include <openssl/rand.h>
        -:   64:
        -:   65:/* PKCS#5 password based encryption structure */
        -:   66:
        -:   67:ASN1_SEQUENCE(PBEPARAM) = {
        -:   68:	ASN1_SIMPLE(PBEPARAM, salt, ASN1_OCTET_STRING),
        -:   69:	ASN1_SIMPLE(PBEPARAM, iter, ASN1_INTEGER)
        -:   70:} ASN1_SEQUENCE_END(PBEPARAM)
        -:   71:
    #####:   72:IMPLEMENT_ASN1_FUNCTIONS(PBEPARAM)
        -:   73:
        -:   74:
        -:   75:/* Set an algorithm identifier for a PKCS#5 PBE algorithm */
        -:   76:
    #####:   77:int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
        -:   78:				const unsigned char *salt, int saltlen)
        -:   79:	{
        -:   80:	PBEPARAM *pbe=NULL;
    #####:   81:	ASN1_STRING *pbe_str=NULL;
        -:   82:	unsigned char *sstr;
        -:   83:
        -:   84:	pbe = PBEPARAM_new();
    #####:   85:	if (!pbe)
        -:   86:		{
    #####:   87:		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
    #####:   88:		goto err;
        -:   89:		}
    #####:   90:	if(iter <= 0)
        -:   91:		iter = PKCS5_DEFAULT_ITER;
    #####:   92:	if (!ASN1_INTEGER_set(pbe->iter, iter))
        -:   93:		{
    #####:   94:		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
    #####:   95:		goto err;
        -:   96:		}
    #####:   97:	if (!saltlen)
        -:   98:		saltlen = PKCS5_SALT_LEN;
    #####:   99:	if (!ASN1_STRING_set(pbe->salt, NULL, saltlen))
        -:  100:		{
    #####:  101:		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
    #####:  102:		goto err;
        -:  103:		}
    #####:  104:	sstr = ASN1_STRING_data(pbe->salt);
    #####:  105:	if (salt)
    #####:  106:		memcpy(sstr, salt, saltlen);
    #####:  107:	else if (RAND_pseudo_bytes(sstr, saltlen) < 0)
        -:  108:		goto err;
        -:  109:
    #####:  110:	if(!ASN1_item_pack(pbe, ASN1_ITEM_rptr(PBEPARAM), &pbe_str))
        -:  111:		{
    #####:  112:		ASN1err(ASN1_F_PKCS5_PBE_SET0_ALGOR,ERR_R_MALLOC_FAILURE);
    #####:  113:		goto err;
        -:  114:		}
        -:  115:
        -:  116:	PBEPARAM_free(pbe);
        -:  117:	pbe = NULL;
        -:  118:
    #####:  119:	if (X509_ALGOR_set0(algor, OBJ_nid2obj(alg), V_ASN1_SEQUENCE, pbe_str))
        -:  120:		return 1;
        -:  121:
        -:  122:err:
    #####:  123:	if (pbe != NULL)
        -:  124:		PBEPARAM_free(pbe);
    #####:  125:	if (pbe_str != NULL)
    #####:  126:		ASN1_STRING_free(pbe_str);
        -:  127:	return 0;
        -:  128:	}
        -:  129:
        -:  130:/* Return an algorithm identifier for a PKCS#5 PBE algorithm */
        -:  131:
    #####:  132:X509_ALGOR *PKCS5_pbe_set(int alg, int iter,
        -:  133:				const unsigned char *salt, int saltlen)
        -:  134:	{
        -:  135:	X509_ALGOR *ret;
    #####:  136:	ret = X509_ALGOR_new();
    #####:  137:	if (!ret)
        -:  138:		{
    #####:  139:		ASN1err(ASN1_F_PKCS5_PBE_SET,ERR_R_MALLOC_FAILURE);
    #####:  140:		return NULL;
        -:  141:		}
        -:  142:
    #####:  143:	if (PKCS5_pbe_set0_algor(ret, alg, iter, salt, saltlen)) 
        -:  144:		return ret;
        -:  145:
    #####:  146:	X509_ALGOR_free(ret);
    #####:  147:	return NULL;
        -:  148:	}
