        -:    0:Source:asn_moid.c
        -:    0:Graph:asn_moid.gcno
        -:    0:Data:asn_moid.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* asn_moid.c */
        -:    2:/* Written by Stephen Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 2001.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 2001-2004 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include <ctype.h>
        -:   61:#include <openssl/crypto.h>
        -:   62:#include "cryptlib.h"
        -:   63:#include <openssl/conf.h>
        -:   64:#include <openssl/dso.h>
        -:   65:#include <openssl/x509.h>
        -:   66:
        -:   67:/* Simple ASN1 OID module: add all objects in a given section */
        -:   68:
        -:   69:static int do_create(char *value, char *name);
        -:   70:
    #####:   71:static int oid_module_init(CONF_IMODULE *md, const CONF *cnf)
        -:   72:	{
        -:   73:	int i;
        -:   74:	const char *oid_section;
        -:   75:	STACK_OF(CONF_VALUE) *sktmp;
        -:   76:	CONF_VALUE *oval;
    #####:   77:	oid_section = CONF_imodule_get_value(md);
    #####:   78:	if(!(sktmp = NCONF_get_section(cnf, oid_section)))
        -:   79:		{
    #####:   80:		ASN1err(ASN1_F_OID_MODULE_INIT, ASN1_R_ERROR_LOADING_SECTION);
    #####:   81:		return 0;
        -:   82:		}
    #####:   83:	for(i = 0; i < sk_CONF_VALUE_num(sktmp); i++)
        -:   84:		{
    #####:   85:		oval = sk_CONF_VALUE_value(sktmp, i);
    #####:   86:		if(!do_create(oval->value, oval->name))
        -:   87:			{
    #####:   88:			ASN1err(ASN1_F_OID_MODULE_INIT, ASN1_R_ADDING_OBJECT);
    #####:   89:			return 0;
        -:   90:			}
        -:   91:		}
        -:   92:	return 1;
        -:   93:	}
        -:   94:
    #####:   95:static void oid_module_finish(CONF_IMODULE *md)
        -:   96:	{
    #####:   97:	OBJ_cleanup();
    #####:   98:	}
        -:   99:
    10000:  100:void ASN1_add_oid_module(void)
        -:  101:	{
    10000:  102:	CONF_module_add("oid_section", oid_module_init, oid_module_finish);
    10000:  103:	}
        -:  104:
        -:  105:/* Create an OID based on a name value pair. Accept two formats.
        -:  106: * shortname = 1.2.3.4
        -:  107: * shortname = some long name, 1.2.3.4
        -:  108: */
        -:  109:
        -:  110:
    #####:  111:static int do_create(char *value, char *name)
        -:  112:	{
        -:  113:	int nid;
        -:  114:	ASN1_OBJECT *oid;
        -:  115:	char *ln, *ostr, *p, *lntmp;
    #####:  116:	p = strrchr(value, ',');
    #####:  117:	if (!p)
        -:  118:		{
        -:  119:		ln = name;
        -:  120:		ostr = value;
        -:  121:		}
        -:  122:	else
        -:  123:		{
        -:  124:		ln = NULL;
    #####:  125:		ostr = p + 1;
    #####:  126:		if (!*ostr)
        -:  127:			return 0;
    #####:  128:		while(isspace((unsigned char)*ostr)) ostr++;
        -:  129:		}
        -:  130:
    #####:  131:	nid = OBJ_create(ostr, name, ln);
        -:  132:
    #####:  133:	if (nid == NID_undef)
        -:  134:		return 0;
        -:  135:
    #####:  136:	if (p)
        -:  137:		{
        -:  138:		ln = value;
    #####:  139:		while(isspace((unsigned char)*ln)) ln++;
    #####:  140:		p--;
    #####:  141:		while(isspace((unsigned char)*p))
        -:  142:			{
    #####:  143:			if (p == ln)
        -:  144:				return 0;
    #####:  145:			p--;
        -:  146:			}
    #####:  147:		p++;
    #####:  148:		lntmp = OPENSSL_malloc((p - ln) + 1);
    #####:  149:		if (lntmp == NULL)
        -:  150:			return 0;
    #####:  151:		memcpy(lntmp, ln, p - ln);
    #####:  152:		lntmp[p - ln] = 0;
    #####:  153:		oid = OBJ_nid2obj(nid);
    #####:  154:		oid->ln = lntmp;
        -:  155:		}
        -:  156:
        -:  157:	return 1;
        -:  158:	}
        -:  159:		
        -:  160:		
