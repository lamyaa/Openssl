        -:    0:Source:evp_asn1.c
        -:    0:Graph:evp_asn1.gcno
        -:    0:Data:evp_asn1.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/asn1/evp_asn1.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/asn1.h>
        -:   62:#include <openssl/asn1_mac.h>
        -:   63:
    #####:   64:int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
        -:   65:	{
        -:   66:	ASN1_STRING *os;
        -:   67:
    #####:   68:	if ((os=M_ASN1_OCTET_STRING_new()) == NULL) return(0);
    #####:   69:	if (!M_ASN1_OCTET_STRING_set(os,data,len)) return(0);
    #####:   70:	ASN1_TYPE_set(a,V_ASN1_OCTET_STRING,os);
    #####:   71:	return(1);
        -:   72:	}
        -:   73:
        -:   74:/* int max_len:  for returned value    */
    #####:   75:int ASN1_TYPE_get_octetstring(ASN1_TYPE *a, unsigned char *data,
        -:   76:	     int max_len)
        -:   77:	{
        -:   78:	int ret,num;
        -:   79:	unsigned char *p;
        -:   80:
    #####:   81:	if ((a->type != V_ASN1_OCTET_STRING) || (a->value.octet_string == NULL))
        -:   82:		{
    #####:   83:		ASN1err(ASN1_F_ASN1_TYPE_GET_OCTETSTRING,ASN1_R_DATA_IS_WRONG);
    #####:   84:		return(-1);
        -:   85:		}
    #####:   86:	p=M_ASN1_STRING_data(a->value.octet_string);
    #####:   87:	ret=M_ASN1_STRING_length(a->value.octet_string);
    #####:   88:	if (ret < max_len)
        -:   89:		num=ret;
        -:   90:	else
        -:   91:		num=max_len;
    #####:   92:	memcpy(data,p,num);
    #####:   93:	return(ret);
        -:   94:	}
        -:   95:
    #####:   96:int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
        -:   97:	     int len)
        -:   98:	{
        -:   99:	int n,size;
        -:  100:	ASN1_OCTET_STRING os,*osp;
        -:  101:	ASN1_INTEGER in;
        -:  102:	unsigned char *p;
        -:  103:	unsigned char buf[32]; /* when they have 256bit longs, 
        -:  104:				* I'll be in trouble */
    #####:  105:	in.data=buf;
    #####:  106:	in.length=32;
    #####:  107:	os.data=data;
    #####:  108:	os.type=V_ASN1_OCTET_STRING;
    #####:  109:	os.length=len;
    #####:  110:	ASN1_INTEGER_set(&in,num);
    #####:  111:	n =  i2d_ASN1_INTEGER(&in,NULL);
    #####:  112:	n+=M_i2d_ASN1_OCTET_STRING(&os,NULL);
        -:  113:
    #####:  114:	size=ASN1_object_size(1,n,V_ASN1_SEQUENCE);
        -:  115:
    #####:  116:	if ((osp=ASN1_STRING_new()) == NULL) return(0);
        -:  117:	/* Grow the 'string' */
    #####:  118:	if (!ASN1_STRING_set(osp,NULL,size))
        -:  119:		{
    #####:  120:		ASN1_STRING_free(osp);
    #####:  121:		return(0);
        -:  122:		}
        -:  123:
    #####:  124:	M_ASN1_STRING_length_set(osp, size);
    #####:  125:	p=M_ASN1_STRING_data(osp);
        -:  126:
    #####:  127:	ASN1_put_object(&p,1,n,V_ASN1_SEQUENCE,V_ASN1_UNIVERSAL);
    #####:  128:	  i2d_ASN1_INTEGER(&in,&p);
    #####:  129:	M_i2d_ASN1_OCTET_STRING(&os,&p);
        -:  130:
    #####:  131:	ASN1_TYPE_set(a,V_ASN1_SEQUENCE,osp);
    #####:  132:	return(1);
        -:  133:	}
        -:  134:
        -:  135:/* we return the actual length..., num may be missing, in which
        -:  136: * case, set it to zero */
        -:  137:/* int max_len:  for returned value    */
    #####:  138:int ASN1_TYPE_get_int_octetstring(ASN1_TYPE *a, long *num, unsigned char *data,
        -:  139:	     int max_len)
        -:  140:	{
        -:  141:	int ret= -1,n;
        -:  142:	ASN1_INTEGER *ai=NULL;
        -:  143:	ASN1_OCTET_STRING *os=NULL;
        -:  144:	const unsigned char *p;
        -:  145:	long length;
        -:  146:	ASN1_const_CTX c;
        -:  147:
    #####:  148:	if ((a->type != V_ASN1_SEQUENCE) || (a->value.sequence == NULL))
        -:  149:		{
        -:  150:		goto err;
        -:  151:		}
    #####:  152:	p=M_ASN1_STRING_data(a->value.sequence);
    #####:  153:	length=M_ASN1_STRING_length(a->value.sequence);
        -:  154:
    #####:  155:	c.pp= &p;
    #####:  156:	c.p=p;
    #####:  157:	c.max=p+length;
    #####:  158:	c.error=ASN1_R_DATA_IS_WRONG;
        -:  159:
    #####:  160:	M_ASN1_D2I_start_sequence();
    #####:  161:	c.q=c.p;
    #####:  162:	if ((ai=d2i_ASN1_INTEGER(NULL,&c.p,c.slen)) == NULL) goto err;
    #####:  163:        c.slen-=(c.p-c.q);
    #####:  164:	c.q=c.p;
    #####:  165:	if ((os=d2i_ASN1_OCTET_STRING(NULL,&c.p,c.slen)) == NULL) goto err;
    #####:  166:        c.slen-=(c.p-c.q);
    #####:  167:	if (!M_ASN1_D2I_end_sequence()) goto err;
        -:  168:
    #####:  169:	if (num != NULL)
    #####:  170:		*num=ASN1_INTEGER_get(ai);
        -:  171:
    #####:  172:	ret=M_ASN1_STRING_length(os);
    #####:  173:	if (max_len > ret)
        -:  174:		n=ret;
        -:  175:	else
        -:  176:		n=max_len;
        -:  177:
    #####:  178:	if (data != NULL)
    #####:  179:		memcpy(data,M_ASN1_STRING_data(os),n);
        -:  180:	if (0)
        -:  181:		{
        -:  182:err:
    #####:  183:		ASN1err(ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING,ASN1_R_DATA_IS_WRONG);
        -:  184:		}
    #####:  185:	if (os != NULL) M_ASN1_OCTET_STRING_free(os);
    #####:  186:	if (ai != NULL) M_ASN1_INTEGER_free(ai);
    #####:  187:	return(ret);
        -:  188:	}
        -:  189:
