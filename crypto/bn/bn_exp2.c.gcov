        -:    0:Source:bn_exp2.c
        -:    0:Graph:bn_exp2.gcno
        -:    0:Data:bn_exp2.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/bn/bn_exp2.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:/* ====================================================================
        -:   59: * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
        -:   60: *
        -:   61: * Redistribution and use in source and binary forms, with or without
        -:   62: * modification, are permitted provided that the following conditions
        -:   63: * are met:
        -:   64: *
        -:   65: * 1. Redistributions of source code must retain the above copyright
        -:   66: *    notice, this list of conditions and the following disclaimer. 
        -:   67: *
        -:   68: * 2. Redistributions in binary form must reproduce the above copyright
        -:   69: *    notice, this list of conditions and the following disclaimer in
        -:   70: *    the documentation and/or other materials provided with the
        -:   71: *    distribution.
        -:   72: *
        -:   73: * 3. All advertising materials mentioning features or use of this
        -:   74: *    software must display the following acknowledgment:
        -:   75: *    "This product includes software developed by the OpenSSL Project
        -:   76: *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
        -:   77: *
        -:   78: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   79: *    endorse or promote products derived from this software without
        -:   80: *    prior written permission. For written permission, please contact
        -:   81: *    openssl-core@openssl.org.
        -:   82: *
        -:   83: * 5. Products derived from this software may not be called "OpenSSL"
        -:   84: *    nor may "OpenSSL" appear in their names without prior written
        -:   85: *    permission of the OpenSSL Project.
        -:   86: *
        -:   87: * 6. Redistributions of any form whatsoever must retain the following
        -:   88: *    acknowledgment:
        -:   89: *    "This product includes software developed by the OpenSSL Project
        -:   90: *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
        -:   91: *
        -:   92: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   93: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   94: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   95: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   96: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   97: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   98: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   99: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:  100: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:  101: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:  102: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:  103: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  104: * ====================================================================
        -:  105: *
        -:  106: * This product includes cryptographic software written by Eric Young
        -:  107: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:  108: * Hudson (tjh@cryptsoft.com).
        -:  109: *
        -:  110: */
        -:  111:
        -:  112:#include <stdio.h>
        -:  113:#include "cryptlib.h"
        -:  114:#include "bn_lcl.h"
        -:  115:
        -:  116:#define TABLE_SIZE	32
        -:  117:
    #####:  118:int BN_mod_exp2_mont(BIGNUM *rr, const BIGNUM *a1, const BIGNUM *p1,
        -:  119:	const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m,
        -:  120:	BN_CTX *ctx, BN_MONT_CTX *in_mont)
        -:  121:	{
        -:  122:	int i,j,bits,b,bits1,bits2,ret=0,wpos1,wpos2,window1,window2,wvalue1,wvalue2;
        -:  123:	int r_is_one=1;
        -:  124:	BIGNUM *d,*r;
        -:  125:	const BIGNUM *a_mod_m;
        -:  126:	/* Tables of variables obtained from 'ctx' */
        -:  127:	BIGNUM *val1[TABLE_SIZE], *val2[TABLE_SIZE];
        -:  128:	BN_MONT_CTX *mont=NULL;
        -:  129:
        -:  130:	bn_check_top(a1);
        -:  131:	bn_check_top(p1);
        -:  132:	bn_check_top(a2);
        -:  133:	bn_check_top(p2);
        -:  134:	bn_check_top(m);
        -:  135:
    #####:  136:	if (!(m->d[0] & 1))
        -:  137:		{
    #####:  138:		BNerr(BN_F_BN_MOD_EXP2_MONT,BN_R_CALLED_WITH_EVEN_MODULUS);
    #####:  139:		return(0);
        -:  140:		}
    #####:  141:	bits1=BN_num_bits(p1);
    #####:  142:	bits2=BN_num_bits(p2);
    #####:  143:	if ((bits1 == 0) && (bits2 == 0))
        -:  144:		{
    #####:  145:		ret = BN_one(rr);
    #####:  146:		return ret;
        -:  147:		}
        -:  148:	
    #####:  149:	bits=(bits1 > bits2)?bits1:bits2;
        -:  150:
    #####:  151:	BN_CTX_start(ctx);
    #####:  152:	d = BN_CTX_get(ctx);
    #####:  153:	r = BN_CTX_get(ctx);
    #####:  154:	val1[0] = BN_CTX_get(ctx);
    #####:  155:	val2[0] = BN_CTX_get(ctx);
    #####:  156:	if(!d || !r || !val1[0] || !val2[0]) goto err;
        -:  157:
    #####:  158:	if (in_mont != NULL)
        -:  159:		mont=in_mont;
        -:  160:	else
        -:  161:		{
    #####:  162:		if ((mont=BN_MONT_CTX_new()) == NULL) goto err;
    #####:  163:		if (!BN_MONT_CTX_set(mont,m,ctx)) goto err;
        -:  164:		}
        -:  165:
    #####:  166:	window1 = BN_window_bits_for_exponent_size(bits1);
    #####:  167:	window2 = BN_window_bits_for_exponent_size(bits2);
        -:  168:
        -:  169:	/*
        -:  170:	 * Build table for a1:   val1[i] := a1^(2*i + 1) mod m  for i = 0 .. 2^(window1-1)
        -:  171:	 */
    #####:  172:	if (a1->neg || BN_ucmp(a1,m) >= 0)
        -:  173:		{
    #####:  174:		if (!BN_mod(val1[0],a1,m,ctx))
        -:  175:			goto err;
        -:  176:		a_mod_m = val1[0];
        -:  177:		}
        -:  178:	else
        -:  179:		a_mod_m = a1;
    #####:  180:	if (BN_is_zero(a_mod_m))
        -:  181:		{
    #####:  182:		BN_zero(rr);
        -:  183:		ret = 1;
    #####:  184:		goto err;
        -:  185:		}
        -:  186:
    #####:  187:	if (!BN_to_montgomery(val1[0],a_mod_m,mont,ctx)) goto err;
    #####:  188:	if (window1 > 1)
        -:  189:		{
    #####:  190:		if (!BN_mod_mul_montgomery(d,val1[0],val1[0],mont,ctx)) goto err;
        -:  191:
    #####:  192:		j=1<<(window1-1);
    #####:  193:		for (i=1; i<j; i++)
        -:  194:			{
    #####:  195:			if(((val1[i] = BN_CTX_get(ctx)) == NULL) ||
    #####:  196:					!BN_mod_mul_montgomery(val1[i],val1[i-1],
        -:  197:						d,mont,ctx))
        -:  198:				goto err;
        -:  199:			}
        -:  200:		}
        -:  201:
        -:  202:
        -:  203:	/*
        -:  204:	 * Build table for a2:   val2[i] := a2^(2*i + 1) mod m  for i = 0 .. 2^(window2-1)
        -:  205:	 */
    #####:  206:	if (a2->neg || BN_ucmp(a2,m) >= 0)
        -:  207:		{
    #####:  208:		if (!BN_mod(val2[0],a2,m,ctx))
        -:  209:			goto err;
        -:  210:		a_mod_m = val2[0];
        -:  211:		}
        -:  212:	else
        -:  213:		a_mod_m = a2;
    #####:  214:	if (BN_is_zero(a_mod_m))
        -:  215:		{
    #####:  216:		BN_zero(rr);
        -:  217:		ret = 1;
    #####:  218:		goto err;
        -:  219:		}
    #####:  220:	if (!BN_to_montgomery(val2[0],a_mod_m,mont,ctx)) goto err;
    #####:  221:	if (window2 > 1)
        -:  222:		{
    #####:  223:		if (!BN_mod_mul_montgomery(d,val2[0],val2[0],mont,ctx)) goto err;
        -:  224:
    #####:  225:		j=1<<(window2-1);
    #####:  226:		for (i=1; i<j; i++)
        -:  227:			{
    #####:  228:			if(((val2[i] = BN_CTX_get(ctx)) == NULL) ||
    #####:  229:					!BN_mod_mul_montgomery(val2[i],val2[i-1],
        -:  230:						d,mont,ctx))
        -:  231:				goto err;
        -:  232:			}
        -:  233:		}
        -:  234:
        -:  235:
        -:  236:	/* Now compute the power product, using independent windows. */
        -:  237:	r_is_one=1;
        -:  238:	wvalue1=0;  /* The 'value' of the first window */
        -:  239:	wvalue2=0;  /* The 'value' of the second window */
        -:  240:	wpos1=0;    /* If wvalue1 > 0, the bottom bit of the first window */
        -:  241:	wpos2=0;    /* If wvalue2 > 0, the bottom bit of the second window */
        -:  242:
    #####:  243:	if (!BN_to_montgomery(r,BN_value_one(),mont,ctx)) goto err;
    #####:  244:	for (b=bits-1; b>=0; b--)
        -:  245:		{
    #####:  246:		if (!r_is_one)
        -:  247:			{
    #####:  248:			if (!BN_mod_mul_montgomery(r,r,r,mont,ctx))
        -:  249:				goto err;
        -:  250:			}
        -:  251:		
    #####:  252:		if (!wvalue1)
    #####:  253:			if (BN_is_bit_set(p1, b))
        -:  254:				{
        -:  255:				/* consider bits b-window1+1 .. b for this window */
    #####:  256:				i = b-window1+1;
    #####:  257:				while (!BN_is_bit_set(p1, i)) /* works for i<0 */
    #####:  258:					i++;
        -:  259:				wpos1 = i;
        -:  260:				wvalue1 = 1;
    #####:  261:				for (i = b-1; i >= wpos1; i--)
        -:  262:					{
    #####:  263:					wvalue1 <<= 1;
    #####:  264:					if (BN_is_bit_set(p1, i))
    #####:  265:						wvalue1++;
        -:  266:					}
        -:  267:				}
        -:  268:		
    #####:  269:		if (!wvalue2)
    #####:  270:			if (BN_is_bit_set(p2, b))
        -:  271:				{
        -:  272:				/* consider bits b-window2+1 .. b for this window */
    #####:  273:				i = b-window2+1;
    #####:  274:				while (!BN_is_bit_set(p2, i))
    #####:  275:					i++;
        -:  276:				wpos2 = i;
        -:  277:				wvalue2 = 1;
    #####:  278:				for (i = b-1; i >= wpos2; i--)
        -:  279:					{
    #####:  280:					wvalue2 <<= 1;
    #####:  281:					if (BN_is_bit_set(p2, i))
    #####:  282:						wvalue2++;
        -:  283:					}
        -:  284:				}
        -:  285:
    #####:  286:		if (wvalue1 && b == wpos1)
        -:  287:			{
        -:  288:			/* wvalue1 is odd and < 2^window1 */
    #####:  289:			if (!BN_mod_mul_montgomery(r,r,val1[wvalue1>>1],mont,ctx))
        -:  290:				goto err;
        -:  291:			wvalue1 = 0;
        -:  292:			r_is_one = 0;
        -:  293:			}
        -:  294:		
    #####:  295:		if (wvalue2 && b == wpos2)
        -:  296:			{
        -:  297:			/* wvalue2 is odd and < 2^window2 */
    #####:  298:			if (!BN_mod_mul_montgomery(r,r,val2[wvalue2>>1],mont,ctx))
        -:  299:				goto err;
        -:  300:			wvalue2 = 0;
        -:  301:			r_is_one = 0;
        -:  302:			}
        -:  303:		}
    #####:  304:	if (!BN_from_montgomery(rr,r,mont,ctx))
        -:  305:		goto err;
        -:  306:	ret=1;
        -:  307:err:
    #####:  308:	if ((in_mont == NULL) && (mont != NULL)) BN_MONT_CTX_free(mont);
    #####:  309:	BN_CTX_end(ctx);
        -:  310:	bn_check_top(rr);
    #####:  311:	return(ret);
        -:  312:	}
