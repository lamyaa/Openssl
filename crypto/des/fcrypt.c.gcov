        -:    0:Source:fcrypt.c
        -:    0:Graph:fcrypt.gcno
        -:    0:Data:fcrypt.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* NOCW */
        -:    2:#include <stdio.h>
        -:    3:#ifdef _OSD_POSIX
        -:    4:#ifndef CHARSET_EBCDIC
        -:    5:#define CHARSET_EBCDIC 1
        -:    6:#endif
        -:    7:#endif
        -:    8:#ifdef CHARSET_EBCDIC
        -:    9:#include <openssl/ebcdic.h>
        -:   10:#endif
        -:   11:
        -:   12:/* This version of crypt has been developed from my MIT compatible
        -:   13: * DES library.
        -:   14: * Eric Young (eay@cryptsoft.com)
        -:   15: */
        -:   16:
        -:   17:/* Modification by Jens Kupferschmidt (Cu)
        -:   18: * I have included directive PARA for shared memory computers.
        -:   19: * I have included a directive LONGCRYPT to using this routine to cipher
        -:   20: * passwords with more then 8 bytes like HP-UX 10.x it used. The MAXPLEN
        -:   21: * definition is the maximum of length of password and can changed. I have
        -:   22: * defined 24.
        -:   23: */
        -:   24:
        -:   25:#include "des_locl.h"
        -:   26:
        -:   27:/* Added more values to handle illegal salt values the way normal
        -:   28: * crypt() implementations do.  The patch was sent by 
        -:   29: * Bjorn Gronvall <bg@sics.se>
        -:   30: */
        -:   31:static unsigned const char con_salt[128]={
        -:   32:0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,
        -:   33:0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,0xE0,0xE1,
        -:   34:0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,
        -:   35:0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,
        -:   36:0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,
        -:   37:0xFA,0xFB,0xFC,0xFD,0xFE,0xFF,0x00,0x01,
        -:   38:0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
        -:   39:0x0A,0x0B,0x05,0x06,0x07,0x08,0x09,0x0A,
        -:   40:0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,
        -:   41:0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,
        -:   42:0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,
        -:   43:0x23,0x24,0x25,0x20,0x21,0x22,0x23,0x24,
        -:   44:0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,
        -:   45:0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,
        -:   46:0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,
        -:   47:0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,
        -:   48:};
        -:   49:
        -:   50:static unsigned const char cov_2char[64]={
        -:   51:0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,
        -:   52:0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,
        -:   53:0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,
        -:   54:0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53,0x54,
        -:   55:0x55,0x56,0x57,0x58,0x59,0x5A,0x61,0x62,
        -:   56:0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,
        -:   57:0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,
        -:   58:0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A
        -:   59:};
        -:   60:
    #####:   61:char *DES_crypt(const char *buf, const char *salt)
        -:   62:	{
        -:   63:	static char buff[14];
        -:   64:
        -:   65:#ifndef CHARSET_EBCDIC
    #####:   66:	return(DES_fcrypt(buf,salt,buff));
        -:   67:#else
        -:   68:	char e_salt[2+1];
        -:   69:	char e_buf[32+1];	/* replace 32 by 8 ? */
        -:   70:	char *ret;
        -:   71:
        -:   72:	/* Copy at most 2 chars of salt */
        -:   73:	if ((e_salt[0] = salt[0]) != '\0')
        -:   74:	    e_salt[1] = salt[1];
        -:   75:
        -:   76:	/* Copy at most 32 chars of password */
        -:   77:	strncpy (e_buf, buf, sizeof(e_buf));
        -:   78:
        -:   79:	/* Make sure we have a delimiter */
        -:   80:	e_salt[sizeof(e_salt)-1] = e_buf[sizeof(e_buf)-1] = '\0';
        -:   81:
        -:   82:	/* Convert the e_salt to ASCII, as that's what DES_fcrypt works on */
        -:   83:	ebcdic2ascii(e_salt, e_salt, sizeof e_salt);
        -:   84:
        -:   85:	/* Convert the cleartext password to ASCII */
        -:   86:	ebcdic2ascii(e_buf, e_buf, sizeof e_buf);
        -:   87:
        -:   88:	/* Encrypt it (from/to ASCII) */
        -:   89:	ret = DES_fcrypt(e_buf,e_salt,buff);
        -:   90:
        -:   91:	/* Convert the result back to EBCDIC */
        -:   92:	ascii2ebcdic(ret, ret, strlen(ret));
        -:   93:	
        -:   94:	return ret;
        -:   95:#endif
        -:   96:	}
        -:   97:
        -:   98:
    #####:   99:char *DES_fcrypt(const char *buf, const char *salt, char *ret)
        -:  100:	{
        -:  101:	unsigned int i,j,x,y;
        -:  102:	DES_LONG Eswap0,Eswap1;
        -:  103:	DES_LONG out[2],ll;
        -:  104:	DES_cblock key;
        -:  105:	DES_key_schedule ks;
        -:  106:	unsigned char bb[9];
        -:  107:	unsigned char *b=bb;
        -:  108:	unsigned char c,u;
        -:  109:
        -:  110:	/* eay 25/08/92
        -:  111:	 * If you call crypt("pwd","*") as often happens when you
        -:  112:	 * have * as the pwd field in /etc/passwd, the function
        -:  113:	 * returns *\0XXXXXXXXX
        -:  114:	 * The \0 makes the string look like * so the pwd "*" would
        -:  115:	 * crypt to "*".  This was found when replacing the crypt in
        -:  116:	 * our shared libraries.  People found that the disabled
        -:  117:	 * accounts effectively had no passwd :-(. */
        -:  118:#ifndef CHARSET_EBCDIC
    #####:  119:	x=ret[0]=((salt[0] == '\0')?'A':salt[0]);
    #####:  120:	Eswap0=con_salt[x]<<2;
    #####:  121:	x=ret[1]=((salt[1] == '\0')?'A':salt[1]);
    #####:  122:	Eswap1=con_salt[x]<<6;
        -:  123:#else
        -:  124:	x=ret[0]=((salt[0] == '\0')?os_toascii['A']:salt[0]);
        -:  125:	Eswap0=con_salt[x]<<2;
        -:  126:	x=ret[1]=((salt[1] == '\0')?os_toascii['A']:salt[1]);
        -:  127:	Eswap1=con_salt[x]<<6;
        -:  128:#endif
        -:  129:
        -:  130:/* EAY
        -:  131:r=strlen(buf);
        -:  132:r=(r+7)/8;
        -:  133:*/
    #####:  134:	for (i=0; i<8; i++)
        -:  135:		{
    #####:  136:		c= *(buf++);
    #####:  137:		if (!c) break;
    #####:  138:		key[i]=(c<<1);
        -:  139:		}
    #####:  140:	for (; i<8; i++)
    #####:  141:		key[i]=0;
        -:  142:
    #####:  143:	DES_set_key_unchecked(&key,&ks);
    #####:  144:	fcrypt_body(&(out[0]),&ks,Eswap0,Eswap1);
        -:  145:
    #####:  146:	ll=out[0]; l2c(ll,b);
    #####:  147:	ll=out[1]; l2c(ll,b);
        -:  148:	y=0;
        -:  149:	u=0x80;
    #####:  150:	bb[8]=0;
    #####:  151:	for (i=2; i<13; i++)
        -:  152:		{
        -:  153:		c=0;
    #####:  154:		for (j=0; j<6; j++)
        -:  155:			{
    #####:  156:			c<<=1;
    #####:  157:			if (bb[y] & u) c|=1;
    #####:  158:			u>>=1;
    #####:  159:			if (!u)
        -:  160:				{
    #####:  161:				y++;
        -:  162:				u=0x80;
        -:  163:				}
        -:  164:			}
    #####:  165:		ret[i]=cov_2char[c];
        -:  166:		}
    #####:  167:	ret[13]='\0';
    #####:  168:	return(ret);
        -:  169:	}
        -:  170:
