        -:    0:Source:b_dump.c
        -:    0:Graph:b_dump.gcno
        -:    0:Data:b_dump.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/bio/b_dump.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:/* 
        -:   60: * Stolen from tjh's ssl/ssl_trc.c stuff.
        -:   61: */
        -:   62:
        -:   63:#include <stdio.h>
        -:   64:#include "cryptlib.h"
        -:   65:#include "bio_lcl.h"
        -:   66:
        -:   67:#define TRUNCATE
        -:   68:#define DUMP_WIDTH	16
        -:   69:#define DUMP_WIDTH_LESS_INDENT(i) (DUMP_WIDTH-((i-(i>6?6:i)+3)/4))
        -:   70:
    #####:   71:int BIO_dump_cb(int (*cb)(const void *data, size_t len, void *u),
        -:   72:	void *u, const char *s, int len)
        -:   73:	{
    #####:   74:	return BIO_dump_indent_cb(cb, u, s, len, 0);
        -:   75:	}
        -:   76:
    10000:   77:int BIO_dump_indent_cb(int (*cb)(const void *data, size_t len, void *u),
        -:   78:	void *u, const char *s, int len, int indent)
        -:   79:	{
        -:   80:	int ret=0;
        -:   81:	char buf[288+1],tmp[20],str[128+1];
        -:   82:	int i,j,rows,trc;
        -:   83:	unsigned char ch;
        -:   84:	int dump_width;
        -:   85:
        -:   86:	trc=0;
        -:   87:
        -:   88:#ifdef TRUNCATE
    10064:   89:	for(; (len > 0) && ((s[len-1] == ' ') || (s[len-1] == '\0')); len--)
       64:   90:		trc++;
        -:   91:#endif
        -:   92:
    10000:   93:	if (indent < 0)
        -:   94:		indent = 0;
    10000:   95:	if (indent)
        -:   96:		{
    10000:   97:		if (indent > 128) indent=128;
    10000:   98:		memset(str,' ',indent);
        -:   99:		}
    10000:  100:	str[indent]='\0';
        -:  101:
    10000:  102:	dump_width=DUMP_WIDTH_LESS_INDENT(indent);
    10000:  103:	rows=(len/dump_width);
    10000:  104:	if ((rows*dump_width)<len)
       63:  105:		rows++;
   110000:  106:	for(i=0;i<rows;i++)
        -:  107:		{
   100000:  108:		buf[0]='\0';	/* start with empty string */
   100000:  109:		BUF_strlcpy(buf,str,sizeof buf);
   100000:  110:		BIO_snprintf(tmp,sizeof tmp,"%04x - ",i*dump_width);
   100000:  111:		BUF_strlcat(buf,tmp,sizeof buf);
  1700000:  112:		for(j=0;j<dump_width;j++)
        -:  113:			{
  1600000:  114:			if (((i*dump_width)+j)>=len)
        -:  115:				{
       64:  116:				BUF_strlcat(buf,"   ",sizeof buf);
        -:  117:				}
        -:  118:			else
        -:  119:				{
  1599936:  120:				ch=((unsigned char)*(s+i*dump_width+j)) & 0xff;
  1599936:  121:				BIO_snprintf(tmp,sizeof tmp,"%02x%c",ch,
        -:  122:					j==7?'-':' ');
  1599936:  123:				BUF_strlcat(buf,tmp,sizeof buf);
        -:  124:				}
        -:  125:			}
   100000:  126:		BUF_strlcat(buf,"  ",sizeof buf);
  1699936:  127:		for(j=0;j<dump_width;j++)
        -:  128:			{
  1599999:  129:			if (((i*dump_width)+j)>=len)
        -:  130:				break;
  1599936:  131:			ch=((unsigned char)*(s+i*dump_width+j)) & 0xff;
        -:  132:#ifndef CHARSET_EBCDIC
  1599936:  133:			BIO_snprintf(tmp,sizeof tmp,"%c",
  1599936:  134:				((ch>=' ')&&(ch<='~'))?ch:'.');
        -:  135:#else
        -:  136:			BIO_snprintf(tmp,sizeof tmp,"%c",
        -:  137:				((ch>=os_toascii[' '])&&(ch<=os_toascii['~']))
        -:  138:				? os_toebcdic[ch]
        -:  139:				: '.');
        -:  140:#endif
  1599936:  141:			BUF_strlcat(buf,tmp,sizeof buf);
        -:  142:			}
   100000:  143:		BUF_strlcat(buf,"\n",sizeof buf);
        -:  144:		/* if this is the last call then update the ddt_dump thing so
        -:  145:		 * that we will move the selection point in the debug window
        -:  146:		 */
   100000:  147:		ret+=cb((void *)buf,strlen(buf),u);
        -:  148:		}
        -:  149:#ifdef TRUNCATE
    10000:  150:	if (trc > 0)
        -:  151:		{
       63:  152:		BIO_snprintf(buf,sizeof buf,"%s%04x - <SPACES/NULS>\n",str,
        -:  153:			len+trc);
       63:  154:		ret+=cb((void *)buf,strlen(buf),u);
        -:  155:		}
        -:  156:#endif
    10000:  157:	return(ret);
        -:  158:	}
        -:  159:
        -:  160:#ifndef OPENSSL_NO_FP_API
    #####:  161:static int write_fp(const void *data, size_t len, void *fp)
        -:  162:	{
    #####:  163:	return UP_fwrite(data, len, 1, fp);
        -:  164:	}
    #####:  165:int BIO_dump_fp(FILE *fp, const char *s, int len)
        -:  166:	{
    #####:  167:	return BIO_dump_cb(write_fp, fp, s, len);
        -:  168:	}
    #####:  169:int BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent)
        -:  170:	{
    #####:  171:	return BIO_dump_indent_cb(write_fp, fp, s, len, indent);
        -:  172:	}
        -:  173:#endif
        -:  174:
   100063:  175:static int write_bio(const void *data, size_t len, void *bp)
        -:  176:	{
   100063:  177:	return BIO_write((BIO *)bp, (const char *)data, len);
        -:  178:	}
    #####:  179:int BIO_dump(BIO *bp, const char *s, int len)
        -:  180:	{
    #####:  181:	return BIO_dump_cb(write_bio, bp, s, len);
        -:  182:	}
    10000:  183:int BIO_dump_indent(BIO *bp, const char *s, int len, int indent)
        -:  184:	{
    10000:  185:	return BIO_dump_indent_cb(write_bio, bp, s, len, indent);
        -:  186:	}
        -:  187:
