        -:    0:Source:bss_fd.c
        -:    0:Graph:bss_fd.gcno
        -:    0:Data:bss_fd.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/bio/bss_fd.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include <errno.h>
        -:   61:#define USE_SOCKETS
        -:   62:#include "cryptlib.h"
        -:   63:
        -:   64:#if defined(OPENSSL_NO_POSIX_IO)
        -:   65:/*
        -:   66: * One can argue that one should implement dummy placeholder for
        -:   67: * BIO_s_fd here...
        -:   68: */
        -:   69:#else
        -:   70:/*
        -:   71: * As for unconditional usage of "UPLINK" interface in this module.
        -:   72: * Trouble is that unlike Unix file descriptors [which are indexes
        -:   73: * in kernel-side per-process table], corresponding descriptors on
        -:   74: * platforms which require "UPLINK" interface seem to be indexes
        -:   75: * in a user-land, non-global table. Well, in fact they are indexes
        -:   76: * in stdio _iob[], and recall that _iob[] was the very reason why
        -:   77: * "UPLINK" interface was introduced in first place. But one way on
        -:   78: * another. Neither libcrypto or libssl use this BIO meaning that
        -:   79: * file descriptors can only be provided by application. Therefore
        -:   80: * "UPLINK" calls are due...
        -:   81: */
        -:   82:#include "bio_lcl.h"
        -:   83:
        -:   84:static int fd_write(BIO *h, const char *buf, int num);
        -:   85:static int fd_read(BIO *h, char *buf, int size);
        -:   86:static int fd_puts(BIO *h, const char *str);
        -:   87:static int fd_gets(BIO *h, char *buf, int size);
        -:   88:static long fd_ctrl(BIO *h, int cmd, long arg1, void *arg2);
        -:   89:static int fd_new(BIO *h);
        -:   90:static int fd_free(BIO *data);
        -:   91:int BIO_fd_should_retry(int s);
        -:   92:
        -:   93:static BIO_METHOD methods_fdp=
        -:   94:	{
        -:   95:	BIO_TYPE_FD,"file descriptor",
        -:   96:	fd_write,
        -:   97:	fd_read,
        -:   98:	fd_puts,
        -:   99:	fd_gets,
        -:  100:	fd_ctrl,
        -:  101:	fd_new,
        -:  102:	fd_free,
        -:  103:	NULL,
        -:  104:	};
        -:  105:
    #####:  106:BIO_METHOD *BIO_s_fd(void)
        -:  107:	{
    #####:  108:	return(&methods_fdp);
        -:  109:	}
        -:  110:
    #####:  111:BIO *BIO_new_fd(int fd,int close_flag)
        -:  112:	{
        -:  113:	BIO *ret;
    #####:  114:	ret=BIO_new(BIO_s_fd());
    #####:  115:	if (ret == NULL) return(NULL);
    #####:  116:	BIO_set_fd(ret,fd,close_flag);
    #####:  117:	return(ret);
        -:  118:	}
        -:  119:
    #####:  120:static int fd_new(BIO *bi)
        -:  121:	{
    #####:  122:	bi->init=0;
    #####:  123:	bi->num=-1;
    #####:  124:	bi->ptr=NULL;
    #####:  125:	bi->flags=BIO_FLAGS_UPLINK; /* essentially redundant */
    #####:  126:	return(1);
        -:  127:	}
        -:  128:
    #####:  129:static int fd_free(BIO *a)
        -:  130:	{
    #####:  131:	if (a == NULL) return(0);
    #####:  132:	if (a->shutdown)
        -:  133:		{
    #####:  134:		if (a->init)
        -:  135:			{
    #####:  136:			UP_close(a->num);
        -:  137:			}
    #####:  138:		a->init=0;
    #####:  139:		a->flags=BIO_FLAGS_UPLINK;
        -:  140:		}
        -:  141:	return(1);
        -:  142:	}
        -:  143:	
    #####:  144:static int fd_read(BIO *b, char *out,int outl)
        -:  145:	{
        -:  146:	int ret=0;
        -:  147:
    #####:  148:	if (out != NULL)
        -:  149:		{
    #####:  150:		clear_sys_error();
    #####:  151:		ret=UP_read(b->num,out,outl);
    #####:  152:		BIO_clear_retry_flags(b);
    #####:  153:		if (ret <= 0)
        -:  154:			{
    #####:  155:			if (BIO_fd_should_retry(ret))
    #####:  156:				BIO_set_retry_read(b);
        -:  157:			}
        -:  158:		}
    #####:  159:	return(ret);
        -:  160:	}
        -:  161:
    #####:  162:static int fd_write(BIO *b, const char *in, int inl)
        -:  163:	{
        -:  164:	int ret;
    #####:  165:	clear_sys_error();
    #####:  166:	ret=UP_write(b->num,in,inl);
    #####:  167:	BIO_clear_retry_flags(b);
    #####:  168:	if (ret <= 0)
        -:  169:		{
    #####:  170:		if (BIO_fd_should_retry(ret))
    #####:  171:			BIO_set_retry_write(b);
        -:  172:		}
    #####:  173:	return(ret);
        -:  174:	}
        -:  175:
    #####:  176:static long fd_ctrl(BIO *b, int cmd, long num, void *ptr)
        -:  177:	{
        -:  178:	long ret=1;
        -:  179:	int *ip;
        -:  180:
    #####:  181:	switch (cmd)
        -:  182:		{
        -:  183:	case BIO_CTRL_RESET:
        -:  184:		num=0;
        -:  185:	case BIO_C_FILE_SEEK:
    #####:  186:		ret=(long)UP_lseek(b->num,num,0);
    #####:  187:		break;
        -:  188:	case BIO_C_FILE_TELL:
        -:  189:	case BIO_CTRL_INFO:
    #####:  190:		ret=(long)UP_lseek(b->num,0,1);
    #####:  191:		break;
        -:  192:	case BIO_C_SET_FD:
    #####:  193:		fd_free(b);
    #####:  194:		b->num= *((int *)ptr);
    #####:  195:		b->shutdown=(int)num;
    #####:  196:		b->init=1;
    #####:  197:		break;
        -:  198:	case BIO_C_GET_FD:
    #####:  199:		if (b->init)
        -:  200:			{
        -:  201:			ip=(int *)ptr;
    #####:  202:			if (ip != NULL) *ip=b->num;
    #####:  203:			ret=b->num;
        -:  204:			}
        -:  205:		else
        -:  206:			ret= -1;
        -:  207:		break;
        -:  208:	case BIO_CTRL_GET_CLOSE:
    #####:  209:		ret=b->shutdown;
    #####:  210:		break;
        -:  211:	case BIO_CTRL_SET_CLOSE:
    #####:  212:		b->shutdown=(int)num;
    #####:  213:		break;
        -:  214:	case BIO_CTRL_PENDING:
        -:  215:	case BIO_CTRL_WPENDING:
        -:  216:		ret=0;
        -:  217:		break;
        -:  218:	case BIO_CTRL_DUP:
        -:  219:	case BIO_CTRL_FLUSH:
        -:  220:		ret=1;
    #####:  221:		break;
        -:  222:	default:
        -:  223:		ret=0;
        -:  224:		break;
        -:  225:		}
    #####:  226:	return(ret);
        -:  227:	}
        -:  228:
    #####:  229:static int fd_puts(BIO *bp, const char *str)
        -:  230:	{
        -:  231:	int n,ret;
        -:  232:
    #####:  233:	n=strlen(str);
    #####:  234:	ret=fd_write(bp,str,n);
    #####:  235:	return(ret);
        -:  236:	}
        -:  237:
    #####:  238:static int fd_gets(BIO *bp, char *buf, int size)
        -:  239:        {
        -:  240:	int ret=0;
        -:  241:	char *ptr=buf;
    #####:  242:	char *end=buf+size-1;
        -:  243:
    #####:  244:	while ( (ptr < end) && (fd_read(bp, ptr, 1) > 0) && (ptr[0] != '\n') )
    #####:  245:		ptr++;
        -:  246:
    #####:  247:	ptr[0]='\0';
        -:  248:
    #####:  249:	if (buf[0] != '\0')
    #####:  250:		ret=strlen(buf);
    #####:  251:	return(ret);
        -:  252:        }
        -:  253:
    #####:  254:int BIO_fd_should_retry(int i)
        -:  255:	{
        -:  256:	int err;
        -:  257:
    #####:  258:	if ((i == 0) || (i == -1))
        -:  259:		{
    #####:  260:		err=get_last_sys_error();
        -:  261:
        -:  262:#if defined(OPENSSL_SYS_WINDOWS) && 0 /* more microsoft stupidity? perhaps not? Ben 4/1/99 */
        -:  263:		if ((i == -1) && (err == 0))
        -:  264:			return(1);
        -:  265:#endif
        -:  266:
    #####:  267:		return(BIO_fd_non_fatal_error(err));
        -:  268:		}
        -:  269:	return(0);
        -:  270:	}
        -:  271:
    #####:  272:int BIO_fd_non_fatal_error(int err)
        -:  273:	{
    #####:  274:	switch (err)
        -:  275:		{
        -:  276:
        -:  277:#ifdef EWOULDBLOCK
        -:  278:# ifdef WSAEWOULDBLOCK
        -:  279:#  if WSAEWOULDBLOCK != EWOULDBLOCK
        -:  280:	case EWOULDBLOCK:
        -:  281:#  endif
        -:  282:# else
        -:  283:	case EWOULDBLOCK:
        -:  284:# endif
        -:  285:#endif
        -:  286:
        -:  287:#if defined(ENOTCONN)
        -:  288:	case ENOTCONN:
        -:  289:#endif
        -:  290:
        -:  291:#ifdef EINTR
        -:  292:	case EINTR:
        -:  293:#endif
        -:  294:
        -:  295:#ifdef EAGAIN
        -:  296:#if EWOULDBLOCK != EAGAIN
        -:  297:	case EAGAIN:
        -:  298:# endif
        -:  299:#endif
        -:  300:
        -:  301:#ifdef EPROTO
        -:  302:	case EPROTO:
        -:  303:#endif
        -:  304:
        -:  305:#ifdef EINPROGRESS
        -:  306:	case EINPROGRESS:
        -:  307:#endif
        -:  308:
        -:  309:#ifdef EALREADY
        -:  310:	case EALREADY:
        -:  311:#endif
        -:  312:		return(1);
        -:  313:		/* break; */
        -:  314:	default:
        -:  315:		break;
        -:  316:		}
    #####:  317:	return(0);
        -:  318:	}
        -:  319:#endif
