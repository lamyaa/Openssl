        -:    0:Source:ts_verify_ctx.c
        -:    0:Graph:ts_verify_ctx.gcno
        -:    0:Data:ts_verify_ctx.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/ts/ts_verify_ctx.c */
        -:    2:/* Written by Zoltan Glozik (zglozik@stones.com) for the OpenSSL
        -:    3: * project 2003.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include "cryptlib.h"
        -:   60:#include <openssl/objects.h>
        -:   61:#include <openssl/ts.h>
        -:   62:
    #####:   63:TS_VERIFY_CTX *TS_VERIFY_CTX_new(void)
        -:   64:	{
    #####:   65:	TS_VERIFY_CTX *ctx = 
        -:   66:		(TS_VERIFY_CTX *) OPENSSL_malloc(sizeof(TS_VERIFY_CTX));
    #####:   67:	if (ctx)
        -:   68:		memset(ctx, 0, sizeof(TS_VERIFY_CTX));
        -:   69:	else
    #####:   70:		TSerr(TS_F_TS_VERIFY_CTX_NEW, ERR_R_MALLOC_FAILURE);
    #####:   71:	return ctx;
        -:   72:	}
        -:   73:
    #####:   74:void TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx)
        -:   75:	{
    #####:   76:	OPENSSL_assert(ctx != NULL);
        -:   77:	memset(ctx, 0, sizeof(TS_VERIFY_CTX));
    #####:   78:	}
        -:   79:
    #####:   80:void TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)
        -:   81:	{
    #####:   82:	if (!ctx) return;
        -:   83:
    #####:   84:	TS_VERIFY_CTX_cleanup(ctx);
    #####:   85:	OPENSSL_free(ctx);
        -:   86:	}
        -:   87:
    #####:   88:void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)
        -:   89:	{
    #####:   90:	if (!ctx) return;
        -:   91:
    #####:   92:	X509_STORE_free(ctx->store);
    #####:   93:	sk_X509_pop_free(ctx->certs, X509_free);
        -:   94:
    #####:   95:	ASN1_OBJECT_free(ctx->policy);
        -:   96:
    #####:   97:	X509_ALGOR_free(ctx->md_alg);
    #####:   98:	OPENSSL_free(ctx->imprint);
        -:   99:	
    #####:  100:	BIO_free_all(ctx->data);
        -:  101:
    #####:  102:	ASN1_INTEGER_free(ctx->nonce);
        -:  103:
    #####:  104:	GENERAL_NAME_free(ctx->tsa_name);
        -:  105:
    #####:  106:	TS_VERIFY_CTX_init(ctx);
        -:  107:	}
        -:  108:
    #####:  109:TS_VERIFY_CTX *TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx)
        -:  110:	{
        -:  111:	TS_VERIFY_CTX *ret = ctx;
        -:  112:	ASN1_OBJECT *policy;
        -:  113:	TS_MSG_IMPRINT *imprint;
        -:  114:	X509_ALGOR *md_alg;
        -:  115:	ASN1_OCTET_STRING *msg;
        -:  116:	const ASN1_INTEGER *nonce;
        -:  117:
    #####:  118:	OPENSSL_assert(req != NULL);
    #####:  119:	if (ret)
    #####:  120:		TS_VERIFY_CTX_cleanup(ret);
        -:  121:	else
    #####:  122:		if (!(ret = TS_VERIFY_CTX_new())) return NULL;
        -:  123:
        -:  124:	/* Setting flags. */
    #####:  125:	ret->flags = TS_VFY_ALL_IMPRINT & ~(TS_VFY_TSA_NAME | TS_VFY_SIGNATURE);
        -:  126:
        -:  127:	/* Setting policy. */
    #####:  128:	if ((policy = TS_REQ_get_policy_id(req)) != NULL)
        -:  129:		{
    #####:  130:		if (!(ret->policy = OBJ_dup(policy))) goto err;
        -:  131:		}
        -:  132:	else
    #####:  133:		ret->flags &= ~TS_VFY_POLICY;
        -:  134:
        -:  135:	/* Setting md_alg, imprint and imprint_len. */
    #####:  136:	imprint = TS_REQ_get_msg_imprint(req);
    #####:  137:	md_alg = TS_MSG_IMPRINT_get_algo(imprint);
    #####:  138:	if (!(ret->md_alg = X509_ALGOR_dup(md_alg))) goto err;
    #####:  139:	msg = TS_MSG_IMPRINT_get_msg(imprint);
    #####:  140:	ret->imprint_len = ASN1_STRING_length(msg);
    #####:  141:	if (!(ret->imprint = OPENSSL_malloc(ret->imprint_len))) goto err;
    #####:  142:	memcpy(ret->imprint, ASN1_STRING_data(msg), ret->imprint_len);
        -:  143:
        -:  144:	/* Setting nonce. */
    #####:  145:	if ((nonce = TS_REQ_get_nonce(req)) != NULL)
        -:  146:		{
    #####:  147:		if (!(ret->nonce = ASN1_INTEGER_dup(nonce))) goto err;
        -:  148:		}
        -:  149:	else
    #####:  150:		ret->flags &= ~TS_VFY_NONCE;
        -:  151:
    #####:  152:	return ret;
        -:  153: err:
    #####:  154:	if (ctx)
    #####:  155:		TS_VERIFY_CTX_cleanup(ctx);
        -:  156:	else
    #####:  157:		TS_VERIFY_CTX_free(ret);
        -:  158:	return NULL;
        -:  159:	}
