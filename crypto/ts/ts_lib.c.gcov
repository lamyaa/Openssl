        -:    0:Source:ts_lib.c
        -:    0:Graph:ts_lib.gcno
        -:    0:Data:ts_lib.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/ts/ts_lib.c */
        -:    2:/* Written by Zoltan Glozik (zglozik@stones.com) for the OpenSSL
        -:    3: * project 2002.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/objects.h>
        -:   62:#include <openssl/bn.h>
        -:   63:#include <openssl/x509v3.h>
        -:   64:#include "ts.h"
        -:   65:
        -:   66:/* Local function declarations. */
        -:   67:
        -:   68:/* Function definitions. */
        -:   69:
    #####:   70:int TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)
        -:   71:	{
        -:   72:	BIGNUM num_bn;
        -:   73:	int result = 0;
        -:   74:	char *hex;
        -:   75:
    #####:   76:	BN_init(&num_bn);
    #####:   77:	ASN1_INTEGER_to_BN(num, &num_bn);
    #####:   78:	if ((hex = BN_bn2hex(&num_bn))) 
        -:   79:		{
    #####:   80:		result = BIO_write(bio, "0x", 2) > 0;
    #####:   81:		result = result && BIO_write(bio, hex, strlen(hex)) > 0;
    #####:   82:		OPENSSL_free(hex);
        -:   83:		}
    #####:   84:	BN_free(&num_bn);
        -:   85:
    #####:   86:	return result;
        -:   87:	}
        -:   88:
    #####:   89:int TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)
        -:   90:	{
        -:   91:	char obj_txt[128];
        -:   92:
    #####:   93:	int len = OBJ_obj2txt(obj_txt, sizeof(obj_txt), obj, 0);
    #####:   94:	BIO_write(bio, obj_txt, len);
    #####:   95:	BIO_write(bio, "\n", 1);
        -:   96:
    #####:   97:	return 1;
        -:   98:	}
        -:   99:
    #####:  100:int TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)
        -:  101:	{
        -:  102:	int i, critical, n;
        -:  103:	X509_EXTENSION *ex;
        -:  104:	ASN1_OBJECT *obj;
        -:  105:
    #####:  106:	BIO_printf(bio, "Extensions:\n");
    #####:  107:	n = X509v3_get_ext_count(extensions);
    #####:  108:	for (i = 0; i < n; i++)
        -:  109:		{
    #####:  110:		ex = X509v3_get_ext(extensions, i);
    #####:  111:		obj = X509_EXTENSION_get_object(ex);
    #####:  112:		i2a_ASN1_OBJECT(bio, obj);
    #####:  113:		critical = X509_EXTENSION_get_critical(ex);
    #####:  114:		BIO_printf(bio, ": %s\n", critical ? "critical" : "");
    #####:  115:		if (!X509V3_EXT_print(bio, ex, 0, 4))
        -:  116:			{
    #####:  117:			BIO_printf(bio, "%4s", "");
    #####:  118:			M_ASN1_OCTET_STRING_print(bio, ex->value);
        -:  119:			}
    #####:  120:		BIO_write(bio, "\n", 1);
        -:  121:		}
        -:  122:
    #####:  123:	return 1;
        -:  124:	}
        -:  125:
    #####:  126:int TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg)
        -:  127:	{
    #####:  128:	int i = OBJ_obj2nid(alg->algorithm);
    #####:  129:	return BIO_printf(bio, "Hash Algorithm: %s\n",
        -:  130:		(i == NID_undef) ? "UNKNOWN" : OBJ_nid2ln(i));
        -:  131:	}
        -:  132:
    #####:  133:int TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *a)
        -:  134:	{
        -:  135:	const ASN1_OCTET_STRING *msg;
        -:  136:
    #####:  137:	TS_X509_ALGOR_print_bio(bio, TS_MSG_IMPRINT_get_algo(a));
        -:  138:
    #####:  139:	BIO_printf(bio, "Message data:\n");
    #####:  140:	msg = TS_MSG_IMPRINT_get_msg(a);
    #####:  141:	BIO_dump_indent(bio, (const char *)M_ASN1_STRING_data(msg), 
        -:  142:			M_ASN1_STRING_length(msg), 4);
        -:  143:
    #####:  144:	return 1;
        -:  145:	}
