        -:    0:Source:ts_req_utils.c
        -:    0:Graph:ts_req_utils.gcno
        -:    0:Data:ts_req_utils.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/ts/ts_req_utils.c */
        -:    2:/* Written by Zoltan Glozik (zglozik@stones.com) for the OpenSSL
        -:    3: * project 2002.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/objects.h>
        -:   62:#include <openssl/x509v3.h>
        -:   63:#include <openssl/ts.h>
        -:   64:
    #####:   65:int TS_REQ_set_version(TS_REQ *a, long version)
        -:   66:	{
    #####:   67:	return ASN1_INTEGER_set(a->version, version);
        -:   68:	}
        -:   69:
    #####:   70:long TS_REQ_get_version(const TS_REQ *a)
        -:   71:	{
    #####:   72:	return ASN1_INTEGER_get(a->version);
        -:   73:	}
        -:   74:
    #####:   75:int TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)
        -:   76:	{
        -:   77:	TS_MSG_IMPRINT *new_msg_imprint;
        -:   78:
    #####:   79:	if (a->msg_imprint == msg_imprint)
        -:   80:		return 1;
    #####:   81:	new_msg_imprint = TS_MSG_IMPRINT_dup(msg_imprint);
    #####:   82:	if (new_msg_imprint == NULL)
        -:   83:		{
    #####:   84:		TSerr(TS_F_TS_REQ_SET_MSG_IMPRINT, ERR_R_MALLOC_FAILURE);
    #####:   85:		return 0;
        -:   86:		}
    #####:   87:	TS_MSG_IMPRINT_free(a->msg_imprint);
    #####:   88:	a->msg_imprint = new_msg_imprint;
    #####:   89:	return 1;
        -:   90:	}
        -:   91:
    #####:   92:TS_MSG_IMPRINT *TS_REQ_get_msg_imprint(TS_REQ *a)
        -:   93:	{
    #####:   94:	return a->msg_imprint;
        -:   95:	}
        -:   96:
    #####:   97:int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)
        -:   98:	{
        -:   99:	X509_ALGOR *new_alg;
        -:  100:
    #####:  101:	if (a->hash_algo == alg)
        -:  102:		return 1;
    #####:  103:	new_alg = X509_ALGOR_dup(alg);
    #####:  104:	if (new_alg == NULL)
        -:  105:		{
    #####:  106:		TSerr(TS_F_TS_MSG_IMPRINT_SET_ALGO, ERR_R_MALLOC_FAILURE);
    #####:  107:		return 0;
        -:  108:		}
    #####:  109:	X509_ALGOR_free(a->hash_algo);
    #####:  110:	a->hash_algo = new_alg;
    #####:  111:	return 1;
        -:  112:	}
        -:  113:
    #####:  114:X509_ALGOR *TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a)
        -:  115:	{
    #####:  116:	return a->hash_algo;
        -:  117:	}
        -:  118:
    #####:  119:int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len)
        -:  120:	{
    #####:  121:	return ASN1_OCTET_STRING_set(a->hashed_msg, d, len);
        -:  122:	}
        -:  123:
    #####:  124:ASN1_OCTET_STRING *TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a)
        -:  125:	{
    #####:  126:	return a->hashed_msg;
        -:  127:	}
        -:  128:
    #####:  129:int TS_REQ_set_policy_id(TS_REQ *a, ASN1_OBJECT *policy)
        -:  130:	{
        -:  131:	ASN1_OBJECT *new_policy;
        -:  132:
    #####:  133:	if (a->policy_id == policy)
        -:  134:		return 1;
    #####:  135:	new_policy = OBJ_dup(policy);
    #####:  136:	if (new_policy == NULL)
        -:  137:		{
    #####:  138:		TSerr(TS_F_TS_REQ_SET_POLICY_ID, ERR_R_MALLOC_FAILURE);
    #####:  139:		return 0;
        -:  140:		}
    #####:  141:	ASN1_OBJECT_free(a->policy_id);
    #####:  142:	a->policy_id = new_policy;
    #####:  143:	return 1;
        -:  144:	}
        -:  145:
    #####:  146:ASN1_OBJECT *TS_REQ_get_policy_id(TS_REQ *a)
        -:  147:	{
    #####:  148:	return a->policy_id;
        -:  149:	}
        -:  150:
    #####:  151:int TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)
        -:  152:	{
        -:  153:	ASN1_INTEGER *new_nonce;
        -:  154:
    #####:  155:	if (a->nonce == nonce)
        -:  156:		return 1;
    #####:  157:	new_nonce = ASN1_INTEGER_dup(nonce);
    #####:  158:	if (new_nonce == NULL)
        -:  159:		{
    #####:  160:		TSerr(TS_F_TS_REQ_SET_NONCE, ERR_R_MALLOC_FAILURE);
    #####:  161:		return 0;
        -:  162:		}
    #####:  163:	ASN1_INTEGER_free(a->nonce);
    #####:  164:	a->nonce = new_nonce;
    #####:  165:	return 1;
        -:  166:	}
        -:  167:
    #####:  168:const ASN1_INTEGER *TS_REQ_get_nonce(const TS_REQ *a)
        -:  169:	{
    #####:  170:	return a->nonce;
        -:  171:	}
        -:  172:
    #####:  173:int TS_REQ_set_cert_req(TS_REQ *a, int cert_req)
        -:  174:	{
    #####:  175:	a->cert_req = cert_req ? 0xFF : 0x00;
    #####:  176:	return 1;
        -:  177:	}
        -:  178:
    #####:  179:int TS_REQ_get_cert_req(const TS_REQ *a)
        -:  180:	{
    #####:  181:	return a->cert_req ? 1 : 0;
        -:  182:	}
        -:  183:
    #####:  184:STACK_OF(X509_EXTENSION) *TS_REQ_get_exts(TS_REQ *a)
        -:  185:	{
    #####:  186:	return a->extensions;
        -:  187:	}
        -:  188:
    #####:  189:void TS_REQ_ext_free(TS_REQ *a)
        -:  190:	{
    #####:  191:	if (!a) return;
    #####:  192:	sk_X509_EXTENSION_pop_free(a->extensions, X509_EXTENSION_free);
    #####:  193:	a->extensions = NULL;
        -:  194:	}
        -:  195:
    #####:  196:int TS_REQ_get_ext_count(TS_REQ *a)
        -:  197:	{
    #####:  198:	return X509v3_get_ext_count(a->extensions);
        -:  199:	}
        -:  200:
    #####:  201:int TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos)
        -:  202:	{
    #####:  203:	return X509v3_get_ext_by_NID(a->extensions, nid, lastpos);
        -:  204:	}
        -:  205:
    #####:  206:int TS_REQ_get_ext_by_OBJ(TS_REQ *a, ASN1_OBJECT *obj, int lastpos)
        -:  207:	{
    #####:  208:	return X509v3_get_ext_by_OBJ(a->extensions, obj, lastpos);
        -:  209:	}
        -:  210:
    #####:  211:int TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos)
        -:  212:	{
    #####:  213:	return X509v3_get_ext_by_critical(a->extensions, crit, lastpos);
        -:  214:	}
        -:  215:
    #####:  216:X509_EXTENSION *TS_REQ_get_ext(TS_REQ *a, int loc)
        -:  217:	{
    #####:  218:	return X509v3_get_ext(a->extensions,loc);
        -:  219:	}
        -:  220:
    #####:  221:X509_EXTENSION *TS_REQ_delete_ext(TS_REQ *a, int loc)
        -:  222:	{
    #####:  223:	return X509v3_delete_ext(a->extensions,loc);
        -:  224:	}
        -:  225:
    #####:  226:int TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc)
        -:  227:	{
    #####:  228:	return X509v3_add_ext(&a->extensions,ex,loc) != NULL;
        -:  229:	}
        -:  230:
    #####:  231:void *TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx)
        -:  232:	{
    #####:  233:	return X509V3_get_d2i(a->extensions, nid, crit, idx);
        -:  234:	}
