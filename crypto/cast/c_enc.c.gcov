        -:    0:Source:c_enc.c
        -:    0:Graph:c_enc.gcno
        -:    0:Data:c_enc.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/cast/c_enc.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <openssl/cast.h>
        -:   60:#include "cast_lcl.h"
        -:   61:
    #####:   62:void CAST_encrypt(CAST_LONG *data, const CAST_KEY *key)
        -:   63:	{
        -:   64:	register CAST_LONG l,r,t;
        -:   65:	const register CAST_LONG *k;
        -:   66:
        -:   67:	k= &(key->data[0]);
    #####:   68:	l=data[0];
    #####:   69:	r=data[1];
        -:   70:
    #####:   71:	E_CAST( 0,k,l,r,+,^,-);
    #####:   72:	E_CAST( 1,k,r,l,^,-,+);
    #####:   73:	E_CAST( 2,k,l,r,-,+,^);
    #####:   74:	E_CAST( 3,k,r,l,+,^,-);
    #####:   75:	E_CAST( 4,k,l,r,^,-,+);
    #####:   76:	E_CAST( 5,k,r,l,-,+,^);
    #####:   77:	E_CAST( 6,k,l,r,+,^,-);
    #####:   78:	E_CAST( 7,k,r,l,^,-,+);
    #####:   79:	E_CAST( 8,k,l,r,-,+,^);
    #####:   80:	E_CAST( 9,k,r,l,+,^,-);
    #####:   81:	E_CAST(10,k,l,r,^,-,+);
    #####:   82:	E_CAST(11,k,r,l,-,+,^);
    #####:   83:	if(!key->short_key)
        -:   84:	    {
    #####:   85:	    E_CAST(12,k,l,r,+,^,-);
    #####:   86:	    E_CAST(13,k,r,l,^,-,+);
    #####:   87:	    E_CAST(14,k,l,r,-,+,^);
    #####:   88:	    E_CAST(15,k,r,l,+,^,-);
        -:   89:	    }
        -:   90:
    #####:   91:	data[1]=l&0xffffffffL;
    #####:   92:	data[0]=r&0xffffffffL;
    #####:   93:	}
        -:   94:
    #####:   95:void CAST_decrypt(CAST_LONG *data, const CAST_KEY *key)
        -:   96:	{
        -:   97:	register CAST_LONG l,r,t;
        -:   98:	const register CAST_LONG *k;
        -:   99:
        -:  100:	k= &(key->data[0]);
    #####:  101:	l=data[0];
    #####:  102:	r=data[1];
        -:  103:
    #####:  104:	if(!key->short_key)
        -:  105:	    {
    #####:  106:	    E_CAST(15,k,l,r,+,^,-);
    #####:  107:	    E_CAST(14,k,r,l,-,+,^);
    #####:  108:	    E_CAST(13,k,l,r,^,-,+);
    #####:  109:	    E_CAST(12,k,r,l,+,^,-);
        -:  110:	    }
    #####:  111:	E_CAST(11,k,l,r,-,+,^);
    #####:  112:	E_CAST(10,k,r,l,^,-,+);
    #####:  113:	E_CAST( 9,k,l,r,+,^,-);
    #####:  114:	E_CAST( 8,k,r,l,-,+,^);
    #####:  115:	E_CAST( 7,k,l,r,^,-,+);
    #####:  116:	E_CAST( 6,k,r,l,+,^,-);
    #####:  117:	E_CAST( 5,k,l,r,-,+,^);
    #####:  118:	E_CAST( 4,k,r,l,^,-,+);
    #####:  119:	E_CAST( 3,k,l,r,+,^,-);
    #####:  120:	E_CAST( 2,k,r,l,-,+,^);
    #####:  121:	E_CAST( 1,k,l,r,^,-,+);
    #####:  122:	E_CAST( 0,k,r,l,+,^,-);
        -:  123:
    #####:  124:	data[1]=l&0xffffffffL;
    #####:  125:	data[0]=r&0xffffffffL;
    #####:  126:	}
        -:  127:
    #####:  128:void CAST_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
        -:  129:	     const CAST_KEY *ks, unsigned char *iv, int enc)
        -:  130:	{
        -:  131:	register CAST_LONG tin0,tin1;
        -:  132:	register CAST_LONG tout0,tout1,xor0,xor1;
        -:  133:	register long l=length;
        -:  134:	CAST_LONG tin[2];
        -:  135:
    #####:  136:	if (enc)
        -:  137:		{
    #####:  138:		n2l(iv,tout0);
    #####:  139:		n2l(iv,tout1);
        -:  140:		iv-=8;
    #####:  141:		for (l-=8; l>=0; l-=8)
        -:  142:			{
    #####:  143:			n2l(in,tin0);
    #####:  144:			n2l(in,tin1);
    #####:  145:			tin0^=tout0;
    #####:  146:			tin1^=tout1;
    #####:  147:			tin[0]=tin0;
    #####:  148:			tin[1]=tin1;
    #####:  149:			CAST_encrypt(tin,ks);
    #####:  150:			tout0=tin[0];
    #####:  151:			tout1=tin[1];
    #####:  152:			l2n(tout0,out);
    #####:  153:			l2n(tout1,out);
        -:  154:			}
    #####:  155:		if (l != -8)
        -:  156:			{
    #####:  157:			n2ln(in,tin0,tin1,l+8);
    #####:  158:			tin0^=tout0;
    #####:  159:			tin1^=tout1;
    #####:  160:			tin[0]=tin0;
    #####:  161:			tin[1]=tin1;
    #####:  162:			CAST_encrypt(tin,ks);
    #####:  163:			tout0=tin[0];
    #####:  164:			tout1=tin[1];
    #####:  165:			l2n(tout0,out);
    #####:  166:			l2n(tout1,out);
        -:  167:			}
    #####:  168:		l2n(tout0,iv);
    #####:  169:		l2n(tout1,iv);
        -:  170:		}
        -:  171:	else
        -:  172:		{
    #####:  173:		n2l(iv,xor0);
    #####:  174:		n2l(iv,xor1);
        -:  175:		iv-=8;
    #####:  176:		for (l-=8; l>=0; l-=8)
        -:  177:			{
    #####:  178:			n2l(in,tin0);
    #####:  179:			n2l(in,tin1);
    #####:  180:			tin[0]=tin0;
    #####:  181:			tin[1]=tin1;
    #####:  182:			CAST_decrypt(tin,ks);
    #####:  183:			tout0=tin[0]^xor0;
    #####:  184:			tout1=tin[1]^xor1;
    #####:  185:			l2n(tout0,out);
    #####:  186:			l2n(tout1,out);
        -:  187:			xor0=tin0;
        -:  188:			xor1=tin1;
        -:  189:			}
    #####:  190:		if (l != -8)
        -:  191:			{
    #####:  192:			n2l(in,tin0);
    #####:  193:			n2l(in,tin1);
    #####:  194:			tin[0]=tin0;
    #####:  195:			tin[1]=tin1;
    #####:  196:			CAST_decrypt(tin,ks);
    #####:  197:			tout0=tin[0]^xor0;
    #####:  198:			tout1=tin[1]^xor1;
    #####:  199:			l2nn(tout0,tout1,out,l+8);
        -:  200:			xor0=tin0;
        -:  201:			xor1=tin1;
        -:  202:			}
    #####:  203:		l2n(xor0,iv);
    #####:  204:		l2n(xor1,iv);
        -:  205:		}
        -:  206:	tin0=tin1=tout0=tout1=xor0=xor1=0;
        -:  207:	tin[0]=tin[1]=0;
    #####:  208:	}
