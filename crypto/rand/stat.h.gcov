        -:    0:Source:/usr/include/x86_64-linux-gnu/sys/stat.h
        -:    0:Graph:randfile.gcno
        -:    0:Data:randfile.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* Copyright (C) 1991, 1992, 1995-2007, 2009, 2010, 2012
        -:    2:   Free Software Foundation, Inc.
        -:    3:   This file is part of the GNU C Library.
        -:    4:
        -:    5:   The GNU C Library is free software; you can redistribute it and/or
        -:    6:   modify it under the terms of the GNU Lesser General Public
        -:    7:   License as published by the Free Software Foundation; either
        -:    8:   version 2.1 of the License, or (at your option) any later version.
        -:    9:
        -:   10:   The GNU C Library is distributed in the hope that it will be useful,
        -:   11:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        -:   13:   Lesser General Public License for more details.
        -:   14:
        -:   15:   You should have received a copy of the GNU Lesser General Public
        -:   16:   License along with the GNU C Library; if not, see
        -:   17:   <http://www.gnu.org/licenses/>.  */
        -:   18:
        -:   19:/*
        -:   20: *	POSIX Standard: 5.6 File Characteristics	<sys/stat.h>
        -:   21: */
        -:   22:
        -:   23:#ifndef	_SYS_STAT_H
        -:   24:#define	_SYS_STAT_H	1
        -:   25:
        -:   26:#include <features.h>
        -:   27:
        -:   28:#include <bits/types.h>		/* For __mode_t and __dev_t.  */
        -:   29:
        -:   30:#if defined __USE_XOPEN || defined __USE_XOPEN2K || defined __USE_MISC \
        -:   31:	 || defined __USE_ATFILE
        -:   32:# if defined __USE_XOPEN || defined __USE_XOPEN2K
        -:   33:#  define __need_time_t
        -:   34:# endif
        -:   35:# if defined __USE_MISC || defined __USE_ATFILE
        -:   36:#  define __need_timespec
        -:   37:# endif
        -:   38:# include <time.h>		/* For time_t resp. timespec.  */
        -:   39:#endif
        -:   40:
        -:   41:#if defined __USE_XOPEN || defined __USE_XOPEN2K
        -:   42:/* The Single Unix specification says that some more types are
        -:   43:   available here.  */
        -:   44:# ifndef __dev_t_defined
        -:   45:typedef __dev_t dev_t;
        -:   46:#  define __dev_t_defined
        -:   47:# endif
        -:   48:
        -:   49:# ifndef __gid_t_defined
        -:   50:typedef __gid_t gid_t;
        -:   51:#  define __gid_t_defined
        -:   52:# endif
        -:   53:
        -:   54:# ifndef __ino_t_defined
        -:   55:#  ifndef __USE_FILE_OFFSET64
        -:   56:typedef __ino_t ino_t;
        -:   57:#  else
        -:   58:typedef __ino64_t ino_t;
        -:   59:#  endif
        -:   60:#  define __ino_t_defined
        -:   61:# endif
        -:   62:
        -:   63:# ifndef __mode_t_defined
        -:   64:typedef __mode_t mode_t;
        -:   65:#  define __mode_t_defined
        -:   66:# endif
        -:   67:
        -:   68:# ifndef __nlink_t_defined
        -:   69:typedef __nlink_t nlink_t;
        -:   70:#  define __nlink_t_defined
        -:   71:# endif
        -:   72:
        -:   73:# ifndef __off_t_defined
        -:   74:#  ifndef __USE_FILE_OFFSET64
        -:   75:typedef __off_t off_t;
        -:   76:#  else
        -:   77:typedef __off64_t off_t;
        -:   78:#  endif
        -:   79:#  define __off_t_defined
        -:   80:# endif
        -:   81:
        -:   82:# ifndef __uid_t_defined
        -:   83:typedef __uid_t uid_t;
        -:   84:#  define __uid_t_defined
        -:   85:# endif
        -:   86:#endif	/* X/Open */
        -:   87:
        -:   88:#ifdef __USE_UNIX98
        -:   89:# ifndef __blkcnt_t_defined
        -:   90:#  ifndef __USE_FILE_OFFSET64
        -:   91:typedef __blkcnt_t blkcnt_t;
        -:   92:#  else
        -:   93:typedef __blkcnt64_t blkcnt_t;
        -:   94:#  endif
        -:   95:#  define __blkcnt_t_defined
        -:   96:# endif
        -:   97:
        -:   98:# ifndef __blksize_t_defined
        -:   99:typedef __blksize_t blksize_t;
        -:  100:#  define __blksize_t_defined
        -:  101:# endif
        -:  102:#endif	/* Unix98 */
        -:  103:
        -:  104:__BEGIN_DECLS
        -:  105:
        -:  106:#include <bits/stat.h>
        -:  107:
        -:  108:#if defined __USE_BSD || defined __USE_MISC || defined __USE_XOPEN
        -:  109:# define S_IFMT		__S_IFMT
        -:  110:# define S_IFDIR	__S_IFDIR
        -:  111:# define S_IFCHR	__S_IFCHR
        -:  112:# define S_IFBLK	__S_IFBLK
        -:  113:# define S_IFREG	__S_IFREG
        -:  114:# ifdef __S_IFIFO
        -:  115:#  define S_IFIFO	__S_IFIFO
        -:  116:# endif
        -:  117:# ifdef __S_IFLNK
        -:  118:#  define S_IFLNK	__S_IFLNK
        -:  119:# endif
        -:  120:# if (defined __USE_BSD || defined __USE_MISC || defined __USE_UNIX98) \
        -:  121:     && defined __S_IFSOCK
        -:  122:#  define S_IFSOCK	__S_IFSOCK
        -:  123:# endif
        -:  124:#endif
        -:  125:
        -:  126:/* Test macros for file types.	*/
        -:  127:
        -:  128:#define	__S_ISTYPE(mode, mask)	(((mode) & __S_IFMT) == (mask))
        -:  129:
        -:  130:#define	S_ISDIR(mode)	 __S_ISTYPE((mode), __S_IFDIR)
        -:  131:#define	S_ISCHR(mode)	 __S_ISTYPE((mode), __S_IFCHR)
        -:  132:#define	S_ISBLK(mode)	 __S_ISTYPE((mode), __S_IFBLK)
        -:  133:#define	S_ISREG(mode)	 __S_ISTYPE((mode), __S_IFREG)
        -:  134:#ifdef __S_IFIFO
        -:  135:# define S_ISFIFO(mode)	 __S_ISTYPE((mode), __S_IFIFO)
        -:  136:#endif
        -:  137:#ifdef __S_IFLNK
        -:  138:# define S_ISLNK(mode)	 __S_ISTYPE((mode), __S_IFLNK)
        -:  139:#endif
        -:  140:
        -:  141:#if defined __USE_BSD && !defined __S_IFLNK
        -:  142:# define S_ISLNK(mode)  0
        -:  143:#endif
        -:  144:
        -:  145:#if (defined __USE_BSD || defined __USE_UNIX98 || defined __USE_XOPEN2K) \
        -:  146:    && defined __S_IFSOCK
        -:  147:# define S_ISSOCK(mode) __S_ISTYPE((mode), __S_IFSOCK)
        -:  148:#elif defined __USE_XOPEN2K
        -:  149:# define S_ISSOCK(mode) 0
        -:  150:#endif
        -:  151:
        -:  152:/* These are from POSIX.1b.  If the objects are not implemented using separate
        -:  153:   distinct file types, the macros always will evaluate to zero.  Unlike the
        -:  154:   other S_* macros the following three take a pointer to a `struct stat'
        -:  155:   object as the argument.  */
        -:  156:#ifdef	__USE_POSIX199309
        -:  157:# define S_TYPEISMQ(buf) __S_TYPEISMQ(buf)
        -:  158:# define S_TYPEISSEM(buf) __S_TYPEISSEM(buf)
        -:  159:# define S_TYPEISSHM(buf) __S_TYPEISSHM(buf)
        -:  160:#endif
        -:  161:
        -:  162:
        -:  163:/* Protection bits.  */
        -:  164:
        -:  165:#define	S_ISUID __S_ISUID	/* Set user ID on execution.  */
        -:  166:#define	S_ISGID	__S_ISGID	/* Set group ID on execution.  */
        -:  167:
        -:  168:#if defined __USE_BSD || defined __USE_MISC || defined __USE_XOPEN
        -:  169:/* Save swapped text after use (sticky bit).  This is pretty well obsolete.  */
        -:  170:# define S_ISVTX	__S_ISVTX
        -:  171:#endif
        -:  172:
        -:  173:#define	S_IRUSR	__S_IREAD	/* Read by owner.  */
        -:  174:#define	S_IWUSR	__S_IWRITE	/* Write by owner.  */
        -:  175:#define	S_IXUSR	__S_IEXEC	/* Execute by owner.  */
        -:  176:/* Read, write, and execute by owner.  */
        -:  177:#define	S_IRWXU	(__S_IREAD|__S_IWRITE|__S_IEXEC)
        -:  178:
        -:  179:#if defined __USE_MISC && defined __USE_BSD
        -:  180:# define S_IREAD	S_IRUSR
        -:  181:# define S_IWRITE	S_IWUSR
        -:  182:# define S_IEXEC	S_IXUSR
        -:  183:#endif
        -:  184:
        -:  185:#define	S_IRGRP	(S_IRUSR >> 3)	/* Read by group.  */
        -:  186:#define	S_IWGRP	(S_IWUSR >> 3)	/* Write by group.  */
        -:  187:#define	S_IXGRP	(S_IXUSR >> 3)	/* Execute by group.  */
        -:  188:/* Read, write, and execute by group.  */
        -:  189:#define	S_IRWXG	(S_IRWXU >> 3)
        -:  190:
        -:  191:#define	S_IROTH	(S_IRGRP >> 3)	/* Read by others.  */
        -:  192:#define	S_IWOTH	(S_IWGRP >> 3)	/* Write by others.  */
        -:  193:#define	S_IXOTH	(S_IXGRP >> 3)	/* Execute by others.  */
        -:  194:/* Read, write, and execute by others.  */
        -:  195:#define	S_IRWXO	(S_IRWXG >> 3)
        -:  196:
        -:  197:
        -:  198:#ifdef	__USE_BSD
        -:  199:/* Macros for common mode bit masks.  */
        -:  200:# define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO) /* 0777 */
        -:  201:# define ALLPERMS (S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO)/* 07777 */
        -:  202:# define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)/* 0666*/
        -:  203:
        -:  204:# define S_BLKSIZE	512	/* Block size for `st_blocks'.  */
        -:  205:#endif
        -:  206:
        -:  207:
        -:  208:#ifndef __USE_FILE_OFFSET64
        -:  209:/* Get file attributes for FILE and put them in BUF.  */
        -:  210:extern int stat (const char *__restrict __file,
        -:  211:		 struct stat *__restrict __buf) __THROW __nonnull ((1, 2));
        -:  212:
        -:  213:/* Get file attributes for the file, device, pipe, or socket
        -:  214:   that file descriptor FD is open on and put them in BUF.  */
        -:  215:extern int fstat (int __fd, struct stat *__buf) __THROW __nonnull ((2));
        -:  216:#else
        -:  217:# ifdef __REDIRECT_NTH
        -:  218:extern int __REDIRECT_NTH (stat, (const char *__restrict __file,
        -:  219:				  struct stat *__restrict __buf), stat64)
        -:  220:     __nonnull ((1, 2));
        -:  221:extern int __REDIRECT_NTH (fstat, (int __fd, struct stat *__buf), fstat64)
        -:  222:     __nonnull ((2));
        -:  223:# else
        -:  224:#  define stat stat64
        -:  225:#  define fstat fstat64
        -:  226:# endif
        -:  227:#endif
        -:  228:#ifdef __USE_LARGEFILE64
        -:  229:extern int stat64 (const char *__restrict __file,
        -:  230:		   struct stat64 *__restrict __buf) __THROW __nonnull ((1, 2));
        -:  231:extern int fstat64 (int __fd, struct stat64 *__buf) __THROW __nonnull ((2));
        -:  232:#endif
        -:  233:
        -:  234:#ifdef __USE_ATFILE
        -:  235:/* Similar to stat, get the attributes for FILE and put them in BUF.
        -:  236:   Relative path names are interpreted relative to FD unless FD is
        -:  237:   AT_FDCWD.  */
        -:  238:# ifndef __USE_FILE_OFFSET64
        -:  239:extern int fstatat (int __fd, const char *__restrict __file,
        -:  240:		    struct stat *__restrict __buf, int __flag)
        -:  241:     __THROW __nonnull ((2, 3));
        -:  242:# else
        -:  243:#  ifdef __REDIRECT_NTH
        -:  244:extern int __REDIRECT_NTH (fstatat, (int __fd, const char *__restrict __file,
        -:  245:				     struct stat *__restrict __buf,
        -:  246:				     int __flag),
        -:  247:			   fstatat64) __nonnull ((2, 3));
        -:  248:#  else
        -:  249:#   define fstatat fstatat64
        -:  250:#  endif
        -:  251:# endif
        -:  252:
        -:  253:# ifdef __USE_LARGEFILE64
        -:  254:extern int fstatat64 (int __fd, const char *__restrict __file,
        -:  255:		      struct stat64 *__restrict __buf, int __flag)
        -:  256:     __THROW __nonnull ((2, 3));
        -:  257:# endif
        -:  258:#endif
        -:  259:
        -:  260:#if defined __USE_BSD || defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K
        -:  261:# ifndef __USE_FILE_OFFSET64
        -:  262:/* Get file attributes about FILE and put them in BUF.
        -:  263:   If FILE is a symbolic link, do not follow it.  */
        -:  264:extern int lstat (const char *__restrict __file,
        -:  265:		  struct stat *__restrict __buf) __THROW __nonnull ((1, 2));
        -:  266:# else
        -:  267:#  ifdef __REDIRECT_NTH
        -:  268:extern int __REDIRECT_NTH (lstat,
        -:  269:			   (const char *__restrict __file,
        -:  270:			    struct stat *__restrict __buf), lstat64)
        -:  271:     __nonnull ((1, 2));
        -:  272:#  else
        -:  273:#   define lstat lstat64
        -:  274:#  endif
        -:  275:# endif
        -:  276:# ifdef __USE_LARGEFILE64
        -:  277:extern int lstat64 (const char *__restrict __file,
        -:  278:		    struct stat64 *__restrict __buf)
        -:  279:     __THROW __nonnull ((1, 2));
        -:  280:# endif
        -:  281:#endif
        -:  282:
        -:  283:/* Set file access permissions for FILE to MODE.
        -:  284:   If FILE is a symbolic link, this affects its target instead.  */
        -:  285:extern int chmod (const char *__file, __mode_t __mode)
        -:  286:     __THROW __nonnull ((1));
        -:  287:
        -:  288:#ifdef __USE_BSD
        -:  289:/* Set file access permissions for FILE to MODE.
        -:  290:   If FILE is a symbolic link, this affects the link itself
        -:  291:   rather than its target.  */
        -:  292:extern int lchmod (const char *__file, __mode_t __mode)
        -:  293:     __THROW __nonnull ((1));
        -:  294:#endif
        -:  295:
        -:  296:/* Set file access permissions of the file FD is open on to MODE.  */
        -:  297:#if defined __USE_BSD || defined __USE_POSIX
        -:  298:extern int fchmod (int __fd, __mode_t __mode) __THROW;
        -:  299:#endif
        -:  300:
        -:  301:#ifdef __USE_ATFILE
        -:  302:/* Set file access permissions of FILE relative to
        -:  303:   the directory FD is open on.  */
        -:  304:extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
        -:  305:		     int __flag)
        -:  306:     __THROW __nonnull ((2)) __wur;
        -:  307:#endif /* Use ATFILE.  */
        -:  308:
        -:  309:
        -:  310:
        -:  311:/* Set the file creation mask of the current process to MASK,
        -:  312:   and return the old creation mask.  */
        -:  313:extern __mode_t umask (__mode_t __mask) __THROW;
        -:  314:
        -:  315:#ifdef	__USE_GNU
        -:  316:/* Get the current `umask' value without changing it.
        -:  317:   This function is only available under the GNU Hurd.  */
        -:  318:extern __mode_t getumask (void) __THROW;
        -:  319:#endif
        -:  320:
        -:  321:/* Create a new directory named PATH, with permission bits MODE.  */
        -:  322:extern int mkdir (const char *__path, __mode_t __mode)
        -:  323:     __THROW __nonnull ((1));
        -:  324:
        -:  325:#ifdef __USE_ATFILE
        -:  326:/* Like mkdir, create a new directory with permission bits MODE.  But
        -:  327:   interpret relative PATH names relative to the directory associated
        -:  328:   with FD.  */
        -:  329:extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
        -:  330:     __THROW __nonnull ((2));
        -:  331:#endif
        -:  332:
        -:  333:/* Create a device file named PATH, with permission and special bits MODE
        -:  334:   and device number DEV (which can be constructed from major and minor
        -:  335:   device numbers with the `makedev' macro above).  */
        -:  336:#if defined __USE_MISC || defined __USE_BSD || defined __USE_XOPEN_EXTENDED
        -:  337:extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
        -:  338:     __THROW __nonnull ((1));
        -:  339:
        -:  340:# ifdef __USE_ATFILE
        -:  341:/* Like mknod, create a new device file with permission bits MODE and
        -:  342:   device number DEV.  But interpret relative PATH names relative to
        -:  343:   the directory associated with FD.  */
        -:  344:extern int mknodat (int __fd, const char *__path, __mode_t __mode,
        -:  345:		    __dev_t __dev) __THROW __nonnull ((2));
        -:  346:# endif
        -:  347:#endif
        -:  348:
        -:  349:
        -:  350:/* Create a new FIFO named PATH, with permission bits MODE.  */
        -:  351:extern int mkfifo (const char *__path, __mode_t __mode)
        -:  352:     __THROW __nonnull ((1));
        -:  353:
        -:  354:#ifdef __USE_ATFILE
        -:  355:/* Like mkfifo, create a new FIFO with permission bits MODE.  But
        -:  356:   interpret relative PATH names relative to the directory associated
        -:  357:   with FD.  */
        -:  358:extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
        -:  359:     __THROW __nonnull ((2));
        -:  360:#endif
        -:  361:
        -:  362:#ifdef __USE_ATFILE
        -:  363:/* Set file access and modification times relative to directory file
        -:  364:   descriptor.  */
        -:  365:extern int utimensat (int __fd, const char *__path,
        -:  366:		      const struct timespec __times[2],
        -:  367:		      int __flags)
        -:  368:     __THROW __nonnull ((2));
        -:  369:#endif
        -:  370:
        -:  371:#ifdef __USE_XOPEN2K8
        -:  372:/* Set file access and modification times of the file associated with FD.  */
        -:  373:extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
        -:  374:#endif
        -:  375:
        -:  376:/* To allow the `struct stat' structure and the file type `mode_t'
        -:  377:   bits to vary without changing shared library major version number,
        -:  378:   the `stat' family of functions and `mknod' are in fact inline
        -:  379:   wrappers around calls to `xstat', `fxstat', `lxstat', and `xmknod',
        -:  380:   which all take a leading version-number argument designating the
        -:  381:   data structure and bits used.  <bits/stat.h> defines _STAT_VER with
        -:  382:   the version number corresponding to `struct stat' as defined in
        -:  383:   that file; and _MKNOD_VER with the version number corresponding to
        -:  384:   the S_IF* macros defined therein.  It is arranged that when not
        -:  385:   inlined these function are always statically linked; that way a
        -:  386:   dynamically-linked executable always encodes the version number
        -:  387:   corresponding to the data structures it uses, so the `x' functions
        -:  388:   in the shared library can adapt without needing to recompile all
        -:  389:   callers.  */
        -:  390:
        -:  391:#ifndef _STAT_VER
        -:  392:# define _STAT_VER	0
        -:  393:#endif
        -:  394:#ifndef _MKNOD_VER
        -:  395:# define _MKNOD_VER	0
        -:  396:#endif
        -:  397:
        -:  398:/* Wrappers for stat and mknod system calls.  */
        -:  399:#ifndef __USE_FILE_OFFSET64
        -:  400:extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
        -:  401:     __THROW __nonnull ((3));
        -:  402:extern int __xstat (int __ver, const char *__filename,
        -:  403:		    struct stat *__stat_buf) __THROW __nonnull ((2, 3));
        -:  404:extern int __lxstat (int __ver, const char *__filename,
        -:  405:		     struct stat *__stat_buf) __THROW __nonnull ((2, 3));
        -:  406:extern int __fxstatat (int __ver, int __fildes, const char *__filename,
        -:  407:		       struct stat *__stat_buf, int __flag)
        -:  408:     __THROW __nonnull ((3, 4));
        -:  409:#else
        -:  410:# ifdef __REDIRECT_NTH
        -:  411:extern int __REDIRECT_NTH (__fxstat, (int __ver, int __fildes,
        -:  412:				      struct stat *__stat_buf), __fxstat64)
        -:  413:     __nonnull ((3));
        -:  414:extern int __REDIRECT_NTH (__xstat, (int __ver, const char *__filename,
        -:  415:				     struct stat *__stat_buf), __xstat64)
        -:  416:     __nonnull ((2, 3));
        -:  417:extern int __REDIRECT_NTH (__lxstat, (int __ver, const char *__filename,
        -:  418:				      struct stat *__stat_buf), __lxstat64)
        -:  419:     __nonnull ((2, 3));
        -:  420:extern int __REDIRECT_NTH (__fxstatat, (int __ver, int __fildes,
        -:  421:					const char *__filename,
        -:  422:					struct stat *__stat_buf, int __flag),
        -:  423:			   __fxstatat64) __nonnull ((3, 4));
        -:  424:
        -:  425:# else
        -:  426:#  define __fxstat __fxstat64
        -:  427:#  define __xstat __xstat64
        -:  428:#  define __lxstat __lxstat64
        -:  429:# endif
        -:  430:#endif
        -:  431:
        -:  432:#ifdef __USE_LARGEFILE64
        -:  433:extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
        -:  434:     __THROW __nonnull ((3));
        -:  435:extern int __xstat64 (int __ver, const char *__filename,
        -:  436:		      struct stat64 *__stat_buf) __THROW __nonnull ((2, 3));
        -:  437:extern int __lxstat64 (int __ver, const char *__filename,
        -:  438:		       struct stat64 *__stat_buf) __THROW __nonnull ((2, 3));
        -:  439:extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
        -:  440:			 struct stat64 *__stat_buf, int __flag)
        -:  441:     __THROW __nonnull ((3, 4));
        -:  442:#endif
        -:  443:extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
        -:  444:		     __dev_t *__dev) __THROW __nonnull ((2, 4));
        -:  445:
        -:  446:extern int __xmknodat (int __ver, int __fd, const char *__path,
        -:  447:		       __mode_t __mode, __dev_t *__dev)
        -:  448:     __THROW __nonnull ((3, 5));
        -:  449:
        -:  450:#if defined __GNUC__ && __GNUC__ >= 2 && defined __USE_EXTERN_INLINES
        -:  451:/* Inlined versions of the real stat and mknod functions.  */
        -:  452:
        -:  453:__extern_inline int
        -:  454:__NTH (stat (const char *__path, struct stat *__statbuf))
        -:  455:{
    10000:  456:  return __xstat (_STAT_VER, __path, __statbuf);
        -:  457:}
        -:  458:
        -:  459:# if defined __USE_BSD || defined __USE_XOPEN_EXTENDED
        -:  460:__extern_inline int
        -:  461:__NTH (lstat (const char *__path, struct stat *__statbuf))
        -:  462:{
        -:  463:  return __lxstat (_STAT_VER, __path, __statbuf);
        -:  464:}
        -:  465:# endif
        -:  466:
        -:  467:__extern_inline int
        -:  468:__NTH (fstat (int __fd, struct stat *__statbuf))
        -:  469:{
        -:  470:  return __fxstat (_STAT_VER, __fd, __statbuf);
        -:  471:}
        -:  472:
        -:  473:# ifdef __USE_ATFILE
        -:  474:__extern_inline int
        -:  475:__NTH (fstatat (int __fd, const char *__filename, struct stat *__statbuf,
        -:  476:		int __flag))
        -:  477:{
        -:  478:  return __fxstatat (_STAT_VER, __fd, __filename, __statbuf, __flag);
        -:  479:}
        -:  480:# endif
        -:  481:
        -:  482:# if defined __USE_MISC || defined __USE_BSD
        -:  483:__extern_inline int
        -:  484:__NTH (mknod (const char *__path, __mode_t __mode, __dev_t __dev))
        -:  485:{
        -:  486:  return __xmknod (_MKNOD_VER, __path, __mode, &__dev);
        -:  487:}
        -:  488:# endif
        -:  489:
        -:  490:# ifdef __USE_ATFILE
        -:  491:__extern_inline int
        -:  492:__NTH (mknodat (int __fd, const char *__path, __mode_t __mode,
        -:  493:		__dev_t __dev))
        -:  494:{
        -:  495:  return __xmknodat (_MKNOD_VER, __fd, __path, __mode, &__dev);
        -:  496:}
        -:  497:# endif
        -:  498:
        -:  499:# if defined __USE_LARGEFILE64 \
        -:  500:  && (! defined __USE_FILE_OFFSET64 \
        -:  501:      || (defined __REDIRECT_NTH && defined __OPTIMIZE__))
        -:  502:__extern_inline int
        -:  503:__NTH (stat64 (const char *__path, struct stat64 *__statbuf))
        -:  504:{
        -:  505:  return __xstat64 (_STAT_VER, __path, __statbuf);
        -:  506:}
        -:  507:
        -:  508:#  if defined __USE_BSD || defined __USE_XOPEN_EXTENDED
        -:  509:__extern_inline int
        -:  510:__NTH (lstat64 (const char *__path, struct stat64 *__statbuf))
        -:  511:{
        -:  512:  return __lxstat64 (_STAT_VER, __path, __statbuf);
        -:  513:}
        -:  514:#  endif
        -:  515:
        -:  516:__extern_inline int
        -:  517:__NTH (fstat64 (int __fd, struct stat64 *__statbuf))
        -:  518:{
        -:  519:  return __fxstat64 (_STAT_VER, __fd, __statbuf);
        -:  520:}
        -:  521:
        -:  522:#  ifdef __USE_ATFILE
        -:  523:__extern_inline int
        -:  524:__NTH (fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf,
        -:  525:		  int __flag))
        -:  526:{
        -:  527:  return __fxstatat64 (_STAT_VER, __fd, __filename, __statbuf, __flag);
        -:  528:}
        -:  529:#  endif
        -:  530:
        -:  531:# endif
        -:  532:
        -:  533:#endif
        -:  534:
        -:  535:__END_DECLS
        -:  536:
        -:  537:
        -:  538:#endif /* sys/stat.h  */
