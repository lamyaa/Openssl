        -:    0:Source:lh_stats.c
        -:    0:Graph:lh_stats.gcno
        -:    0:Data:lh_stats.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/lhash/lh_stats.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include <string.h>
        -:   61:#include <stdlib.h>
        -:   62:/* If you wish to build this outside of SSLeay, remove the following lines
        -:   63: * and things should work as expected */
        -:   64:#include "cryptlib.h"
        -:   65:
        -:   66:#ifndef OPENSSL_NO_BIO
        -:   67:#include <openssl/bio.h>
        -:   68:#endif
        -:   69:#include <openssl/lhash.h>
        -:   70:
        -:   71:#ifdef OPENSSL_NO_BIO
        -:   72:
        -:   73:void lh_stats(LHASH *lh, FILE *out)
        -:   74:	{
        -:   75:	fprintf(out,"num_items             = %lu\n",lh->num_items);
        -:   76:	fprintf(out,"num_nodes             = %u\n",lh->num_nodes);
        -:   77:	fprintf(out,"num_alloc_nodes       = %u\n",lh->num_alloc_nodes);
        -:   78:	fprintf(out,"num_expands           = %lu\n",lh->num_expands);
        -:   79:	fprintf(out,"num_expand_reallocs   = %lu\n",lh->num_expand_reallocs);
        -:   80:	fprintf(out,"num_contracts         = %lu\n",lh->num_contracts);
        -:   81:	fprintf(out,"num_contract_reallocs = %lu\n",lh->num_contract_reallocs);
        -:   82:	fprintf(out,"num_hash_calls        = %lu\n",lh->num_hash_calls);
        -:   83:	fprintf(out,"num_comp_calls        = %lu\n",lh->num_comp_calls);
        -:   84:	fprintf(out,"num_insert            = %lu\n",lh->num_insert);
        -:   85:	fprintf(out,"num_replace           = %lu\n",lh->num_replace);
        -:   86:	fprintf(out,"num_delete            = %lu\n",lh->num_delete);
        -:   87:	fprintf(out,"num_no_delete         = %lu\n",lh->num_no_delete);
        -:   88:	fprintf(out,"num_retrieve          = %lu\n",lh->num_retrieve);
        -:   89:	fprintf(out,"num_retrieve_miss     = %lu\n",lh->num_retrieve_miss);
        -:   90:	fprintf(out,"num_hash_comps        = %lu\n",lh->num_hash_comps);
        -:   91:#if 0
        -:   92:	fprintf(out,"p                     = %u\n",lh->p);
        -:   93:	fprintf(out,"pmax                  = %u\n",lh->pmax);
        -:   94:	fprintf(out,"up_load               = %lu\n",lh->up_load);
        -:   95:	fprintf(out,"down_load             = %lu\n",lh->down_load);
        -:   96:#endif
        -:   97:	}
        -:   98:
        -:   99:void lh_node_stats(LHASH *lh, FILE *out)
        -:  100:	{
        -:  101:	LHASH_NODE *n;
        -:  102:	unsigned int i,num;
        -:  103:
        -:  104:	for (i=0; i<lh->num_nodes; i++)
        -:  105:		{
        -:  106:		for (n=lh->b[i],num=0; n != NULL; n=n->next)
        -:  107:			num++;
        -:  108:		fprintf(out,"node %6u -> %3u\n",i,num);
        -:  109:		}
        -:  110:	}
        -:  111:
        -:  112:void lh_node_usage_stats(LHASH *lh, FILE *out)
        -:  113:	{
        -:  114:	LHASH_NODE *n;
        -:  115:	unsigned long num;
        -:  116:	unsigned int i;
        -:  117:	unsigned long total=0,n_used=0;
        -:  118:
        -:  119:	for (i=0; i<lh->num_nodes; i++)
        -:  120:		{
        -:  121:		for (n=lh->b[i],num=0; n != NULL; n=n->next)
        -:  122:			num++;
        -:  123:		if (num != 0)
        -:  124:			{
        -:  125:			n_used++;
        -:  126:			total+=num;
        -:  127:			}
        -:  128:		}
        -:  129:	fprintf(out,"%lu nodes used out of %u\n",n_used,lh->num_nodes);
        -:  130:	fprintf(out,"%lu items\n",total);
        -:  131:	if (n_used == 0) return;
        -:  132:	fprintf(out,"load %d.%02d  actual load %d.%02d\n",
        -:  133:		(int)(total/lh->num_nodes),
        -:  134:		(int)((total%lh->num_nodes)*100/lh->num_nodes),
        -:  135:		(int)(total/n_used),
        -:  136:		(int)((total%n_used)*100/n_used));
        -:  137:	}
        -:  138:
        -:  139:#else
        -:  140:
        -:  141:#ifndef OPENSSL_NO_FP_API
    #####:  142:void lh_stats(const _LHASH *lh, FILE *fp)
        -:  143:	{
        -:  144:	BIO *bp;
        -:  145:
    #####:  146:	bp=BIO_new(BIO_s_file());
    #####:  147:	if (bp == NULL) goto end;
    #####:  148:	BIO_set_fp(bp,fp,BIO_NOCLOSE);
    #####:  149:	lh_stats_bio(lh,bp);
    #####:  150:	BIO_free(bp);
        -:  151:end:;
    #####:  152:	}
        -:  153:
    #####:  154:void lh_node_stats(const _LHASH *lh, FILE *fp)
        -:  155:	{
        -:  156:	BIO *bp;
        -:  157:
    #####:  158:	bp=BIO_new(BIO_s_file());
    #####:  159:	if (bp == NULL) goto end;
    #####:  160:	BIO_set_fp(bp,fp,BIO_NOCLOSE);
    #####:  161:	lh_node_stats_bio(lh,bp);
    #####:  162:	BIO_free(bp);
        -:  163:end:;
    #####:  164:	}
        -:  165:
    #####:  166:void lh_node_usage_stats(const _LHASH *lh, FILE *fp)
        -:  167:	{
        -:  168:	BIO *bp;
        -:  169:
    #####:  170:	bp=BIO_new(BIO_s_file());
    #####:  171:	if (bp == NULL) goto end;
    #####:  172:	BIO_set_fp(bp,fp,BIO_NOCLOSE);
    #####:  173:	lh_node_usage_stats_bio(lh,bp);
    #####:  174:	BIO_free(bp);
        -:  175:end:;
    #####:  176:	}
        -:  177:
        -:  178:#endif
        -:  179:
    #####:  180:void lh_stats_bio(const _LHASH *lh, BIO *out)
        -:  181:	{
    #####:  182:	BIO_printf(out,"num_items             = %lu\n",lh->num_items);
    #####:  183:	BIO_printf(out,"num_nodes             = %u\n",lh->num_nodes);
    #####:  184:	BIO_printf(out,"num_alloc_nodes       = %u\n",lh->num_alloc_nodes);
    #####:  185:	BIO_printf(out,"num_expands           = %lu\n",lh->num_expands);
    #####:  186:	BIO_printf(out,"num_expand_reallocs   = %lu\n",
        -:  187:		   lh->num_expand_reallocs);
    #####:  188:	BIO_printf(out,"num_contracts         = %lu\n",lh->num_contracts);
    #####:  189:	BIO_printf(out,"num_contract_reallocs = %lu\n",
        -:  190:		   lh->num_contract_reallocs);
    #####:  191:	BIO_printf(out,"num_hash_calls        = %lu\n",lh->num_hash_calls);
    #####:  192:	BIO_printf(out,"num_comp_calls        = %lu\n",lh->num_comp_calls);
    #####:  193:	BIO_printf(out,"num_insert            = %lu\n",lh->num_insert);
    #####:  194:	BIO_printf(out,"num_replace           = %lu\n",lh->num_replace);
    #####:  195:	BIO_printf(out,"num_delete            = %lu\n",lh->num_delete);
    #####:  196:	BIO_printf(out,"num_no_delete         = %lu\n",lh->num_no_delete);
    #####:  197:	BIO_printf(out,"num_retrieve          = %lu\n",lh->num_retrieve);
    #####:  198:	BIO_printf(out,"num_retrieve_miss     = %lu\n",lh->num_retrieve_miss);
    #####:  199:	BIO_printf(out,"num_hash_comps        = %lu\n",lh->num_hash_comps);
        -:  200:#if 0
        -:  201:	BIO_printf(out,"p                     = %u\n",lh->p);
        -:  202:	BIO_printf(out,"pmax                  = %u\n",lh->pmax);
        -:  203:	BIO_printf(out,"up_load               = %lu\n",lh->up_load);
        -:  204:	BIO_printf(out,"down_load             = %lu\n",lh->down_load);
        -:  205:#endif
    #####:  206:	}
        -:  207:
    #####:  208:void lh_node_stats_bio(const _LHASH *lh, BIO *out)
        -:  209:	{
        -:  210:	LHASH_NODE *n;
        -:  211:	unsigned int i,num;
        -:  212:
    #####:  213:	for (i=0; i<lh->num_nodes; i++)
        -:  214:		{
    #####:  215:		for (n=lh->b[i],num=0; n != NULL; n=n->next)
    #####:  216:			num++;
    #####:  217:		BIO_printf(out,"node %6u -> %3u\n",i,num);
        -:  218:		}
    #####:  219:	}
        -:  220:
    #####:  221:void lh_node_usage_stats_bio(const _LHASH *lh, BIO *out)
        -:  222:	{
        -:  223:	LHASH_NODE *n;
        -:  224:	unsigned long num;
        -:  225:	unsigned int i;
        -:  226:	unsigned long total=0,n_used=0;
        -:  227:
    #####:  228:	for (i=0; i<lh->num_nodes; i++)
        -:  229:		{
    #####:  230:		for (n=lh->b[i],num=0; n != NULL; n=n->next)
    #####:  231:			num++;
    #####:  232:		if (num != 0)
        -:  233:			{
    #####:  234:			n_used++;
    #####:  235:			total+=num;
        -:  236:			}
        -:  237:		}
    #####:  238:	BIO_printf(out,"%lu nodes used out of %u\n",n_used,lh->num_nodes);
    #####:  239:	BIO_printf(out,"%lu items\n",total);
    #####:  240:	if (n_used == 0) return;
    #####:  241:	BIO_printf(out,"load %d.%02d  actual load %d.%02d\n",
    #####:  242:		   (int)(total/lh->num_nodes),
    #####:  243:		   (int)((total%lh->num_nodes)*100/lh->num_nodes),
    #####:  244:		   (int)(total/n_used),
    #####:  245:		   (int)((total%n_used)*100/n_used));
        -:  246:	}
        -:  247:
        -:  248:#endif
