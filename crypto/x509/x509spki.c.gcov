        -:    0:Source:x509spki.c
        -:    0:Graph:x509spki.gcno
        -:    0:Data:x509spki.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* x509spki.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 1999.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/x509.h>
        -:   62:
    #####:   63:int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey)
        -:   64:{
    #####:   65:	if ((x == NULL) || (x->spkac == NULL)) return(0);
    #####:   66:	return(X509_PUBKEY_set(&(x->spkac->pubkey),pkey));
        -:   67:}
        -:   68:
    #####:   69:EVP_PKEY *NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x)
        -:   70:{
    #####:   71:	if ((x == NULL) || (x->spkac == NULL))
        -:   72:		return(NULL);
    #####:   73:	return(X509_PUBKEY_get(x->spkac->pubkey));
        -:   74:}
        -:   75:
        -:   76:/* Load a Netscape SPKI from a base64 encoded string */
        -:   77:
    #####:   78:NETSCAPE_SPKI * NETSCAPE_SPKI_b64_decode(const char *str, int len)
        -:   79:{
        -:   80:	unsigned char *spki_der;
        -:   81:	const unsigned char *p;
        -:   82:	int spki_len;
        -:   83:	NETSCAPE_SPKI *spki;
    #####:   84:	if(len <= 0) len = strlen(str);
    #####:   85:	if (!(spki_der = OPENSSL_malloc(len + 1))) {
    #####:   86:		X509err(X509_F_NETSCAPE_SPKI_B64_DECODE, ERR_R_MALLOC_FAILURE);
    #####:   87:		return NULL;
        -:   88:	}
    #####:   89:	spki_len = EVP_DecodeBlock(spki_der, (const unsigned char *)str, len);
    #####:   90:	if(spki_len < 0) {
    #####:   91:		X509err(X509_F_NETSCAPE_SPKI_B64_DECODE,
        -:   92:						X509_R_BASE64_DECODE_ERROR);
    #####:   93:		OPENSSL_free(spki_der);
    #####:   94:		return NULL;
        -:   95:	}
    #####:   96:	p = spki_der;
    #####:   97:	spki = d2i_NETSCAPE_SPKI(NULL, &p, spki_len);
    #####:   98:	OPENSSL_free(spki_der);
    #####:   99:	return spki;
        -:  100:}
        -:  101:
        -:  102:/* Generate a base64 encoded string from an SPKI */
        -:  103:
    #####:  104:char * NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *spki)
        -:  105:{
        -:  106:	unsigned char *der_spki, *p;
        -:  107:	char *b64_str;
        -:  108:	int der_len;
    #####:  109:	der_len = i2d_NETSCAPE_SPKI(spki, NULL);
    #####:  110:	der_spki = OPENSSL_malloc(der_len);
    #####:  111:	b64_str = OPENSSL_malloc(der_len * 2);
    #####:  112:	if(!der_spki || !b64_str) {
    #####:  113:		X509err(X509_F_NETSCAPE_SPKI_B64_ENCODE, ERR_R_MALLOC_FAILURE);
    #####:  114:		return NULL;
        -:  115:	}
    #####:  116:	p = der_spki;
    #####:  117:	i2d_NETSCAPE_SPKI(spki, &p);
    #####:  118:	EVP_EncodeBlock((unsigned char *)b64_str, der_spki, der_len);
    #####:  119:	OPENSSL_free(der_spki);
    #####:  120:	return b64_str;
        -:  121:}
