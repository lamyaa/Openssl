        -:    0:Source:x509cset.c
        -:    0:Graph:x509cset.gcno
        -:    0:Data:x509cset.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/x509/x509cset.c */
        -:    2:/* Written by Dr Stephen N Henson (steve@openssl.org) for the OpenSSL
        -:    3: * project 2001.
        -:    4: */
        -:    5:/* ====================================================================
        -:    6: * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.
        -:    7: *
        -:    8: * Redistribution and use in source and binary forms, with or without
        -:    9: * modification, are permitted provided that the following conditions
        -:   10: * are met:
        -:   11: *
        -:   12: * 1. Redistributions of source code must retain the above copyright
        -:   13: *    notice, this list of conditions and the following disclaimer. 
        -:   14: *
        -:   15: * 2. Redistributions in binary form must reproduce the above copyright
        -:   16: *    notice, this list of conditions and the following disclaimer in
        -:   17: *    the documentation and/or other materials provided with the
        -:   18: *    distribution.
        -:   19: *
        -:   20: * 3. All advertising materials mentioning features or use of this
        -:   21: *    software must display the following acknowledgment:
        -:   22: *    "This product includes software developed by the OpenSSL Project
        -:   23: *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
        -:   24: *
        -:   25: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   26: *    endorse or promote products derived from this software without
        -:   27: *    prior written permission. For written permission, please contact
        -:   28: *    licensing@OpenSSL.org.
        -:   29: *
        -:   30: * 5. Products derived from this software may not be called "OpenSSL"
        -:   31: *    nor may "OpenSSL" appear in their names without prior written
        -:   32: *    permission of the OpenSSL Project.
        -:   33: *
        -:   34: * 6. Redistributions of any form whatsoever must retain the following
        -:   35: *    acknowledgment:
        -:   36: *    "This product includes software developed by the OpenSSL Project
        -:   37: *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
        -:   38: *
        -:   39: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   40: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   41: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   42: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   43: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   44: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   45: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   46: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   47: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   48: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   49: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:   50: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   51: * ====================================================================
        -:   52: *
        -:   53: * This product includes cryptographic software written by Eric Young
        -:   54: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:   55: * Hudson (tjh@cryptsoft.com).
        -:   56: *
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/asn1.h>
        -:   62:#include <openssl/objects.h>
        -:   63:#include <openssl/evp.h>
        -:   64:#include <openssl/x509.h>
        -:   65:
    #####:   66:int X509_CRL_set_version(X509_CRL *x, long version)
        -:   67:	{
    #####:   68:	if (x == NULL) return(0);
    #####:   69:	if (x->crl->version == NULL)
        -:   70:		{
    #####:   71:		if ((x->crl->version=M_ASN1_INTEGER_new()) == NULL)
        -:   72:			return(0);
        -:   73:		}
    #####:   74:	return(ASN1_INTEGER_set(x->crl->version,version));
        -:   75:	}
        -:   76:
    #####:   77:int X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name)
        -:   78:	{
    #####:   79:	if ((x == NULL) || (x->crl == NULL)) return(0);
    #####:   80:	return(X509_NAME_set(&x->crl->issuer,name));
        -:   81:	}
        -:   82:
        -:   83:
    #####:   84:int X509_CRL_set_lastUpdate(X509_CRL *x, const ASN1_TIME *tm)
        -:   85:	{
        -:   86:	ASN1_TIME *in;
        -:   87:
    #####:   88:	if (x == NULL) return(0);
    #####:   89:	in=x->crl->lastUpdate;
    #####:   90:	if (in != tm)
        -:   91:		{
    #####:   92:		in=M_ASN1_TIME_dup(tm);
    #####:   93:		if (in != NULL)
        -:   94:			{
    #####:   95:			M_ASN1_TIME_free(x->crl->lastUpdate);
    #####:   96:			x->crl->lastUpdate=in;
        -:   97:			}
        -:   98:		}
    #####:   99:	return(in != NULL);
        -:  100:	}
        -:  101:
    #####:  102:int X509_CRL_set_nextUpdate(X509_CRL *x, const ASN1_TIME *tm)
        -:  103:	{
        -:  104:	ASN1_TIME *in;
        -:  105:
    #####:  106:	if (x == NULL) return(0);
    #####:  107:	in=x->crl->nextUpdate;
    #####:  108:	if (in != tm)
        -:  109:		{
    #####:  110:		in=M_ASN1_TIME_dup(tm);
    #####:  111:		if (in != NULL)
        -:  112:			{
    #####:  113:			M_ASN1_TIME_free(x->crl->nextUpdate);
    #####:  114:			x->crl->nextUpdate=in;
        -:  115:			}
        -:  116:		}
    #####:  117:	return(in != NULL);
        -:  118:	}
        -:  119:
    #####:  120:int X509_CRL_sort(X509_CRL *c)
        -:  121:	{
        -:  122:	int i;
        -:  123:	X509_REVOKED *r;
        -:  124:	/* sort the data so it will be written in serial
        -:  125:	 * number order */
    #####:  126:	sk_X509_REVOKED_sort(c->crl->revoked);
    #####:  127:	for (i=0; i<sk_X509_REVOKED_num(c->crl->revoked); i++)
        -:  128:		{
    #####:  129:		r=sk_X509_REVOKED_value(c->crl->revoked,i);
    #####:  130:		r->sequence=i;
        -:  131:		}
    #####:  132:	c->crl->enc.modified = 1;
    #####:  133:	return 1;
        -:  134:	}
        -:  135:
    #####:  136:int X509_REVOKED_set_revocationDate(X509_REVOKED *x, ASN1_TIME *tm)
        -:  137:	{
        -:  138:	ASN1_TIME *in;
        -:  139:
    #####:  140:	if (x == NULL) return(0);
    #####:  141:	in=x->revocationDate;
    #####:  142:	if (in != tm)
        -:  143:		{
    #####:  144:		in=M_ASN1_TIME_dup(tm);
    #####:  145:		if (in != NULL)
        -:  146:			{
    #####:  147:			M_ASN1_TIME_free(x->revocationDate);
    #####:  148:			x->revocationDate=in;
        -:  149:			}
        -:  150:		}
    #####:  151:	return(in != NULL);
        -:  152:	}
        -:  153:
    #####:  154:int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial)
        -:  155:	{
        -:  156:	ASN1_INTEGER *in;
        -:  157:
    #####:  158:	if (x == NULL) return(0);
    #####:  159:	in=x->serialNumber;
    #####:  160:	if (in != serial)
        -:  161:		{
    #####:  162:		in=M_ASN1_INTEGER_dup(serial);
    #####:  163:		if (in != NULL)
        -:  164:			{
    #####:  165:			M_ASN1_INTEGER_free(x->serialNumber);
    #####:  166:			x->serialNumber=in;
        -:  167:			}
        -:  168:		}
    #####:  169:	return(in != NULL);
        -:  170:	}
