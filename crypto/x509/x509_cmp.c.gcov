        -:    0:Source:x509_cmp.c
        -:    0:Graph:x509_cmp.gcno
        -:    0:Data:x509_cmp.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/* crypto/x509/x509_cmp.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include <ctype.h>
        -:   61:#include "cryptlib.h"
        -:   62:#include <openssl/asn1.h>
        -:   63:#include <openssl/objects.h>
        -:   64:#include <openssl/x509.h>
        -:   65:#include <openssl/x509v3.h>
        -:   66:
    #####:   67:int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)
        -:   68:	{
        -:   69:	int i;
        -:   70:	X509_CINF *ai,*bi;
        -:   71:
    #####:   72:	ai=a->cert_info;
    #####:   73:	bi=b->cert_info;
    #####:   74:	i=M_ASN1_INTEGER_cmp(ai->serialNumber,bi->serialNumber);
    #####:   75:	if (i) return(i);
    #####:   76:	return(X509_NAME_cmp(ai->issuer,bi->issuer));
        -:   77:	}
        -:   78:
        -:   79:#ifndef OPENSSL_NO_MD5
    #####:   80:unsigned long X509_issuer_and_serial_hash(X509 *a)
        -:   81:	{
        -:   82:	unsigned long ret=0;
        -:   83:	EVP_MD_CTX ctx;
        -:   84:	unsigned char md[16];
        -:   85:	char *f;
        -:   86:
    #####:   87:	EVP_MD_CTX_init(&ctx);
    #####:   88:	f=X509_NAME_oneline(a->cert_info->issuer,NULL,0);
    #####:   89:	if (!EVP_DigestInit_ex(&ctx, EVP_md5(), NULL))
        -:   90:		goto err;
    #####:   91:	if (!EVP_DigestUpdate(&ctx,(unsigned char *)f,strlen(f)))
        -:   92:		goto err;
    #####:   93:	OPENSSL_free(f);
    #####:   94:	if(!EVP_DigestUpdate(&ctx,(unsigned char *)a->cert_info->serialNumber->data,
    #####:   95:		(unsigned long)a->cert_info->serialNumber->length))
        -:   96:		goto err;
    #####:   97:	if (!EVP_DigestFinal_ex(&ctx,&(md[0]),NULL))
        -:   98:		goto err;
    #####:   99:	ret=(	((unsigned long)md[0]     )|((unsigned long)md[1]<<8L)|
    #####:  100:		((unsigned long)md[2]<<16L)|((unsigned long)md[3]<<24L)
        -:  101:		)&0xffffffffL;
        -:  102:	err:
    #####:  103:	EVP_MD_CTX_cleanup(&ctx);
    #####:  104:	return(ret);
        -:  105:	}
        -:  106:#endif
        -:  107:	
    #####:  108:int X509_issuer_name_cmp(const X509 *a, const X509 *b)
        -:  109:	{
    #####:  110:	return(X509_NAME_cmp(a->cert_info->issuer,b->cert_info->issuer));
        -:  111:	}
        -:  112:
        2:  113:int X509_subject_name_cmp(const X509 *a, const X509 *b)
        -:  114:	{
        2:  115:	return(X509_NAME_cmp(a->cert_info->subject,b->cert_info->subject));
        -:  116:	}
        -:  117:
    #####:  118:int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)
        -:  119:	{
    #####:  120:	return(X509_NAME_cmp(a->crl->issuer,b->crl->issuer));
        -:  121:	}
        -:  122:
        -:  123:#ifndef OPENSSL_NO_SHA
    #####:  124:int X509_CRL_match(const X509_CRL *a, const X509_CRL *b)
        -:  125:	{
    #####:  126:	return memcmp(a->sha1_hash, b->sha1_hash, 20);
        -:  127:	}
        -:  128:#endif
        -:  129:
       22:  130:X509_NAME *X509_get_issuer_name(X509 *a)
        -:  131:	{
       22:  132:	return(a->cert_info->issuer);
        -:  133:	}
        -:  134:
    #####:  135:unsigned long X509_issuer_name_hash(X509 *x)
        -:  136:	{
    #####:  137:	return(X509_NAME_hash(x->cert_info->issuer));
        -:  138:	}
        -:  139:
        -:  140:#ifndef OPENSSL_NO_MD5
    #####:  141:unsigned long X509_issuer_name_hash_old(X509 *x)
        -:  142:	{
    #####:  143:	return(X509_NAME_hash_old(x->cert_info->issuer));
        -:  144:	}
        -:  145:#endif
        -:  146:
       23:  147:X509_NAME *X509_get_subject_name(X509 *a)
        -:  148:	{
       23:  149:	return(a->cert_info->subject);
        -:  150:	}
        -:  151:
    #####:  152:ASN1_INTEGER *X509_get_serialNumber(X509 *a)
        -:  153:	{
    #####:  154:	return(a->cert_info->serialNumber);
        -:  155:	}
        -:  156:
        4:  157:unsigned long X509_subject_name_hash(X509 *x)
        -:  158:	{
        4:  159:	return(X509_NAME_hash(x->cert_info->subject));
        -:  160:	}
        -:  161:
        -:  162:#ifndef OPENSSL_NO_MD5
    #####:  163:unsigned long X509_subject_name_hash_old(X509 *x)
        -:  164:	{
    #####:  165:	return(X509_NAME_hash_old(x->cert_info->subject));
        -:  166:	}
        -:  167:#endif
        -:  168:
        -:  169:#ifndef OPENSSL_NO_SHA
        -:  170:/* Compare two certificates: they must be identical for
        -:  171: * this to work. NB: Although "cmp" operations are generally
        -:  172: * prototyped to take "const" arguments (eg. for use in
        -:  173: * STACKs), the way X509 handling is - these operations may
        -:  174: * involve ensuring the hashes are up-to-date and ensuring
        -:  175: * certain cert information is cached. So this is the point
        -:  176: * where the "depth-first" constification tree has to halt
        -:  177: * with an evil cast.
        -:  178: */
    #####:  179:int X509_cmp(const X509 *a, const X509 *b)
        -:  180:{
        -:  181:	/* ensure hash is valid */
    #####:  182:	X509_check_purpose((X509 *)a, -1, 0);
    #####:  183:	X509_check_purpose((X509 *)b, -1, 0);
        -:  184:
    #####:  185:	return memcmp(a->sha1_hash, b->sha1_hash, SHA_DIGEST_LENGTH);
        -:  186:}
        -:  187:#endif
        -:  188:
        -:  189:
       20:  190:int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
        -:  191:	{
        -:  192:	int ret;
        -:  193:
        -:  194:	/* Ensure canonical encoding is present and up to date */
        -:  195:
       20:  196:	if (!a->canon_enc || a->modified)
        -:  197:		{
    #####:  198:		ret = i2d_X509_NAME((X509_NAME *)a, NULL);
    #####:  199:		if (ret < 0)
        -:  200:			return -2;
        -:  201:		}
        -:  202:
       20:  203:	if (!b->canon_enc || b->modified)
        -:  204:		{
    #####:  205:		ret = i2d_X509_NAME((X509_NAME *)b, NULL);
    #####:  206:		if (ret < 0)
        -:  207:			return -2;
        -:  208:		}
        -:  209:
       20:  210:	ret = a->canon_enclen - b->canon_enclen;
        -:  211:
       20:  212:	if (ret)
        -:  213:		return ret;
        -:  214:
       11:  215:	return memcmp(a->canon_enc, b->canon_enc, a->canon_enclen);
        -:  216:
        -:  217:	}
        -:  218:
        4:  219:unsigned long X509_NAME_hash(X509_NAME *x)
        -:  220:	{
        -:  221:	unsigned long ret=0;
        -:  222:	unsigned char md[SHA_DIGEST_LENGTH];
        -:  223:
        -:  224:	/* Make sure X509_NAME structure contains valid cached encoding */
        4:  225:	i2d_X509_NAME(x,NULL);
        4:  226:	if (!EVP_Digest(x->canon_enc, x->canon_enclen, md, NULL, EVP_sha1(),
        -:  227:		NULL))
        -:  228:		return 0;
        -:  229:
       12:  230:	ret=(	((unsigned long)md[0]     )|((unsigned long)md[1]<<8L)|
        8:  231:		((unsigned long)md[2]<<16L)|((unsigned long)md[3]<<24L)
        -:  232:		)&0xffffffffL;
        4:  233:	return(ret);
        -:  234:	}
        -:  235:
        -:  236:
        -:  237:#ifndef OPENSSL_NO_MD5
        -:  238:/* I now DER encode the name and hash it.  Since I cache the DER encoding,
        -:  239: * this is reasonably efficient. */
        -:  240:
    #####:  241:unsigned long X509_NAME_hash_old(X509_NAME *x)
        -:  242:	{
        -:  243:	EVP_MD_CTX md_ctx;
        -:  244:	unsigned long ret=0;
        -:  245:	unsigned char md[16];
        -:  246:
        -:  247:	/* Make sure X509_NAME structure contains valid cached encoding */
    #####:  248:	i2d_X509_NAME(x,NULL);
    #####:  249:	EVP_MD_CTX_init(&md_ctx);
    #####:  250:	EVP_MD_CTX_set_flags(&md_ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
    #####:  251:	if (EVP_DigestInit_ex(&md_ctx, EVP_md5(), NULL)
    #####:  252:	    && EVP_DigestUpdate(&md_ctx, x->bytes->data, x->bytes->length)
    #####:  253:	    && EVP_DigestFinal_ex(&md_ctx,md,NULL))
    #####:  254:		ret=(((unsigned long)md[0]     )|((unsigned long)md[1]<<8L)|
    #####:  255:		     ((unsigned long)md[2]<<16L)|((unsigned long)md[3]<<24L)
        -:  256:		     )&0xffffffffL;
    #####:  257:	EVP_MD_CTX_cleanup(&md_ctx);
        -:  258:
    #####:  259:	return(ret);
        -:  260:	}
        -:  261:#endif
        -:  262:
        -:  263:/* Search a stack of X509 for a match */
    #####:  264:X509 *X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name,
        -:  265:		ASN1_INTEGER *serial)
        -:  266:	{
        -:  267:	int i;
        -:  268:	X509_CINF cinf;
        -:  269:	X509 x,*x509=NULL;
        -:  270:
    #####:  271:	if(!sk) return NULL;
        -:  272:
    #####:  273:	x.cert_info= &cinf;
    #####:  274:	cinf.serialNumber=serial;
    #####:  275:	cinf.issuer=name;
        -:  276:
    #####:  277:	for (i=0; i<sk_X509_num(sk); i++)
        -:  278:		{
    #####:  279:		x509=sk_X509_value(sk,i);
    #####:  280:		if (X509_issuer_and_serial_cmp(x509,&x) == 0)
        -:  281:			return(x509);
        -:  282:		}
        -:  283:	return(NULL);
        -:  284:	}
        -:  285:
    #####:  286:X509 *X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name)
        -:  287:	{
        -:  288:	X509 *x509;
        -:  289:	int i;
        -:  290:
    #####:  291:	for (i=0; i<sk_X509_num(sk); i++)
        -:  292:		{
    #####:  293:		x509=sk_X509_value(sk,i);
    #####:  294:		if (X509_NAME_cmp(X509_get_subject_name(x509),name) == 0)
        -:  295:			return(x509);
        -:  296:		}
        -:  297:	return(NULL);
        -:  298:	}
        -:  299:
        5:  300:EVP_PKEY *X509_get_pubkey(X509 *x)
        -:  301:	{
        5:  302:	if ((x == NULL) || (x->cert_info == NULL))
        -:  303:		return(NULL);
        5:  304:	return(X509_PUBKEY_get(x->cert_info->key));
        -:  305:	}
        -:  306:
    #####:  307:ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x)
        -:  308:	{
    #####:  309:	if(!x) return NULL;
    #####:  310:	return x->cert_info->key->public_key;
        -:  311:	}
        -:  312:
    #####:  313:int X509_check_private_key(X509 *x, EVP_PKEY *k)
        -:  314:	{
        -:  315:	EVP_PKEY *xk;
        -:  316:	int ret;
        -:  317:
    #####:  318:	xk=X509_get_pubkey(x);
        -:  319:
    #####:  320:	if (xk)
    #####:  321:		ret = EVP_PKEY_cmp(xk, k);
        -:  322:	else
        -:  323:		ret = -2;
        -:  324:
    #####:  325:	switch (ret)
        -:  326:		{
        -:  327:	case 1:
        -:  328:		break;
        -:  329:	case 0:
    #####:  330:		X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_VALUES_MISMATCH);
    #####:  331:		break;
        -:  332:	case -1:
    #####:  333:		X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_KEY_TYPE_MISMATCH);
    #####:  334:		break;
        -:  335:	case -2:
    #####:  336:	        X509err(X509_F_X509_CHECK_PRIVATE_KEY,X509_R_UNKNOWN_KEY_TYPE);
        -:  337:		}
    #####:  338:	if (xk)
    #####:  339:		EVP_PKEY_free(xk);
    #####:  340:	if (ret > 0)
        -:  341:		return 1;
    #####:  342:	return 0;
        -:  343:	}
