        -:    0:Source:names.c
        -:    0:Graph:names.gcno
        -:    0:Data:names.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* crypto/evp/names.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include "cryptlib.h"
        -:   61:#include <openssl/evp.h>
        -:   62:#include <openssl/objects.h>
        -:   63:#include <openssl/x509.h>
        -:   64:
  1070000:   65:int EVP_add_cipher(const EVP_CIPHER *c)
        -:   66:	{
        -:   67:	int r;
        -:   68:
  1070000:   69:	if (c == NULL) return 0;
        -:   70:
  1070000:   71:	OPENSSL_init();
        -:   72:
  1070000:   73:	r=OBJ_NAME_add(OBJ_nid2sn(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(const char *)c);
  1070000:   74:	if (r == 0) return(0);
  1070000:   75:	check_defer(c->nid);
  1070000:   76:	r=OBJ_NAME_add(OBJ_nid2ln(c->nid),OBJ_NAME_TYPE_CIPHER_METH,(const char *)c);
  1070000:   77:	return(r);
        -:   78:	}
        -:   79:
        -:   80:
   240000:   81:int EVP_add_digest(const EVP_MD *md)
        -:   82:	{
        -:   83:	int r;
        -:   84:	const char *name;
   240000:   85:	OPENSSL_init();
        -:   86:
   240000:   87:	name=OBJ_nid2sn(md->type);
   240000:   88:	r=OBJ_NAME_add(name,OBJ_NAME_TYPE_MD_METH,(const char *)md);
   240000:   89:	if (r == 0) return(0);
   240000:   90:	check_defer(md->type);
   240000:   91:	r=OBJ_NAME_add(OBJ_nid2ln(md->type),OBJ_NAME_TYPE_MD_METH,(const char *)md);
   240000:   92:	if (r == 0) return(0);
        -:   93:
   240000:   94:	if (md->pkey_type && md->type != md->pkey_type)
        -:   95:		{
   180000:   96:		r=OBJ_NAME_add(OBJ_nid2sn(md->pkey_type),
        -:   97:			OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,name);
   180000:   98:		if (r == 0) return(0);
   180000:   99:		check_defer(md->pkey_type);
   180000:  100:		r=OBJ_NAME_add(OBJ_nid2ln(md->pkey_type),
        -:  101:			OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS,name);
        -:  102:		}
   240000:  103:	return(r);
        -:  104:	}
        -:  105:
   130000:  106:const EVP_CIPHER *EVP_get_cipherbyname(const char *name)
        -:  107:	{
        -:  108:	const EVP_CIPHER *cp;
        -:  109:
   130000:  110:	cp=(const EVP_CIPHER *)OBJ_NAME_get(name,OBJ_NAME_TYPE_CIPHER_METH);
   130000:  111:	return(cp);
        -:  112:	}
        -:  113:
    91942:  114:const EVP_MD *EVP_get_digestbyname(const char *name)
        -:  115:	{
        -:  116:	const EVP_MD *cp;
        -:  117:
    91942:  118:	cp=(const EVP_MD *)OBJ_NAME_get(name,OBJ_NAME_TYPE_MD_METH);
    91942:  119:	return(cp);
        -:  120:	}
        -:  121:
    10000:  122:void EVP_cleanup(void)
        -:  123:	{
    10000:  124:	OBJ_NAME_cleanup(OBJ_NAME_TYPE_CIPHER_METH);
    10000:  125:	OBJ_NAME_cleanup(OBJ_NAME_TYPE_MD_METH);
        -:  126:	/* The above calls will only clean out the contents of the name
        -:  127:	   hash table, but not the hash table itself.  The following line
        -:  128:	   does that part.  -- Richard Levitte */
    10000:  129:	OBJ_NAME_cleanup(-1);
        -:  130:
    10000:  131:	EVP_PBE_cleanup();
    10000:  132:	if (obj_cleanup_defer == 2)
        -:  133:		{
    #####:  134:		obj_cleanup_defer = 0;
    #####:  135:		OBJ_cleanup();
        -:  136:		}
    10000:  137:	OBJ_sigid_free();
    10000:  138:	}
        -:  139:
        -:  140:struct doall_cipher
        -:  141:	{
        -:  142:	void *arg;
        -:  143:	void (*fn)(const EVP_CIPHER *ciph,
        -:  144:			const char *from, const char *to, void *arg);
        -:  145:	};
        -:  146:
    #####:  147:static void do_all_cipher_fn(const OBJ_NAME *nm, void *arg)
        -:  148:	{
        -:  149:	struct doall_cipher *dc = arg;
    #####:  150:	if (nm->alias)
    #####:  151:		dc->fn(NULL, nm->name, nm->data, dc->arg);
        -:  152:	else
    #####:  153:		dc->fn((const EVP_CIPHER *)nm->data, nm->name, NULL, dc->arg);
    #####:  154:	}
        -:  155:
    #####:  156:void EVP_CIPHER_do_all(void (*fn)(const EVP_CIPHER *ciph,
        -:  157:		const char *from, const char *to, void *x), void *arg)
        -:  158:	{
        -:  159:	struct doall_cipher dc;
    #####:  160:	dc.fn = fn;
    #####:  161:	dc.arg = arg;
    #####:  162:	OBJ_NAME_do_all(OBJ_NAME_TYPE_CIPHER_METH, do_all_cipher_fn, &dc);
    #####:  163:	}
        -:  164:
    #####:  165:void EVP_CIPHER_do_all_sorted(void (*fn)(const EVP_CIPHER *ciph,
        -:  166:		const char *from, const char *to, void *x), void *arg)
        -:  167:	{
        -:  168:	struct doall_cipher dc;
    #####:  169:	dc.fn = fn;
    #####:  170:	dc.arg = arg;
    #####:  171:	OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH, do_all_cipher_fn,&dc);
    #####:  172:	}
        -:  173:
        -:  174:struct doall_md
        -:  175:	{
        -:  176:	void *arg;
        -:  177:	void (*fn)(const EVP_MD *ciph,
        -:  178:			const char *from, const char *to, void *arg);
        -:  179:	};
        -:  180:
    #####:  181:static void do_all_md_fn(const OBJ_NAME *nm, void *arg)
        -:  182:	{
        -:  183:	struct doall_md *dc = arg;
    #####:  184:	if (nm->alias)
    #####:  185:		dc->fn(NULL, nm->name, nm->data, dc->arg);
        -:  186:	else
    #####:  187:		dc->fn((const EVP_MD *)nm->data, nm->name, NULL, dc->arg);
    #####:  188:	}
        -:  189:
    #####:  190:void EVP_MD_do_all(void (*fn)(const EVP_MD *md,
        -:  191:		const char *from, const char *to, void *x), void *arg)
        -:  192:	{
        -:  193:	struct doall_md dc;
    #####:  194:	dc.fn = fn;
    #####:  195:	dc.arg = arg;
    #####:  196:	OBJ_NAME_do_all(OBJ_NAME_TYPE_MD_METH, do_all_md_fn, &dc);
    #####:  197:	}
        -:  198:
    #####:  199:void EVP_MD_do_all_sorted(void (*fn)(const EVP_MD *md,
        -:  200:		const char *from, const char *to, void *x), void *arg)
        -:  201:	{
        -:  202:	struct doall_md dc;
    #####:  203:	dc.fn = fn;
    #####:  204:	dc.arg = arg;
    #####:  205:	OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_MD_METH, do_all_md_fn, &dc);
    #####:  206:	}
