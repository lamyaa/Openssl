        -:    0:Source:ssl_cert.c
        -:    0:Graph:ssl_cert.gcno
        -:    0:Data:ssl_cert.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/*! \file ssl/ssl_cert.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:/* ====================================================================
        -:   59: * Copyright (c) 1998-2007 The OpenSSL Project.  All rights reserved.
        -:   60: *
        -:   61: * Redistribution and use in source and binary forms, with or without
        -:   62: * modification, are permitted provided that the following conditions
        -:   63: * are met:
        -:   64: *
        -:   65: * 1. Redistributions of source code must retain the above copyright
        -:   66: *    notice, this list of conditions and the following disclaimer. 
        -:   67: *
        -:   68: * 2. Redistributions in binary form must reproduce the above copyright
        -:   69: *    notice, this list of conditions and the following disclaimer in
        -:   70: *    the documentation and/or other materials provided with the
        -:   71: *    distribution.
        -:   72: *
        -:   73: * 3. All advertising materials mentioning features or use of this
        -:   74: *    software must display the following acknowledgment:
        -:   75: *    "This product includes software developed by the OpenSSL Project
        -:   76: *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
        -:   77: *
        -:   78: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   79: *    endorse or promote products derived from this software without
        -:   80: *    prior written permission. For written permission, please contact
        -:   81: *    openssl-core@openssl.org.
        -:   82: *
        -:   83: * 5. Products derived from this software may not be called "OpenSSL"
        -:   84: *    nor may "OpenSSL" appear in their names without prior written
        -:   85: *    permission of the OpenSSL Project.
        -:   86: *
        -:   87: * 6. Redistributions of any form whatsoever must retain the following
        -:   88: *    acknowledgment:
        -:   89: *    "This product includes software developed by the OpenSSL Project
        -:   90: *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
        -:   91: *
        -:   92: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   93: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   94: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   95: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   96: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   97: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   98: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   99: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:  100: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:  101: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:  102: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:  103: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  104: * ====================================================================
        -:  105: *
        -:  106: * This product includes cryptographic software written by Eric Young
        -:  107: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:  108: * Hudson (tjh@cryptsoft.com).
        -:  109: *
        -:  110: */
        -:  111:/* ====================================================================
        -:  112: * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
        -:  113: * ECC cipher suite support in OpenSSL originally developed by 
        -:  114: * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
        -:  115: */
        -:  116:
        -:  117:#include <stdio.h>
        -:  118:
        -:  119:#include "e_os.h"
        -:  120:#ifndef NO_SYS_TYPES_H
        -:  121:# include <sys/types.h>
        -:  122:#endif
        -:  123:
        -:  124:#include "o_dir.h"
        -:  125:#include <openssl/objects.h>
        -:  126:#include <openssl/bio.h>
        -:  127:#include <openssl/pem.h>
        -:  128:#include <openssl/x509v3.h>
        -:  129:#ifndef OPENSSL_NO_DH
        -:  130:#include <openssl/dh.h>
        -:  131:#endif
        -:  132:#include <openssl/bn.h>
        -:  133:#include "ssl_locl.h"
        -:  134:
    20000:  135:int SSL_get_ex_data_X509_STORE_CTX_idx(void)
        -:  136:	{
        -:  137:	static volatile int ssl_x509_store_ctx_idx= -1;
        -:  138:	int got_write_lock = 0;
        -:  139:
    20000:  140:	CRYPTO_r_lock(CRYPTO_LOCK_SSL_CTX);
        -:  141:
    20000:  142:	if (ssl_x509_store_ctx_idx < 0)
        -:  143:		{
    10000:  144:		CRYPTO_r_unlock(CRYPTO_LOCK_SSL_CTX);
    10000:  145:		CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
        -:  146:		got_write_lock = 1;
        -:  147:		
    10000:  148:		if (ssl_x509_store_ctx_idx < 0)
        -:  149:			{
    10000:  150:			ssl_x509_store_ctx_idx=X509_STORE_CTX_get_ex_new_index(
        -:  151:				0,"SSL for verify callback",NULL,NULL,NULL);
        -:  152:			}
        -:  153:		}
        -:  154:
    20000:  155:	if (got_write_lock)
    10000:  156:		CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
        -:  157:	else
    10000:  158:		CRYPTO_r_unlock(CRYPTO_LOCK_SSL_CTX);
        -:  159:	
    20000:  160:	return ssl_x509_store_ctx_idx;
        -:  161:	}
        -:  162:
    20000:  163:static void ssl_cert_set_default_md(CERT *cert)
        -:  164:	{
        -:  165:	/* Set digest values to defaults */
        -:  166:#ifndef OPENSSL_NO_DSA
    20000:  167:	cert->pkeys[SSL_PKEY_DSA_SIGN].digest = EVP_sha1();
        -:  168:#endif
        -:  169:#ifndef OPENSSL_NO_RSA
    20000:  170:	cert->pkeys[SSL_PKEY_RSA_SIGN].digest = EVP_sha1();
    20000:  171:	cert->pkeys[SSL_PKEY_RSA_ENC].digest = EVP_sha1();
        -:  172:#endif
        -:  173:#ifndef OPENSSL_NO_ECDSA
    20000:  174:	cert->pkeys[SSL_PKEY_ECC].digest = EVP_sha1();
        -:  175:#endif
    20000:  176:	}
        -:  177:
    10000:  178:CERT *ssl_cert_new(void)
        -:  179:	{
        -:  180:	CERT *ret;
        -:  181:
    10000:  182:	ret=(CERT *)OPENSSL_malloc(sizeof(CERT));
    10000:  183:	if (ret == NULL)
        -:  184:		{
    #####:  185:		SSLerr(SSL_F_SSL_CERT_NEW,ERR_R_MALLOC_FAILURE);
    #####:  186:		return(NULL);
        -:  187:		}
        -:  188:	memset(ret,0,sizeof(CERT));
        -:  189:
    10000:  190:	ret->key= &(ret->pkeys[SSL_PKEY_RSA_ENC]);
    10000:  191:	ret->references=1;
    10000:  192:	ssl_cert_set_default_md(ret);
    10000:  193:	return(ret);
        -:  194:	}
        -:  195:
    10000:  196:CERT *ssl_cert_dup(CERT *cert)
        -:  197:	{
        -:  198:	CERT *ret;
        -:  199:	int i;
        -:  200:
    10000:  201:	ret = (CERT *)OPENSSL_malloc(sizeof(CERT));
    10000:  202:	if (ret == NULL)
        -:  203:		{
    #####:  204:		SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_MALLOC_FAILURE);
    #####:  205:		return(NULL);
        -:  206:		}
        -:  207:
        -:  208:	memset(ret, 0, sizeof(CERT));
        -:  209:
    10000:  210:	ret->key = &ret->pkeys[cert->key - &cert->pkeys[0]];
        -:  211:	/* or ret->key = ret->pkeys + (cert->key - cert->pkeys),
        -:  212:	 * if you find that more readable */
        -:  213:
    10000:  214:	ret->valid = cert->valid;
    10000:  215:	ret->mask_k = cert->mask_k;
    10000:  216:	ret->mask_a = cert->mask_a;
    10000:  217:	ret->export_mask_k = cert->export_mask_k;
    10000:  218:	ret->export_mask_a = cert->export_mask_a;
        -:  219:
        -:  220:#ifndef OPENSSL_NO_RSA
    10000:  221:	if (cert->rsa_tmp != NULL)
        -:  222:		{
    #####:  223:		RSA_up_ref(cert->rsa_tmp);
    #####:  224:		ret->rsa_tmp = cert->rsa_tmp;
        -:  225:		}
    10000:  226:	ret->rsa_tmp_cb = cert->rsa_tmp_cb;
        -:  227:#endif
        -:  228:
        -:  229:#ifndef OPENSSL_NO_DH
    10000:  230:	if (cert->dh_tmp != NULL)
        -:  231:		{
    #####:  232:		ret->dh_tmp = DHparams_dup(cert->dh_tmp);
    #####:  233:		if (ret->dh_tmp == NULL)
        -:  234:			{
    #####:  235:			SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_DH_LIB);
    #####:  236:			goto err;
        -:  237:			}
    #####:  238:		if (cert->dh_tmp->priv_key)
        -:  239:			{
    #####:  240:			BIGNUM *b = BN_dup(cert->dh_tmp->priv_key);
    #####:  241:			if (!b)
        -:  242:				{
    #####:  243:				SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_BN_LIB);
    #####:  244:				goto err;
        -:  245:				}
    #####:  246:			ret->dh_tmp->priv_key = b;
        -:  247:			}
    #####:  248:		if (cert->dh_tmp->pub_key)
        -:  249:			{
    #####:  250:			BIGNUM *b = BN_dup(cert->dh_tmp->pub_key);
    #####:  251:			if (!b)
        -:  252:				{
    #####:  253:				SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_BN_LIB);
    #####:  254:				goto err;
        -:  255:				}
    #####:  256:			ret->dh_tmp->pub_key = b;
        -:  257:			}
        -:  258:		}
    10000:  259:	ret->dh_tmp_cb = cert->dh_tmp_cb;
        -:  260:#endif
        -:  261:
        -:  262:#ifndef OPENSSL_NO_ECDH
    10000:  263:	if (cert->ecdh_tmp)
        -:  264:		{
    #####:  265:		ret->ecdh_tmp = EC_KEY_dup(cert->ecdh_tmp);
    #####:  266:		if (ret->ecdh_tmp == NULL)
        -:  267:			{
    #####:  268:			SSLerr(SSL_F_SSL_CERT_DUP, ERR_R_EC_LIB);
    #####:  269:			goto err;
        -:  270:			}
        -:  271:		}
    10000:  272:	ret->ecdh_tmp_cb = cert->ecdh_tmp_cb;
        -:  273:#endif
        -:  274:
    90000:  275:	for (i = 0; i < SSL_PKEY_NUM; i++)
        -:  276:		{
    80000:  277:		if (cert->pkeys[i].x509 != NULL)
        -:  278:			{
    #####:  279:			ret->pkeys[i].x509 = cert->pkeys[i].x509;
    #####:  280:			CRYPTO_add(&ret->pkeys[i].x509->references, 1,
        -:  281:				CRYPTO_LOCK_X509);
        -:  282:			}
        -:  283:		
    80000:  284:		if (cert->pkeys[i].privatekey != NULL)
        -:  285:			{
    #####:  286:			ret->pkeys[i].privatekey = cert->pkeys[i].privatekey;
    #####:  287:			CRYPTO_add(&ret->pkeys[i].privatekey->references, 1,
        -:  288:				CRYPTO_LOCK_EVP_PKEY);
        -:  289:
    #####:  290:			switch(i) 
        -:  291:				{
        -:  292:				/* If there was anything special to do for
        -:  293:				 * certain types of keys, we'd do it here.
        -:  294:				 * (Nothing at the moment, I think.) */
        -:  295:
        -:  296:			case SSL_PKEY_RSA_ENC:
        -:  297:			case SSL_PKEY_RSA_SIGN:
        -:  298:				/* We have an RSA key. */
        -:  299:				break;
        -:  300:				
        -:  301:			case SSL_PKEY_DSA_SIGN:
        -:  302:				/* We have a DSA key. */
        -:  303:				break;
        -:  304:				
        -:  305:			case SSL_PKEY_DH_RSA:
        -:  306:			case SSL_PKEY_DH_DSA:
        -:  307:				/* We have a DH key. */
        -:  308:				break;
        -:  309:
        -:  310:			case SSL_PKEY_ECC:
        -:  311:				/* We have an ECC key */
        -:  312:				break;
        -:  313:
        -:  314:			default:
        -:  315:				/* Can't happen. */
    #####:  316:				SSLerr(SSL_F_SSL_CERT_DUP, SSL_R_LIBRARY_BUG);
        -:  317:				}
        -:  318:			}
        -:  319:		}
        -:  320:	
        -:  321:	/* ret->extra_certs *should* exist, but currently the own certificate
        -:  322:	 * chain is held inside SSL_CTX */
        -:  323:
    10000:  324:	ret->references=1;
        -:  325:	/* Set digests to defaults. NB: we don't copy existing values as they
        -:  326:	 * will be set during handshake.
        -:  327:	 */
    10000:  328:	ssl_cert_set_default_md(ret);
        -:  329:
    10000:  330:	return(ret);
        -:  331:	
        -:  332:#if !defined(OPENSSL_NO_DH) || !defined(OPENSSL_NO_ECDH)
        -:  333:err:
        -:  334:#endif
        -:  335:#ifndef OPENSSL_NO_RSA
    #####:  336:	if (ret->rsa_tmp != NULL)
    #####:  337:		RSA_free(ret->rsa_tmp);
        -:  338:#endif
        -:  339:#ifndef OPENSSL_NO_DH
    #####:  340:	if (ret->dh_tmp != NULL)
    #####:  341:		DH_free(ret->dh_tmp);
        -:  342:#endif
        -:  343:#ifndef OPENSSL_NO_ECDH
    #####:  344:	if (ret->ecdh_tmp != NULL)
    #####:  345:		EC_KEY_free(ret->ecdh_tmp);
        -:  346:#endif
        -:  347:
    #####:  348:	for (i = 0; i < SSL_PKEY_NUM; i++)
        -:  349:		{
    #####:  350:		if (ret->pkeys[i].x509 != NULL)
    #####:  351:			X509_free(ret->pkeys[i].x509);
    #####:  352:		if (ret->pkeys[i].privatekey != NULL)
    #####:  353:			EVP_PKEY_free(ret->pkeys[i].privatekey);
        -:  354:		}
        -:  355:
        -:  356:	return NULL;
        -:  357:	}
        -:  358:
        -:  359:
    20000:  360:void ssl_cert_free(CERT *c)
        -:  361:	{
        -:  362:	int i;
        -:  363:
    20000:  364:	if(c == NULL)
        -:  365:	    return;
        -:  366:
    20000:  367:	i=CRYPTO_add(&c->references,-1,CRYPTO_LOCK_SSL_CERT);
        -:  368:#ifdef REF_PRINT
        -:  369:	REF_PRINT("CERT",c);
        -:  370:#endif
    20000:  371:	if (i > 0) return;
        -:  372:#ifdef REF_CHECK
        -:  373:	if (i < 0)
        -:  374:		{
        -:  375:		fprintf(stderr,"ssl_cert_free, bad reference count\n");
        -:  376:		abort(); /* ok */
        -:  377:		}
        -:  378:#endif
        -:  379:
        -:  380:#ifndef OPENSSL_NO_RSA
    20000:  381:	if (c->rsa_tmp) RSA_free(c->rsa_tmp);
        -:  382:#endif
        -:  383:#ifndef OPENSSL_NO_DH
    20000:  384:	if (c->dh_tmp) DH_free(c->dh_tmp);
        -:  385:#endif
        -:  386:#ifndef OPENSSL_NO_ECDH
    20000:  387:	if (c->ecdh_tmp) EC_KEY_free(c->ecdh_tmp);
        -:  388:#endif
        -:  389:
   160000:  390:	for (i=0; i<SSL_PKEY_NUM; i++)
        -:  391:		{
   160000:  392:		if (c->pkeys[i].x509 != NULL)
    #####:  393:			X509_free(c->pkeys[i].x509);
   160000:  394:		if (c->pkeys[i].privatekey != NULL)
    #####:  395:			EVP_PKEY_free(c->pkeys[i].privatekey);
        -:  396:#if 0
        -:  397:		if (c->pkeys[i].publickey != NULL)
        -:  398:			EVP_PKEY_free(c->pkeys[i].publickey);
        -:  399:#endif
        -:  400:		}
    20000:  401:	OPENSSL_free(c);
        -:  402:	}
        -:  403:
    #####:  404:int ssl_cert_inst(CERT **o)
        -:  405:	{
        -:  406:	/* Create a CERT if there isn't already one
        -:  407:	 * (which cannot really happen, as it is initially created in
        -:  408:	 * SSL_CTX_new; but the earlier code usually allows for that one
        -:  409:	 * being non-existant, so we follow that behaviour, as it might
        -:  410:	 * turn out that there actually is a reason for it -- but I'm
        -:  411:	 * not sure that *all* of the existing code could cope with
        -:  412:	 * s->cert being NULL, otherwise we could do without the
        -:  413:	 * initialization in SSL_CTX_new).
        -:  414:	 */
        -:  415:	
    #####:  416:	if (o == NULL) 
        -:  417:		{
    #####:  418:		SSLerr(SSL_F_SSL_CERT_INST, ERR_R_PASSED_NULL_PARAMETER);
    #####:  419:		return(0);
        -:  420:		}
    #####:  421:	if (*o == NULL)
        -:  422:		{
    #####:  423:		if ((*o = ssl_cert_new()) == NULL)
        -:  424:			{
    #####:  425:			SSLerr(SSL_F_SSL_CERT_INST, ERR_R_MALLOC_FAILURE);
    #####:  426:			return(0);
        -:  427:			}
        -:  428:		}
        -:  429:	return(1);
        -:  430:	}
        -:  431:
        -:  432:
    10000:  433:SESS_CERT *ssl_sess_cert_new(void)
        -:  434:	{
        -:  435:	SESS_CERT *ret;
        -:  436:
    10000:  437:	ret = OPENSSL_malloc(sizeof *ret);
    10000:  438:	if (ret == NULL)
        -:  439:		{
    #####:  440:		SSLerr(SSL_F_SSL_SESS_CERT_NEW, ERR_R_MALLOC_FAILURE);
    #####:  441:		return NULL;
        -:  442:		}
        -:  443:
        -:  444:	memset(ret, 0 ,sizeof *ret);
    10000:  445:	ret->peer_key = &(ret->peer_pkeys[SSL_PKEY_RSA_ENC]);
    10000:  446:	ret->references = 1;
        -:  447:
    10000:  448:	return ret;
        -:  449:	}
        -:  450:
    10000:  451:void ssl_sess_cert_free(SESS_CERT *sc)
        -:  452:	{
        -:  453:	int i;
        -:  454:
    10000:  455:	if (sc == NULL)
        -:  456:		return;
        -:  457:
    10000:  458:	i = CRYPTO_add(&sc->references, -1, CRYPTO_LOCK_SSL_SESS_CERT);
        -:  459:#ifdef REF_PRINT
        -:  460:	REF_PRINT("SESS_CERT", sc);
        -:  461:#endif
    10000:  462:	if (i > 0)
        -:  463:		return;
        -:  464:#ifdef REF_CHECK
        -:  465:	if (i < 0)
        -:  466:		{
        -:  467:		fprintf(stderr,"ssl_sess_cert_free, bad reference count\n");
        -:  468:		abort(); /* ok */
        -:  469:		}
        -:  470:#endif
        -:  471:
        -:  472:	/* i == 0 */
    10000:  473:	if (sc->cert_chain != NULL)
    10000:  474:		sk_X509_pop_free(sc->cert_chain, X509_free);
    80000:  475:	for (i = 0; i < SSL_PKEY_NUM; i++)
        -:  476:		{
    80000:  477:		if (sc->peer_pkeys[i].x509 != NULL)
    10000:  478:			X509_free(sc->peer_pkeys[i].x509);
        -:  479:#if 0 /* We don't have the peer's private key.  These lines are just
        -:  480:	   * here as a reminder that we're still using a not-quite-appropriate
        -:  481:	   * data structure. */
        -:  482:		if (sc->peer_pkeys[i].privatekey != NULL)
        -:  483:			EVP_PKEY_free(sc->peer_pkeys[i].privatekey);
        -:  484:#endif
        -:  485:		}
        -:  486:
        -:  487:#ifndef OPENSSL_NO_RSA
    10000:  488:	if (sc->peer_rsa_tmp != NULL)
    #####:  489:		RSA_free(sc->peer_rsa_tmp);
        -:  490:#endif
        -:  491:#ifndef OPENSSL_NO_DH
    10000:  492:	if (sc->peer_dh_tmp != NULL)
    #####:  493:		DH_free(sc->peer_dh_tmp);
        -:  494:#endif
        -:  495:#ifndef OPENSSL_NO_ECDH
    10000:  496:	if (sc->peer_ecdh_tmp != NULL)
    #####:  497:		EC_KEY_free(sc->peer_ecdh_tmp);
        -:  498:#endif
        -:  499:
    10000:  500:	OPENSSL_free(sc);
        -:  501:	}
        -:  502:
    #####:  503:int ssl_set_peer_cert_type(SESS_CERT *sc,int type)
        -:  504:	{
    #####:  505:	sc->peer_cert_type = type;
    #####:  506:	return(1);
        -:  507:	}
        -:  508:
    10000:  509:int ssl_verify_cert_chain(SSL *s,STACK_OF(X509) *sk)
        -:  510:	{
        -:  511:	X509 *x;
        -:  512:	int i;
        -:  513:	X509_STORE_CTX ctx;
        -:  514:
    10000:  515:	if ((sk == NULL) || (sk_X509_num(sk) == 0))
        -:  516:		return(0);
        -:  517:
    10000:  518:	x=sk_X509_value(sk,0);
    10000:  519:	if(!X509_STORE_CTX_init(&ctx,s->ctx->cert_store,x,sk))
        -:  520:		{
    #####:  521:		SSLerr(SSL_F_SSL_VERIFY_CERT_CHAIN,ERR_R_X509_LIB);
    #####:  522:		return(0);
        -:  523:		}
        -:  524:#if 0
        -:  525:	if (SSL_get_verify_depth(s) >= 0)
        -:  526:		X509_STORE_CTX_set_depth(&ctx, SSL_get_verify_depth(s));
        -:  527:#endif
    10000:  528:	X509_STORE_CTX_set_ex_data(&ctx,SSL_get_ex_data_X509_STORE_CTX_idx(),s);
        -:  529:
        -:  530:	/* We need to inherit the verify parameters. These can be determined by
        -:  531:	 * the context: if its a server it will verify SSL client certificates
        -:  532:	 * or vice versa.
        -:  533:	 */
        -:  534:
    10000:  535:	X509_STORE_CTX_set_default(&ctx,
    10000:  536:				s->server ? "ssl_client" : "ssl_server");
        -:  537:	/* Anything non-default in "param" should overwrite anything in the
        -:  538:	 * ctx.
        -:  539:	 */
    10000:  540:	X509_VERIFY_PARAM_set1(X509_STORE_CTX_get0_param(&ctx), s->param);
        -:  541:
    10000:  542:	if (s->verify_callback)
    10000:  543:		X509_STORE_CTX_set_verify_cb(&ctx, s->verify_callback);
        -:  544:
    10000:  545:	if (s->ctx->app_verify_callback != NULL)
        -:  546:#if 1 /* new with OpenSSL 0.9.7 */
    #####:  547:		i=s->ctx->app_verify_callback(&ctx, s->ctx->app_verify_arg); 
        -:  548:#else
        -:  549:		i=s->ctx->app_verify_callback(&ctx); /* should pass app_verify_arg */
        -:  550:#endif
        -:  551:	else
        -:  552:		{
        -:  553:#ifndef OPENSSL_NO_X509_VERIFY
    10000:  554:		i=X509_verify_cert(&ctx);
        -:  555:#else
        -:  556:		i=0;
        -:  557:		ctx.error=X509_V_ERR_APPLICATION_VERIFICATION;
        -:  558:		SSLerr(SSL_F_SSL_VERIFY_CERT_CHAIN,SSL_R_NO_VERIFY_CALLBACK);
        -:  559:#endif
        -:  560:		}
        -:  561:
    10000:  562:	s->verify_result=ctx.error;
    10000:  563:	X509_STORE_CTX_cleanup(&ctx);
        -:  564:
    10000:  565:	return(i);
        -:  566:	}
        -:  567:
        -:  568:static void set_client_CA_list(STACK_OF(X509_NAME) **ca_list,STACK_OF(X509_NAME) *name_list)
        -:  569:	{
    #####:  570:	if (*ca_list != NULL)
    #####:  571:		sk_X509_NAME_pop_free(*ca_list,X509_NAME_free);
        -:  572:
    #####:  573:	*ca_list=name_list;
        -:  574:	}
        -:  575:
    #####:  576:STACK_OF(X509_NAME) *SSL_dup_CA_list(STACK_OF(X509_NAME) *sk)
        -:  577:	{
        -:  578:	int i;
        -:  579:	STACK_OF(X509_NAME) *ret;
        -:  580:	X509_NAME *name;
        -:  581:
    #####:  582:	ret=sk_X509_NAME_new_null();
    #####:  583:	for (i=0; i<sk_X509_NAME_num(sk); i++)
        -:  584:		{
    #####:  585:		name=X509_NAME_dup(sk_X509_NAME_value(sk,i));
    #####:  586:		if ((name == NULL) || !sk_X509_NAME_push(ret,name))
        -:  587:			{
    #####:  588:			sk_X509_NAME_pop_free(ret,X509_NAME_free);
    #####:  589:			return(NULL);
        -:  590:			}
        -:  591:		}
        -:  592:	return(ret);
        -:  593:	}
        -:  594:
    #####:  595:void SSL_set_client_CA_list(SSL *s,STACK_OF(X509_NAME) *name_list)
        -:  596:	{
        -:  597:	set_client_CA_list(&(s->client_CA),name_list);
    #####:  598:	}
        -:  599:
    #####:  600:void SSL_CTX_set_client_CA_list(SSL_CTX *ctx,STACK_OF(X509_NAME) *name_list)
        -:  601:	{
        -:  602:	set_client_CA_list(&(ctx->client_CA),name_list);
    #####:  603:	}
        -:  604:
    #####:  605:STACK_OF(X509_NAME) *SSL_CTX_get_client_CA_list(const SSL_CTX *ctx)
        -:  606:	{
    #####:  607:	return(ctx->client_CA);
        -:  608:	}
        -:  609:
    10000:  610:STACK_OF(X509_NAME) *SSL_get_client_CA_list(const SSL *s)
        -:  611:	{
    10000:  612:	if (s->type == SSL_ST_CONNECT)
        -:  613:		{ /* we are in the client */
    20000:  614:		if (((s->version>>8) == SSL3_VERSION_MAJOR) &&
    10000:  615:			(s->s3 != NULL))
    10000:  616:			return(s->s3->tmp.ca_names);
        -:  617:		else
        -:  618:			return(NULL);
        -:  619:		}
        -:  620:	else
        -:  621:		{
    #####:  622:		if (s->client_CA != NULL)
        -:  623:			return(s->client_CA);
        -:  624:		else
    #####:  625:			return(s->ctx->client_CA);
        -:  626:		}
        -:  627:	}
        -:  628:
    #####:  629:static int add_client_CA(STACK_OF(X509_NAME) **sk,X509 *x)
        -:  630:	{
        -:  631:	X509_NAME *name;
        -:  632:
    #####:  633:	if (x == NULL) return(0);
    #####:  634:	if ((*sk == NULL) && ((*sk=sk_X509_NAME_new_null()) == NULL))
        -:  635:		return(0);
        -:  636:		
    #####:  637:	if ((name=X509_NAME_dup(X509_get_subject_name(x))) == NULL)
        -:  638:		return(0);
        -:  639:
    #####:  640:	if (!sk_X509_NAME_push(*sk,name))
        -:  641:		{
    #####:  642:		X509_NAME_free(name);
    #####:  643:		return(0);
        -:  644:		}
        -:  645:	return(1);
        -:  646:	}
        -:  647:
    #####:  648:int SSL_add_client_CA(SSL *ssl,X509 *x)
        -:  649:	{
    #####:  650:	return(add_client_CA(&(ssl->client_CA),x));
        -:  651:	}
        -:  652:
    #####:  653:int SSL_CTX_add_client_CA(SSL_CTX *ctx,X509 *x)
        -:  654:	{
    #####:  655:	return(add_client_CA(&(ctx->client_CA),x));
        -:  656:	}
        -:  657:
    #####:  658:static int xname_cmp(const X509_NAME * const *a, const X509_NAME * const *b)
        -:  659:	{
    #####:  660:	return(X509_NAME_cmp(*a,*b));
        -:  661:	}
        -:  662:
        -:  663:#ifndef OPENSSL_NO_STDIO
        -:  664:/*!
        -:  665: * Load CA certs from a file into a ::STACK. Note that it is somewhat misnamed;
        -:  666: * it doesn't really have anything to do with clients (except that a common use
        -:  667: * for a stack of CAs is to send it to the client). Actually, it doesn't have
        -:  668: * much to do with CAs, either, since it will load any old cert.
        -:  669: * \param file the file containing one or more certs.
        -:  670: * \return a ::STACK containing the certs.
        -:  671: */
    #####:  672:STACK_OF(X509_NAME) *SSL_load_client_CA_file(const char *file)
        -:  673:	{
        -:  674:	BIO *in;
    #####:  675:	X509 *x=NULL;
        -:  676:	X509_NAME *xn=NULL;
        -:  677:	STACK_OF(X509_NAME) *ret = NULL,*sk;
        -:  678:
    #####:  679:	sk=sk_X509_NAME_new(xname_cmp);
        -:  680:
    #####:  681:	in=BIO_new(BIO_s_file_internal());
        -:  682:
    #####:  683:	if ((sk == NULL) || (in == NULL))
        -:  684:		{
    #####:  685:		SSLerr(SSL_F_SSL_LOAD_CLIENT_CA_FILE,ERR_R_MALLOC_FAILURE);
    #####:  686:		goto err;
        -:  687:		}
        -:  688:	
    #####:  689:	if (!BIO_read_filename(in,file))
        -:  690:		goto err;
        -:  691:
        -:  692:	for (;;)
        -:  693:		{
    #####:  694:		if (PEM_read_bio_X509(in,&x,NULL,NULL) == NULL)
        -:  695:			break;
    #####:  696:		if (ret == NULL)
        -:  697:			{
    #####:  698:			ret = sk_X509_NAME_new_null();
    #####:  699:			if (ret == NULL)
        -:  700:				{
    #####:  701:				SSLerr(SSL_F_SSL_LOAD_CLIENT_CA_FILE,ERR_R_MALLOC_FAILURE);
    #####:  702:				goto err;
        -:  703:				}
        -:  704:			}
    #####:  705:		if ((xn=X509_get_subject_name(x)) == NULL) goto err;
        -:  706:		/* check for duplicates */
    #####:  707:		xn=X509_NAME_dup(xn);
    #####:  708:		if (xn == NULL) goto err;
    #####:  709:		if (sk_X509_NAME_find(sk,xn) >= 0)
    #####:  710:			X509_NAME_free(xn);
        -:  711:		else
        -:  712:			{
    #####:  713:			sk_X509_NAME_push(sk,xn);
    #####:  714:			sk_X509_NAME_push(ret,xn);
        -:  715:			}
        -:  716:		}
        -:  717:
        -:  718:	if (0)
        -:  719:		{
        -:  720:err:
    #####:  721:		if (ret != NULL) sk_X509_NAME_pop_free(ret,X509_NAME_free);
        -:  722:		ret=NULL;
        -:  723:		}
    #####:  724:	if (sk != NULL) sk_X509_NAME_free(sk);
    #####:  725:	if (in != NULL) BIO_free(in);
    #####:  726:	if (x != NULL) X509_free(x);
    #####:  727:	if (ret != NULL)
    #####:  728:		ERR_clear_error();
    #####:  729:	return(ret);
        -:  730:	}
        -:  731:#endif
        -:  732:
        -:  733:/*!
        -:  734: * Add a file of certs to a stack.
        -:  735: * \param stack the stack to add to.
        -:  736: * \param file the file to add from. All certs in this file that are not
        -:  737: * already in the stack will be added.
        -:  738: * \return 1 for success, 0 for failure. Note that in the case of failure some
        -:  739: * certs may have been added to \c stack.
        -:  740: */
        -:  741:
    #####:  742:int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
        -:  743:					const char *file)
        -:  744:	{
        -:  745:	BIO *in;
    #####:  746:	X509 *x=NULL;
        -:  747:	X509_NAME *xn=NULL;
        -:  748:	int ret=1;
        -:  749:	int (*oldcmp)(const X509_NAME * const *a, const X509_NAME * const *b);
        -:  750:	
    #####:  751:	oldcmp=sk_X509_NAME_set_cmp_func(stack,xname_cmp);
        -:  752:	
    #####:  753:	in=BIO_new(BIO_s_file_internal());
        -:  754:	
    #####:  755:	if (in == NULL)
        -:  756:		{
    #####:  757:		SSLerr(SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK,ERR_R_MALLOC_FAILURE);
    #####:  758:		goto err;
        -:  759:		}
        -:  760:	
    #####:  761:	if (!BIO_read_filename(in,file))
        -:  762:		goto err;
        -:  763:	
        -:  764:	for (;;)
        -:  765:		{
    #####:  766:		if (PEM_read_bio_X509(in,&x,NULL,NULL) == NULL)
        -:  767:			break;
    #####:  768:		if ((xn=X509_get_subject_name(x)) == NULL) goto err;
    #####:  769:		xn=X509_NAME_dup(xn);
    #####:  770:		if (xn == NULL) goto err;
    #####:  771:		if (sk_X509_NAME_find(stack,xn) >= 0)
    #####:  772:			X509_NAME_free(xn);
        -:  773:		else
    #####:  774:			sk_X509_NAME_push(stack,xn);
        -:  775:		}
        -:  776:
    #####:  777:	ERR_clear_error();
        -:  778:
        -:  779:	if (0)
        -:  780:		{
        -:  781:err:
        -:  782:		ret=0;
        -:  783:		}
    #####:  784:	if(in != NULL)
    #####:  785:		BIO_free(in);
    #####:  786:	if(x != NULL)
    #####:  787:		X509_free(x);
        -:  788:	
    #####:  789:	(void)sk_X509_NAME_set_cmp_func(stack,oldcmp);
        -:  790:
    #####:  791:	return ret;
        -:  792:	}
        -:  793:
        -:  794:/*!
        -:  795: * Add a directory of certs to a stack.
        -:  796: * \param stack the stack to append to.
        -:  797: * \param dir the directory to append from. All files in this directory will be
        -:  798: * examined as potential certs. Any that are acceptable to
        -:  799: * SSL_add_dir_cert_subjects_to_stack() that are not already in the stack will be
        -:  800: * included.
        -:  801: * \return 1 for success, 0 for failure. Note that in the case of failure some
        -:  802: * certs may have been added to \c stack.
        -:  803: */
        -:  804:
    #####:  805:int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
        -:  806:				       const char *dir)
        -:  807:	{
    #####:  808:	OPENSSL_DIR_CTX *d = NULL;
        -:  809:	const char *filename;
        -:  810:	int ret = 0;
        -:  811:
    #####:  812:	CRYPTO_w_lock(CRYPTO_LOCK_READDIR);
        -:  813:
        -:  814:	/* Note that a side effect is that the CAs will be sorted by name */
        -:  815:
    #####:  816:	while((filename = OPENSSL_DIR_read(&d, dir)))
        -:  817:		{
        -:  818:		char buf[1024];
        -:  819:		int r;
        -:  820:
    #####:  821:		if(strlen(dir)+strlen(filename)+2 > sizeof buf)
        -:  822:			{
    #####:  823:			SSLerr(SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK,SSL_R_PATH_TOO_LONG);
    #####:  824:			goto err;
        -:  825:			}
        -:  826:
        -:  827:#ifdef OPENSSL_SYS_VMS
        -:  828:		r = BIO_snprintf(buf,sizeof buf,"%s%s",dir,filename);
        -:  829:#else
    #####:  830:		r = BIO_snprintf(buf,sizeof buf,"%s/%s",dir,filename);
        -:  831:#endif
    #####:  832:		if (r <= 0 || r >= (int)sizeof(buf))
        -:  833:			goto err;
    #####:  834:		if(!SSL_add_file_cert_subjects_to_stack(stack,buf))
        -:  835:			goto err;
        -:  836:		}
        -:  837:
    #####:  838:	if (errno)
        -:  839:		{
    #####:  840:		SYSerr(SYS_F_OPENDIR, get_last_sys_error());
    #####:  841:		ERR_add_error_data(3, "OPENSSL_DIR_read(&ctx, '", dir, "')");
    #####:  842:		SSLerr(SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK, ERR_R_SYS_LIB);
    #####:  843:		goto err;
        -:  844:		}
        -:  845:
        -:  846:	ret = 1;
        -:  847:
        -:  848:err:
    #####:  849:	if (d) OPENSSL_DIR_end(&d);
    #####:  850:	CRYPTO_w_unlock(CRYPTO_LOCK_READDIR);
    #####:  851:	return ret;
        -:  852:	}
        -:  853:
