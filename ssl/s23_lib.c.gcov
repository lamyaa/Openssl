        -:    0:Source:s23_lib.c
        -:    0:Graph:s23_lib.gcno
        -:    0:Data:s23_lib.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* ssl/s23_lib.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include <openssl/objects.h>
        -:   61:#include "ssl_locl.h"
        -:   62:
    10000:   63:long ssl23_default_timeout(void)
        -:   64:	{
    10000:   65:	return(300);
        -:   66:	}
        -:   67:
    10000:   68:int ssl23_num_ciphers(void)
        -:   69:	{
    20000:   70:	return(ssl3_num_ciphers()
        -:   71:#ifndef OPENSSL_NO_SSL2
    10000:   72:	       + ssl2_num_ciphers()
        -:   73:#endif
        -:   74:	    );
        -:   75:	}
        -:   76:
  1470000:   77:const SSL_CIPHER *ssl23_get_cipher(unsigned int u)
        -:   78:	{
  1470000:   79:	unsigned int uu=ssl3_num_ciphers();
        -:   80:
  1470000:   81:	if (u < uu)
  1400000:   82:		return(ssl3_get_cipher(u));
        -:   83:	else
        -:   84:#ifndef OPENSSL_NO_SSL2
    70000:   85:		return(ssl2_get_cipher(u-uu));
        -:   86:#else
        -:   87:		return(NULL);
        -:   88:#endif
        -:   89:	}
        -:   90:
        -:   91:/* This function needs to check if the ciphers required are actually
        -:   92: * available */
    #####:   93:const SSL_CIPHER *ssl23_get_cipher_by_char(const unsigned char *p)
        -:   94:	{
        -:   95:	const SSL_CIPHER *cp;
        -:   96:
    #####:   97:	cp=ssl3_get_cipher_by_char(p);
        -:   98:#ifndef OPENSSL_NO_SSL2
    #####:   99:	if (cp == NULL)
    #####:  100:		cp=ssl2_get_cipher_by_char(p);
        -:  101:#endif
    #####:  102:	return(cp);
        -:  103:	}
        -:  104:
    #####:  105:int ssl23_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)
        -:  106:	{
        -:  107:	long l;
        -:  108:
        -:  109:	/* We can write SSLv2 and SSLv3 ciphers */
    #####:  110:	if (p != NULL)
        -:  111:		{
    #####:  112:		l=c->id;
    #####:  113:		p[0]=((unsigned char)(l>>16L))&0xFF;
    #####:  114:		p[1]=((unsigned char)(l>> 8L))&0xFF;
    #####:  115:		p[2]=((unsigned char)(l     ))&0xFF;
        -:  116:		}
    #####:  117:	return(3);
        -:  118:	}
        -:  119:
    #####:  120:int ssl23_read(SSL *s, void *buf, int len)
        -:  121:	{
        -:  122:	int n;
        -:  123:
    #####:  124:	clear_sys_error();
    #####:  125:	if (SSL_in_init(s) && (!s->in_handshake))
        -:  126:		{
    #####:  127:		n=s->handshake_func(s);
    #####:  128:		if (n < 0) return(n);
    #####:  129:		if (n == 0)
        -:  130:			{
    #####:  131:			SSLerr(SSL_F_SSL23_READ,SSL_R_SSL_HANDSHAKE_FAILURE);
    #####:  132:			return(-1);
        -:  133:			}
    #####:  134:		return(SSL_read(s,buf,len));
        -:  135:		}
        -:  136:	else
        -:  137:		{
    #####:  138:		ssl_undefined_function(s);
    #####:  139:		return(-1);
        -:  140:		}
        -:  141:	}
        -:  142:
    #####:  143:int ssl23_peek(SSL *s, void *buf, int len)
        -:  144:	{
        -:  145:	int n;
        -:  146:
    #####:  147:	clear_sys_error();
    #####:  148:	if (SSL_in_init(s) && (!s->in_handshake))
        -:  149:		{
    #####:  150:		n=s->handshake_func(s);
    #####:  151:		if (n < 0) return(n);
    #####:  152:		if (n == 0)
        -:  153:			{
    #####:  154:			SSLerr(SSL_F_SSL23_PEEK,SSL_R_SSL_HANDSHAKE_FAILURE);
    #####:  155:			return(-1);
        -:  156:			}
    #####:  157:		return(SSL_peek(s,buf,len));
        -:  158:		}
        -:  159:	else
        -:  160:		{
    #####:  161:		ssl_undefined_function(s);
    #####:  162:		return(-1);
        -:  163:		}
        -:  164:	}
        -:  165:
    10000:  166:int ssl23_write(SSL *s, const void *buf, int len)
        -:  167:	{
        -:  168:	int n;
        -:  169:
    10000:  170:	clear_sys_error();
    10000:  171:	if (SSL_in_init(s) && (!s->in_handshake))
        -:  172:		{
    10000:  173:		n=s->handshake_func(s);
    10000:  174:		if (n < 0) return(n);
    10000:  175:		if (n == 0)
        -:  176:			{
    #####:  177:			SSLerr(SSL_F_SSL23_WRITE,SSL_R_SSL_HANDSHAKE_FAILURE);
    #####:  178:			return(-1);
        -:  179:			}
    10000:  180:		return(SSL_write(s,buf,len));
        -:  181:		}
        -:  182:	else
        -:  183:		{
    #####:  184:		ssl_undefined_function(s);
    #####:  185:		return(-1);
        -:  186:		}
        -:  187:	}
