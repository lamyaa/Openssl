        -:    0:Source:t1_reneg.c
        -:    0:Graph:t1_reneg.gcno
        -:    0:Data:t1_reneg.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* ssl/t1_reneg.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:/* ====================================================================
        -:   59: * Copyright (c) 1998-2009 The OpenSSL Project.  All rights reserved.
        -:   60: *
        -:   61: * Redistribution and use in source and binary forms, with or without
        -:   62: * modification, are permitted provided that the following conditions
        -:   63: * are met:
        -:   64: *
        -:   65: * 1. Redistributions of source code must retain the above copyright
        -:   66: *    notice, this list of conditions and the following disclaimer. 
        -:   67: *
        -:   68: * 2. Redistributions in binary form must reproduce the above copyright
        -:   69: *    notice, this list of conditions and the following disclaimer in
        -:   70: *    the documentation and/or other materials provided with the
        -:   71: *    distribution.
        -:   72: *
        -:   73: * 3. All advertising materials mentioning features or use of this
        -:   74: *    software must display the following acknowledgment:
        -:   75: *    "This product includes software developed by the OpenSSL Project
        -:   76: *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
        -:   77: *
        -:   78: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   79: *    endorse or promote products derived from this software without
        -:   80: *    prior written permission. For written permission, please contact
        -:   81: *    openssl-core@openssl.org.
        -:   82: *
        -:   83: * 5. Products derived from this software may not be called "OpenSSL"
        -:   84: *    nor may "OpenSSL" appear in their names without prior written
        -:   85: *    permission of the OpenSSL Project.
        -:   86: *
        -:   87: * 6. Redistributions of any form whatsoever must retain the following
        -:   88: *    acknowledgment:
        -:   89: *    "This product includes software developed by the OpenSSL Project
        -:   90: *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
        -:   91: *
        -:   92: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   93: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   94: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   95: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   96: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   97: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   98: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   99: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:  100: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:  101: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:  102: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:  103: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  104: * ====================================================================
        -:  105: *
        -:  106: * This product includes cryptographic software written by Eric Young
        -:  107: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:  108: * Hudson (tjh@cryptsoft.com).
        -:  109: *
        -:  110: */
        -:  111:#include <stdio.h>
        -:  112:#include <openssl/objects.h>
        -:  113:#include "ssl_locl.h"
        -:  114:
        -:  115:/* Add the client's renegotiation binding */
    #####:  116:int ssl_add_clienthello_renegotiate_ext(SSL *s, unsigned char *p, int *len,
        -:  117:					int maxlen)
        -:  118:    {
    #####:  119:    if(p)
        -:  120:        {
    #####:  121:	if((s->s3->previous_client_finished_len+1) > maxlen)
        -:  122:            {
    #####:  123:            SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATE_EXT_TOO_LONG);
    #####:  124:            return 0;
        -:  125:            }
        -:  126:            
        -:  127:        /* Length byte */
    #####:  128:	*p = s->s3->previous_client_finished_len;
    #####:  129:        p++;
        -:  130:
    #####:  131:        memcpy(p, s->s3->previous_client_finished,
    #####:  132:	       s->s3->previous_client_finished_len);
        -:  133:#ifdef OPENSSL_RI_DEBUG
        -:  134:    fprintf(stderr, "%s RI extension sent by client\n",
        -:  135:		s->s3->previous_client_finished_len ? "Non-empty" : "Empty");
        -:  136:#endif
        -:  137:        }
        -:  138:    
    #####:  139:    *len=s->s3->previous_client_finished_len + 1;
        -:  140:
        -:  141: 
    #####:  142:    return 1;
        -:  143:    }
        -:  144:
        -:  145:/* Parse the client's renegotiation binding and abort if it's not
        -:  146:   right */
    #####:  147:int ssl_parse_clienthello_renegotiate_ext(SSL *s, unsigned char *d, int len,
        -:  148:					  int *al)
        -:  149:    {
        -:  150:    int ilen;
        -:  151:
        -:  152:    /* Parse the length byte */
    #####:  153:    if(len < 1)
        -:  154:        {
    #####:  155:        SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_ENCODING_ERR);
    #####:  156:        *al=SSL_AD_ILLEGAL_PARAMETER;
    #####:  157:        return 0;
        -:  158:        }
    #####:  159:    ilen = *d;
    #####:  160:    d++;
        -:  161:
        -:  162:    /* Consistency check */
    #####:  163:    if((ilen+1) != len)
        -:  164:        {
    #####:  165:        SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_ENCODING_ERR);
    #####:  166:        *al=SSL_AD_ILLEGAL_PARAMETER;
    #####:  167:        return 0;
        -:  168:        }
        -:  169:
        -:  170:    /* Check that the extension matches */
    #####:  171:    if(ilen != s->s3->previous_client_finished_len)
        -:  172:        {
    #####:  173:        SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
    #####:  174:        *al=SSL_AD_HANDSHAKE_FAILURE;
    #####:  175:        return 0;
        -:  176:        }
        -:  177:    
    #####:  178:    if(memcmp(d, s->s3->previous_client_finished,
        -:  179:	      s->s3->previous_client_finished_len))
        -:  180:        {
    #####:  181:        SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
    #####:  182:        *al=SSL_AD_HANDSHAKE_FAILURE;
    #####:  183:        return 0;
        -:  184:        }
        -:  185:#ifdef OPENSSL_RI_DEBUG
        -:  186:    fprintf(stderr, "%s RI extension received by server\n",
        -:  187:				ilen ? "Non-empty" : "Empty");
        -:  188:#endif
        -:  189:
    #####:  190:    s->s3->send_connection_binding=1;
        -:  191:
    #####:  192:    return 1;
        -:  193:    }
        -:  194:
        -:  195:/* Add the server's renegotiation binding */
    #####:  196:int ssl_add_serverhello_renegotiate_ext(SSL *s, unsigned char *p, int *len,
        -:  197:					int maxlen)
        -:  198:    {
    #####:  199:    if(p)
        -:  200:        {
    #####:  201:        if((s->s3->previous_client_finished_len +
    #####:  202:            s->s3->previous_server_finished_len + 1) > maxlen)
        -:  203:            {
    #####:  204:            SSLerr(SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATE_EXT_TOO_LONG);
    #####:  205:            return 0;
        -:  206:            }
        -:  207:        
        -:  208:        /* Length byte */
    #####:  209:        *p = s->s3->previous_client_finished_len + s->s3->previous_server_finished_len;
    #####:  210:        p++;
        -:  211:
    #####:  212:        memcpy(p, s->s3->previous_client_finished,
    #####:  213:	       s->s3->previous_client_finished_len);
    #####:  214:        p += s->s3->previous_client_finished_len;
        -:  215:
    #####:  216:        memcpy(p, s->s3->previous_server_finished,
    #####:  217:	       s->s3->previous_server_finished_len);
        -:  218:#ifdef OPENSSL_RI_DEBUG
        -:  219:    fprintf(stderr, "%s RI extension sent by server\n",
        -:  220:    		s->s3->previous_client_finished_len ? "Non-empty" : "Empty");
        -:  221:#endif
        -:  222:        }
        -:  223:    
    #####:  224:    *len=s->s3->previous_client_finished_len
    #####:  225:	+ s->s3->previous_server_finished_len + 1;
        -:  226:    
    #####:  227:    return 1;
        -:  228:    }
        -:  229:
        -:  230:/* Parse the server's renegotiation binding and abort if it's not
        -:  231:   right */
    10000:  232:int ssl_parse_serverhello_renegotiate_ext(SSL *s, unsigned char *d, int len,
        -:  233:					  int *al)
        -:  234:    {
    20000:  235:    int expected_len=s->s3->previous_client_finished_len
    10000:  236:	+ s->s3->previous_server_finished_len;
        -:  237:    int ilen;
        -:  238:
        -:  239:    /* Check for logic errors */
    10000:  240:    OPENSSL_assert(!expected_len || s->s3->previous_client_finished_len);
    10000:  241:    OPENSSL_assert(!expected_len || s->s3->previous_server_finished_len);
        -:  242:    
        -:  243:    /* Parse the length byte */
    10000:  244:    if(len < 1)
        -:  245:        {
    #####:  246:        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_ENCODING_ERR);
    #####:  247:        *al=SSL_AD_ILLEGAL_PARAMETER;
    #####:  248:        return 0;
        -:  249:        }
    10000:  250:    ilen = *d;
    10000:  251:    d++;
        -:  252:
        -:  253:    /* Consistency check */
    10000:  254:    if(ilen+1 != len)
        -:  255:        {
    #####:  256:        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_ENCODING_ERR);
    #####:  257:        *al=SSL_AD_ILLEGAL_PARAMETER;
    #####:  258:        return 0;
        -:  259:        }
        -:  260:    
        -:  261:    /* Check that the extension matches */
    10000:  262:    if(ilen != expected_len)
        -:  263:        {
    #####:  264:        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
    #####:  265:        *al=SSL_AD_HANDSHAKE_FAILURE;
    #####:  266:        return 0;
        -:  267:        }
        -:  268:
    10000:  269:    if(memcmp(d, s->s3->previous_client_finished,
    10000:  270:	      s->s3->previous_client_finished_len))
        -:  271:        {
    #####:  272:        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
    #####:  273:        *al=SSL_AD_HANDSHAKE_FAILURE;
    #####:  274:        return 0;
        -:  275:        }
    10000:  276:    d += s->s3->previous_client_finished_len;
        -:  277:
    10000:  278:    if(memcmp(d, s->s3->previous_server_finished,
    10000:  279:	      s->s3->previous_server_finished_len))
        -:  280:        {
    #####:  281:        SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT,SSL_R_RENEGOTIATION_MISMATCH);
    #####:  282:        *al=SSL_AD_ILLEGAL_PARAMETER;
    #####:  283:        return 0;
        -:  284:        }
        -:  285:#ifdef OPENSSL_RI_DEBUG
        -:  286:    fprintf(stderr, "%s RI extension received by client\n",
        -:  287:				ilen ? "Non-empty" : "Empty");
        -:  288:#endif
    10000:  289:    s->s3->send_connection_binding=1;
        -:  290:
    10000:  291:    return 1;
        -:  292:    }
