        -:    0:Source:ssl_algs.c
        -:    0:Graph:ssl_algs.gcno
        -:    0:Data:ssl_algs.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* ssl/ssl_algs.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:
        -:   59:#include <stdio.h>
        -:   60:#include <openssl/objects.h>
        -:   61:#include <openssl/lhash.h>
        -:   62:#include "ssl_locl.h"
        -:   63:
    10000:   64:int SSL_library_init(void)
        -:   65:	{
        -:   66:
        -:   67:#ifndef OPENSSL_NO_DES
    10000:   68:	EVP_add_cipher(EVP_des_cbc());
    10000:   69:	EVP_add_cipher(EVP_des_ede3_cbc());
        -:   70:#endif
        -:   71:#ifndef OPENSSL_NO_IDEA
    10000:   72:	EVP_add_cipher(EVP_idea_cbc());
        -:   73:#endif
        -:   74:#ifndef OPENSSL_NO_RC4
    10000:   75:	EVP_add_cipher(EVP_rc4());
        -:   76:#if !defined(OPENSSL_NO_MD5) && (defined(__x86_64) || defined(__x86_64__))
    10000:   77:	EVP_add_cipher(EVP_rc4_hmac_md5());
        -:   78:#endif
        -:   79:#endif  
        -:   80:#ifndef OPENSSL_NO_RC2
    10000:   81:	EVP_add_cipher(EVP_rc2_cbc());
        -:   82:	/* Not actually used for SSL/TLS but this makes PKCS#12 work
        -:   83:	 * if an application only calls SSL_library_init().
        -:   84:	 */
    10000:   85:	EVP_add_cipher(EVP_rc2_40_cbc());
        -:   86:#endif
        -:   87:#ifndef OPENSSL_NO_AES
    10000:   88:	EVP_add_cipher(EVP_aes_128_cbc());
    10000:   89:	EVP_add_cipher(EVP_aes_192_cbc());
    10000:   90:	EVP_add_cipher(EVP_aes_256_cbc());
    10000:   91:	EVP_add_cipher(EVP_aes_128_gcm());
    10000:   92:	EVP_add_cipher(EVP_aes_256_gcm());
        -:   93:#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_SHA1)
    10000:   94:	EVP_add_cipher(EVP_aes_128_cbc_hmac_sha1());
    10000:   95:	EVP_add_cipher(EVP_aes_256_cbc_hmac_sha1());
        -:   96:#endif
        -:   97:
        -:   98:#endif
        -:   99:#ifndef OPENSSL_NO_CAMELLIA
    10000:  100:	EVP_add_cipher(EVP_camellia_128_cbc());
    10000:  101:	EVP_add_cipher(EVP_camellia_256_cbc());
        -:  102:#endif
        -:  103:
        -:  104:#ifndef OPENSSL_NO_SEED
    10000:  105:	EVP_add_cipher(EVP_seed_cbc());
        -:  106:#endif
        -:  107:  
        -:  108:#ifndef OPENSSL_NO_MD5
    10000:  109:	EVP_add_digest(EVP_md5());
    10000:  110:	EVP_add_digest_alias(SN_md5,"ssl2-md5");
    10000:  111:	EVP_add_digest_alias(SN_md5,"ssl3-md5");
        -:  112:#endif
        -:  113:#ifndef OPENSSL_NO_SHA
    10000:  114:	EVP_add_digest(EVP_sha1()); /* RSA with sha1 */
    10000:  115:	EVP_add_digest_alias(SN_sha1,"ssl3-sha1");
    10000:  116:	EVP_add_digest_alias(SN_sha1WithRSAEncryption,SN_sha1WithRSA);
        -:  117:#endif
        -:  118:#ifndef OPENSSL_NO_SHA256
    10000:  119:	EVP_add_digest(EVP_sha224());
    10000:  120:	EVP_add_digest(EVP_sha256());
        -:  121:#endif
        -:  122:#ifndef OPENSSL_NO_SHA512
    10000:  123:	EVP_add_digest(EVP_sha384());
    10000:  124:	EVP_add_digest(EVP_sha512());
        -:  125:#endif
        -:  126:#if !defined(OPENSSL_NO_SHA) && !defined(OPENSSL_NO_DSA)
    10000:  127:	EVP_add_digest(EVP_dss1()); /* DSA with sha1 */
    10000:  128:	EVP_add_digest_alias(SN_dsaWithSHA1,SN_dsaWithSHA1_2);
    10000:  129:	EVP_add_digest_alias(SN_dsaWithSHA1,"DSS1");
    10000:  130:	EVP_add_digest_alias(SN_dsaWithSHA1,"dss1");
        -:  131:#endif
        -:  132:#ifndef OPENSSL_NO_ECDSA
    10000:  133:	EVP_add_digest(EVP_ecdsa());
        -:  134:#endif
        -:  135:	/* If you want support for phased out ciphers, add the following */
        -:  136:#if 0
        -:  137:	EVP_add_digest(EVP_sha());
        -:  138:	EVP_add_digest(EVP_dss());
        -:  139:#endif
        -:  140:#ifndef OPENSSL_NO_COMP
        -:  141:	/* This will initialise the built-in compression algorithms.
        -:  142:	   The value returned is a STACK_OF(SSL_COMP), but that can
        -:  143:	   be discarded safely */
    10000:  144:	(void)SSL_COMP_get_compression_methods();
        -:  145:#endif
        -:  146:	/* initialize cipher/digest methods table */
    10000:  147:	ssl_load_ciphers();
    10000:  148:	return(1);
        -:  149:	}
        -:  150:
