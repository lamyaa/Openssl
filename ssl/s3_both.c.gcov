        -:    0:Source:s3_both.c
        -:    0:Graph:s3_both.gcno
        -:    0:Data:s3_both.gcda
        -:    0:Runs:10000
        -:    0:Programs:1
        -:    1:/* ssl/s3_both.c */
        -:    2:/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
        -:    3: * All rights reserved.
        -:    4: *
        -:    5: * This package is an SSL implementation written
        -:    6: * by Eric Young (eay@cryptsoft.com).
        -:    7: * The implementation was written so as to conform with Netscapes SSL.
        -:    8: * 
        -:    9: * This library is free for commercial and non-commercial use as long as
        -:   10: * the following conditions are aheared to.  The following conditions
        -:   11: * apply to all code found in this distribution, be it the RC4, RSA,
        -:   12: * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
        -:   13: * included with this distribution is covered by the same copyright terms
        -:   14: * except that the holder is Tim Hudson (tjh@cryptsoft.com).
        -:   15: * 
        -:   16: * Copyright remains Eric Young's, and as such any Copyright notices in
        -:   17: * the code are not to be removed.
        -:   18: * If this package is used in a product, Eric Young should be given attribution
        -:   19: * as the author of the parts of the library used.
        -:   20: * This can be in the form of a textual message at program startup or
        -:   21: * in documentation (online or textual) provided with the package.
        -:   22: * 
        -:   23: * Redistribution and use in source and binary forms, with or without
        -:   24: * modification, are permitted provided that the following conditions
        -:   25: * are met:
        -:   26: * 1. Redistributions of source code must retain the copyright
        -:   27: *    notice, this list of conditions and the following disclaimer.
        -:   28: * 2. Redistributions in binary form must reproduce the above copyright
        -:   29: *    notice, this list of conditions and the following disclaimer in the
        -:   30: *    documentation and/or other materials provided with the distribution.
        -:   31: * 3. All advertising materials mentioning features or use of this software
        -:   32: *    must display the following acknowledgement:
        -:   33: *    "This product includes cryptographic software written by
        -:   34: *     Eric Young (eay@cryptsoft.com)"
        -:   35: *    The word 'cryptographic' can be left out if the rouines from the library
        -:   36: *    being used are not cryptographic related :-).
        -:   37: * 4. If you include any Windows specific code (or a derivative thereof) from 
        -:   38: *    the apps directory (application code) you must include an acknowledgement:
        -:   39: *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
        -:   40: * 
        -:   41: * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
        -:   42: * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   43: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   44: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
        -:   45: * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        -:   46: * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
        -:   47: * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   48: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
        -:   49: * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
        -:   50: * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
        -:   51: * SUCH DAMAGE.
        -:   52: * 
        -:   53: * The licence and distribution terms for any publically available version or
        -:   54: * derivative of this code cannot be changed.  i.e. this code cannot simply be
        -:   55: * copied and put under another distribution licence
        -:   56: * [including the GNU Public Licence.]
        -:   57: */
        -:   58:/* ====================================================================
        -:   59: * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
        -:   60: *
        -:   61: * Redistribution and use in source and binary forms, with or without
        -:   62: * modification, are permitted provided that the following conditions
        -:   63: * are met:
        -:   64: *
        -:   65: * 1. Redistributions of source code must retain the above copyright
        -:   66: *    notice, this list of conditions and the following disclaimer. 
        -:   67: *
        -:   68: * 2. Redistributions in binary form must reproduce the above copyright
        -:   69: *    notice, this list of conditions and the following disclaimer in
        -:   70: *    the documentation and/or other materials provided with the
        -:   71: *    distribution.
        -:   72: *
        -:   73: * 3. All advertising materials mentioning features or use of this
        -:   74: *    software must display the following acknowledgment:
        -:   75: *    "This product includes software developed by the OpenSSL Project
        -:   76: *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
        -:   77: *
        -:   78: * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
        -:   79: *    endorse or promote products derived from this software without
        -:   80: *    prior written permission. For written permission, please contact
        -:   81: *    openssl-core@openssl.org.
        -:   82: *
        -:   83: * 5. Products derived from this software may not be called "OpenSSL"
        -:   84: *    nor may "OpenSSL" appear in their names without prior written
        -:   85: *    permission of the OpenSSL Project.
        -:   86: *
        -:   87: * 6. Redistributions of any form whatsoever must retain the following
        -:   88: *    acknowledgment:
        -:   89: *    "This product includes software developed by the OpenSSL Project
        -:   90: *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
        -:   91: *
        -:   92: * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
        -:   93: * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   94: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        -:   95: * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
        -:   96: * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   97: * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        -:   98: * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        -:   99: * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:  100: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:  101: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:  102: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
        -:  103: * OF THE POSSIBILITY OF SUCH DAMAGE.
        -:  104: * ====================================================================
        -:  105: *
        -:  106: * This product includes cryptographic software written by Eric Young
        -:  107: * (eay@cryptsoft.com).  This product includes software written by Tim
        -:  108: * Hudson (tjh@cryptsoft.com).
        -:  109: *
        -:  110: */
        -:  111:/* ====================================================================
        -:  112: * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
        -:  113: * ECC cipher suite support in OpenSSL originally developed by 
        -:  114: * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
        -:  115: */
        -:  116:
        -:  117:#include <limits.h>
        -:  118:#include <string.h>
        -:  119:#include <stdio.h>
        -:  120:#include "ssl_locl.h"
        -:  121:#include <openssl/buffer.h>
        -:  122:#include <openssl/rand.h>
        -:  123:#include <openssl/objects.h>
        -:  124:#include <openssl/evp.h>
        -:  125:#include <openssl/x509.h>
        -:  126:
        -:  127:/* send s->init_buf in records of type 'type' (SSL3_RT_HANDSHAKE or SSL3_RT_CHANGE_CIPHER_SPEC) */
    30000:  128:int ssl3_do_write(SSL *s, int type)
        -:  129:	{
        -:  130:	int ret;
        -:  131:
    30000:  132:	ret=ssl3_write_bytes(s,type,&s->init_buf->data[s->init_off],
        -:  133:	                     s->init_num);
    30000:  134:	if (ret < 0) return(-1);
    30000:  135:	if (type == SSL3_RT_HANDSHAKE)
        -:  136:		/* should not be done for 'Hello Request's, but in that case
        -:  137:		 * we'll ignore the result anyway */
    20000:  138:		ssl3_finish_mac(s,(unsigned char *)&s->init_buf->data[s->init_off],ret);
        -:  139:	
    30000:  140:	if (ret == s->init_num)
        -:  141:		{
    30000:  142:		if (s->msg_callback)
    #####:  143:			s->msg_callback(1, s->version, type, s->init_buf->data, (size_t)(s->init_off + s->init_num), s, s->msg_callback_arg);
        -:  144:		return(1);
        -:  145:		}
    #####:  146:	s->init_off+=ret;
    #####:  147:	s->init_num-=ret;
    #####:  148:	return(0);
        -:  149:	}
        -:  150:
    10000:  151:int ssl3_send_finished(SSL *s, int a, int b, const char *sender, int slen)
        -:  152:	{
        -:  153:	unsigned char *p,*d;
        -:  154:	int i;
        -:  155:	unsigned long l;
        -:  156:
    10000:  157:	if (s->state == a)
        -:  158:		{
    10000:  159:		d=(unsigned char *)s->init_buf->data;
    10000:  160:		p= &(d[4]);
        -:  161:
    20000:  162:		i=s->method->ssl3_enc->final_finish_mac(s,
    10000:  163:			sender,slen,s->s3->tmp.finish_md);
    10000:  164:		s->s3->tmp.finish_md_len = i;
    10000:  165:		memcpy(p, s->s3->tmp.finish_md, i);
        -:  166:		p+=i;
        -:  167:		l=i;
        -:  168:
        -:  169:                /* Copy the finished so we can use it for
        -:  170:                   renegotiation checks */
    10000:  171:                if(s->type == SSL_ST_CONNECT)
        -:  172:                        {
    10000:  173:                         OPENSSL_assert(i <= EVP_MAX_MD_SIZE);
    10000:  174:                         memcpy(s->s3->previous_client_finished, 
    10000:  175:                             s->s3->tmp.finish_md, i);
    10000:  176:                         s->s3->previous_client_finished_len=i;
        -:  177:                        }
        -:  178:                else
        -:  179:                        {
    #####:  180:                        OPENSSL_assert(i <= EVP_MAX_MD_SIZE);
    #####:  181:                        memcpy(s->s3->previous_server_finished, 
    #####:  182:                            s->s3->tmp.finish_md, i);
    #####:  183:                        s->s3->previous_server_finished_len=i;
        -:  184:                        }
        -:  185:
        -:  186:#ifdef OPENSSL_SYS_WIN16
        -:  187:		/* MSVC 1.5 does not clear the top bytes of the word unless
        -:  188:		 * I do this.
        -:  189:		 */
        -:  190:		l&=0xffff;
        -:  191:#endif
        -:  192:
    10000:  193:		*(d++)=SSL3_MT_FINISHED;
    10000:  194:		l2n3(l,d);
    10000:  195:		s->init_num=(int)l+4;
    10000:  196:		s->init_off=0;
        -:  197:
    10000:  198:		s->state=b;
        -:  199:		}
        -:  200:
        -:  201:	/* SSL3_ST_SEND_xxxxxx_HELLO_B */
    10000:  202:	return(ssl3_do_write(s,SSL3_RT_HANDSHAKE));
        -:  203:	}
        -:  204:
        -:  205:#ifndef OPENSSL_NO_NEXTPROTONEG
        -:  206:/* ssl3_take_mac calculates the Finished MAC for the handshakes messages seen to far. */
    10000:  207:static void ssl3_take_mac(SSL *s)
        -:  208:	{
        -:  209:	const char *sender;
        -:  210:	int slen;
        -:  211:
    10000:  212:	if (s->state & SSL_ST_CONNECT)
        -:  213:		{
    10000:  214:		sender=s->method->ssl3_enc->server_finished_label;
    10000:  215:		slen=s->method->ssl3_enc->server_finished_label_len;
        -:  216:		}
        -:  217:	else
        -:  218:		{
    #####:  219:		sender=s->method->ssl3_enc->client_finished_label;
    #####:  220:		slen=s->method->ssl3_enc->client_finished_label_len;
        -:  221:		}
        -:  222:
    20000:  223:	s->s3->tmp.peer_finish_md_len = s->method->ssl3_enc->final_finish_mac(s,
    10000:  224:		sender,slen,s->s3->tmp.peer_finish_md);
    10000:  225:	}
        -:  226:#endif
        -:  227:
    10000:  228:int ssl3_get_finished(SSL *s, int a, int b)
        -:  229:	{
        -:  230:	int al,i,ok;
        -:  231:	long n;
        -:  232:	unsigned char *p;
        -:  233:
        -:  234:#ifdef OPENSSL_NO_NEXTPROTONEG
        -:  235:	/* the mac has already been generated when we received the
        -:  236:	 * change cipher spec message and is in s->s3->tmp.peer_finish_md.
        -:  237:	 */ 
        -:  238:#endif
        -:  239:
    10000:  240:	n=s->method->ssl_get_message(s,
        -:  241:		a,
        -:  242:		b,
        -:  243:		SSL3_MT_FINISHED,
        -:  244:		64, /* should actually be 36+4 :-) */
        -:  245:		&ok);
        -:  246:
    10000:  247:	if (!ok) return((int)n);
        -:  248:
        -:  249:	/* If this occurs, we have missed a message */
    10000:  250:	if (!s->s3->change_cipher_spec)
        -:  251:		{
        -:  252:		al=SSL_AD_UNEXPECTED_MESSAGE;
    #####:  253:		SSLerr(SSL_F_SSL3_GET_FINISHED,SSL_R_GOT_A_FIN_BEFORE_A_CCS);
    #####:  254:		goto f_err;
        -:  255:		}
    10000:  256:	s->s3->change_cipher_spec=0;
        -:  257:
    10000:  258:	p = (unsigned char *)s->init_msg;
    10000:  259:	i = s->s3->tmp.peer_finish_md_len;
        -:  260:
    10000:  261:	if (i != n)
        -:  262:		{
        -:  263:		al=SSL_AD_DECODE_ERROR;
    #####:  264:		SSLerr(SSL_F_SSL3_GET_FINISHED,SSL_R_BAD_DIGEST_LENGTH);
    #####:  265:		goto f_err;
        -:  266:		}
        -:  267:
    10000:  268:	if (CRYPTO_memcmp(p, s->s3->tmp.peer_finish_md, i) != 0)
        -:  269:		{
        -:  270:		al=SSL_AD_DECRYPT_ERROR;
    #####:  271:		SSLerr(SSL_F_SSL3_GET_FINISHED,SSL_R_DIGEST_CHECK_FAILED);
    #####:  272:		goto f_err;
        -:  273:		}
        -:  274:
        -:  275:        /* Copy the finished so we can use it for
        -:  276:           renegotiation checks */
    10000:  277:        if(s->type == SSL_ST_ACCEPT)
        -:  278:                {
    #####:  279:                OPENSSL_assert(i <= EVP_MAX_MD_SIZE);
    #####:  280:                memcpy(s->s3->previous_client_finished, 
    #####:  281:                    s->s3->tmp.peer_finish_md, i);
    #####:  282:                s->s3->previous_client_finished_len=i;
        -:  283:                }
        -:  284:        else
        -:  285:                {
    10000:  286:                OPENSSL_assert(i <= EVP_MAX_MD_SIZE);
    10000:  287:                memcpy(s->s3->previous_server_finished, 
    10000:  288:                    s->s3->tmp.peer_finish_md, i);
    10000:  289:                s->s3->previous_server_finished_len=i;
        -:  290:                }
        -:  291:
        -:  292:	return(1);
        -:  293:f_err:
    #####:  294:	ssl3_send_alert(s,SSL3_AL_FATAL,al);
    #####:  295:	return(0);
        -:  296:	}
        -:  297:
        -:  298:/* for these 2 messages, we need to
        -:  299: * ssl->enc_read_ctx			re-init
        -:  300: * ssl->s3->read_sequence		zero
        -:  301: * ssl->s3->read_mac_secret		re-init
        -:  302: * ssl->session->read_sym_enc		assign
        -:  303: * ssl->session->read_compression	assign
        -:  304: * ssl->session->read_hash		assign
        -:  305: */
    10000:  306:int ssl3_send_change_cipher_spec(SSL *s, int a, int b)
        -:  307:	{ 
        -:  308:	unsigned char *p;
        -:  309:
    10000:  310:	if (s->state == a)
        -:  311:		{
    10000:  312:		p=(unsigned char *)s->init_buf->data;
    10000:  313:		*p=SSL3_MT_CCS;
    10000:  314:		s->init_num=1;
    10000:  315:		s->init_off=0;
        -:  316:
    10000:  317:		s->state=b;
        -:  318:		}
        -:  319:
        -:  320:	/* SSL3_ST_CW_CHANGE_B */
    10000:  321:	return(ssl3_do_write(s,SSL3_RT_CHANGE_CIPHER_SPEC));
        -:  322:	}
        -:  323:
    #####:  324:static int ssl3_add_cert_to_buf(BUF_MEM *buf, unsigned long *l, X509 *x)
        -:  325:	{
        -:  326:	int n;
        -:  327:	unsigned char *p;
        -:  328:
    #####:  329:	n=i2d_X509(x,NULL);
    #####:  330:	if (!BUF_MEM_grow_clean(buf,(int)(n+(*l)+3)))
        -:  331:		{
    #####:  332:		SSLerr(SSL_F_SSL3_ADD_CERT_TO_BUF,ERR_R_BUF_LIB);
    #####:  333:		return(-1);
        -:  334:		}
    #####:  335:	p=(unsigned char *)&(buf->data[*l]);
    #####:  336:	l2n3(n,p);
    #####:  337:	i2d_X509(x,&p);
    #####:  338:	*l+=n+3;
        -:  339:
    #####:  340:	return(0);
        -:  341:	}
        -:  342:
    #####:  343:unsigned long ssl3_output_cert_chain(SSL *s, X509 *x)
        -:  344:	{
        -:  345:	unsigned char *p;
        -:  346:	int i;
    #####:  347:	unsigned long l=7;
        -:  348:	BUF_MEM *buf;
        -:  349:	int no_chain;
        -:  350:
    #####:  351:	if ((s->mode & SSL_MODE_NO_AUTO_CHAIN) || s->ctx->extra_certs)
        -:  352:		no_chain = 1;
        -:  353:	else
        -:  354:		no_chain = 0;
        -:  355:
        -:  356:	/* TLSv1 sends a chain with nothing in it, instead of an alert */
    #####:  357:	buf=s->init_buf;
    #####:  358:	if (!BUF_MEM_grow_clean(buf,10))
        -:  359:		{
    #####:  360:		SSLerr(SSL_F_SSL3_OUTPUT_CERT_CHAIN,ERR_R_BUF_LIB);
    #####:  361:		return(0);
        -:  362:		}
    #####:  363:	if (x != NULL)
        -:  364:		{
    #####:  365:		if (no_chain)
        -:  366:			{
    #####:  367:			if (ssl3_add_cert_to_buf(buf, &l, x))
        -:  368:				return(0);
        -:  369:			}
        -:  370:		else
        -:  371:			{
        -:  372:			X509_STORE_CTX xs_ctx;
        -:  373:
    #####:  374:			if (!X509_STORE_CTX_init(&xs_ctx,s->ctx->cert_store,x,NULL))
        -:  375:				{
    #####:  376:				SSLerr(SSL_F_SSL3_OUTPUT_CERT_CHAIN,ERR_R_X509_LIB);
    #####:  377:				return(0);
        -:  378:				}
    #####:  379:			X509_verify_cert(&xs_ctx);
        -:  380:			/* Don't leave errors in the queue */
    #####:  381:			ERR_clear_error();
    #####:  382:			for (i=0; i < sk_X509_num(xs_ctx.chain); i++)
        -:  383:				{
    #####:  384:				x = sk_X509_value(xs_ctx.chain, i);
        -:  385:
    #####:  386:				if (ssl3_add_cert_to_buf(buf, &l, x))
        -:  387:					{
    #####:  388:					X509_STORE_CTX_cleanup(&xs_ctx);
    #####:  389:					return 0;
        -:  390:					}
        -:  391:				}
    #####:  392:			X509_STORE_CTX_cleanup(&xs_ctx);
        -:  393:			}
        -:  394:		}
        -:  395:	/* Thawte special :-) */
    #####:  396:	for (i=0; i<sk_X509_num(s->ctx->extra_certs); i++)
        -:  397:		{
    #####:  398:		x=sk_X509_value(s->ctx->extra_certs,i);
    #####:  399:		if (ssl3_add_cert_to_buf(buf, &l, x))
        -:  400:			return(0);
        -:  401:		}
        -:  402:
    #####:  403:	l-=7;
    #####:  404:	p=(unsigned char *)&(buf->data[4]);
    #####:  405:	l2n3(l,p);
    #####:  406:	l+=3;
    #####:  407:	p=(unsigned char *)&(buf->data[0]);
    #####:  408:	*(p++)=SSL3_MT_CERTIFICATE;
    #####:  409:	l2n3(l,p);
    #####:  410:	l+=4;
    #####:  411:	return(l);
        -:  412:	}
        -:  413:
        -:  414:/* Obtain handshake message of message type 'mt' (any if mt == -1),
        -:  415: * maximum acceptable body length 'max'.
        -:  416: * The first four bytes (msg_type and length) are read in state 'st1',
        -:  417: * the body is read in state 'stn'.
        -:  418: */
    70000:  419:long ssl3_get_message(SSL *s, int st1, int stn, int mt, long max, int *ok)
        -:  420:	{
        -:  421:	unsigned char *p;
        -:  422:	unsigned long l;
        -:  423:	long n;
        -:  424:	int i,al;
        -:  425:
    70000:  426:	if (s->s3->tmp.reuse_message)
        -:  427:		{
    20000:  428:		s->s3->tmp.reuse_message=0;
    20000:  429:		if ((mt >= 0) && (s->s3->tmp.message_type != mt))
        -:  430:			{
        -:  431:			al=SSL_AD_UNEXPECTED_MESSAGE;
    #####:  432:			SSLerr(SSL_F_SSL3_GET_MESSAGE,SSL_R_UNEXPECTED_MESSAGE);
    #####:  433:			goto f_err;
        -:  434:			}
    20000:  435:		*ok=1;
    20000:  436:		s->init_msg = s->init_buf->data + 4;
    20000:  437:		s->init_num = (int)s->s3->tmp.message_size;
    20000:  438:		return s->init_num;
        -:  439:		}
        -:  440:
    50000:  441:	p=(unsigned char *)s->init_buf->data;
        -:  442:
    50000:  443:	if (s->state == st1) /* s->init_num < 4 */
        -:  444:		{
        -:  445:		int skip_message;
        -:  446:
        -:  447:		do
        -:  448:			{
   100000:  449:			while (s->init_num < 4)
        -:  450:				{
    50000:  451:				i=s->method->ssl_read_bytes(s,SSL3_RT_HANDSHAKE,
        -:  452:					&p[s->init_num],4 - s->init_num, 0);
    50000:  453:				if (i <= 0)
        -:  454:					{
    #####:  455:					s->rwstate=SSL_READING;
    #####:  456:					*ok = 0;
    #####:  457:					return i;
        -:  458:					}
    50000:  459:				s->init_num+=i;
        -:  460:				}
        -:  461:			
        -:  462:			skip_message = 0;
    50000:  463:			if (!s->server)
    50000:  464:				if (p[0] == SSL3_MT_HELLO_REQUEST)
        -:  465:					/* The server may always send 'Hello Request' messages --
        -:  466:					 * we are doing a handshake anyway now, so ignore them
        -:  467:					 * if their format is correct. Does not count for
        -:  468:					 * 'Finished' MAC. */
    #####:  469:					if (p[1] == 0 && p[2] == 0 &&p[3] == 0)
        -:  470:						{
    #####:  471:						s->init_num = 0;
        -:  472:						skip_message = 1;
        -:  473:
    #####:  474:						if (s->msg_callback)
    #####:  475:							s->msg_callback(0, s->version, SSL3_RT_HANDSHAKE, p, 4, s, s->msg_callback_arg);
        -:  476:						}
        -:  477:			}
    50000:  478:		while (skip_message);
        -:  479:
        -:  480:		/* s->init_num == 4 */
        -:  481:
    50000:  482:		if ((mt >= 0) && (*p != mt))
        -:  483:			{
        -:  484:			al=SSL_AD_UNEXPECTED_MESSAGE;
    #####:  485:			SSLerr(SSL_F_SSL3_GET_MESSAGE,SSL_R_UNEXPECTED_MESSAGE);
    #####:  486:			goto f_err;
        -:  487:			}
    50000:  488:		if ((mt < 0) && (*p == SSL3_MT_CLIENT_HELLO) &&
    #####:  489:					(st1 == SSL3_ST_SR_CERT_A) &&
    #####:  490:					(stn == SSL3_ST_SR_CERT_B))
        -:  491:			{
        -:  492:			/* At this point we have got an MS SGC second client
        -:  493:			 * hello (maybe we should always allow the client to
        -:  494:			 * start a new handshake?). We need to restart the mac.
        -:  495:			 * Don't increment {num,total}_renegotiations because
        -:  496:			 * we have not completed the handshake. */
    #####:  497:			ssl3_init_finished_mac(s);
        -:  498:			}
        -:  499:
    50000:  500:		s->s3->tmp.message_type= *(p++);
        -:  501:
    50000:  502:		n2l3(p,l);
    50000:  503:		if (l > (unsigned long)max)
        -:  504:			{
        -:  505:			al=SSL_AD_ILLEGAL_PARAMETER;
    #####:  506:			SSLerr(SSL_F_SSL3_GET_MESSAGE,SSL_R_EXCESSIVE_MESSAGE_SIZE);
    #####:  507:			goto f_err;
        -:  508:			}
    50000:  509:		if (l > (INT_MAX-4)) /* BUF_MEM_grow takes an 'int' parameter */
        -:  510:			{
        -:  511:			al=SSL_AD_ILLEGAL_PARAMETER;
    #####:  512:			SSLerr(SSL_F_SSL3_GET_MESSAGE,SSL_R_EXCESSIVE_MESSAGE_SIZE);
    #####:  513:			goto f_err;
        -:  514:			}
    50000:  515:		if (l && !BUF_MEM_grow_clean(s->init_buf,(int)l+4))
        -:  516:			{
    #####:  517:			SSLerr(SSL_F_SSL3_GET_MESSAGE,ERR_R_BUF_LIB);
    #####:  518:			goto err;
        -:  519:			}
    50000:  520:		s->s3->tmp.message_size=l;
    50000:  521:		s->state=stn;
        -:  522:
    50000:  523:		s->init_msg = s->init_buf->data + 4;
    50000:  524:		s->init_num = 0;
        -:  525:		}
        -:  526:
        -:  527:	/* next state (stn) */
    50000:  528:	p = s->init_msg;
    50000:  529:	n = s->s3->tmp.message_size - s->init_num;
   140000:  530:	while (n > 0)
        -:  531:		{
    40000:  532:		i=s->method->ssl_read_bytes(s,SSL3_RT_HANDSHAKE,&p[s->init_num],n,0);
    40000:  533:		if (i <= 0)
        -:  534:			{
    #####:  535:			s->rwstate=SSL_READING;
    #####:  536:			*ok = 0;
    #####:  537:			return i;
        -:  538:			}
    40000:  539:		s->init_num += i;
    40000:  540:		n -= i;
        -:  541:		}
        -:  542:
        -:  543:#ifndef OPENSSL_NO_NEXTPROTONEG
        -:  544:	/* If receiving Finished, record MAC of prior handshake messages for
        -:  545:	 * Finished verification. */
    50000:  546:	if (*s->init_buf->data == SSL3_MT_FINISHED)
    10000:  547:		ssl3_take_mac(s);
        -:  548:#endif
        -:  549:
        -:  550:	/* Feed this message into MAC computation. */
    50000:  551:	ssl3_finish_mac(s, (unsigned char *)s->init_buf->data, s->init_num + 4);
    50000:  552:	if (s->msg_callback)
    #####:  553:		s->msg_callback(0, s->version, SSL3_RT_HANDSHAKE, s->init_buf->data, (size_t)s->init_num + 4, s, s->msg_callback_arg);
    50000:  554:	*ok=1;
    50000:  555:	return s->init_num;
        -:  556:f_err:
    #####:  557:	ssl3_send_alert(s,SSL3_AL_FATAL,al);
        -:  558:err:
    #####:  559:	*ok=0;
    #####:  560:	return(-1);
        -:  561:	}
        -:  562:
    10000:  563:int ssl_cert_type(X509 *x, EVP_PKEY *pkey)
        -:  564:	{
        -:  565:	EVP_PKEY *pk;
        -:  566:	int ret= -1,i;
        -:  567:
    10000:  568:	if (pkey == NULL)
    #####:  569:		pk=X509_get_pubkey(x);
        -:  570:	else
        -:  571:		pk=pkey;
    10000:  572:	if (pk == NULL) goto err;
        -:  573:
    10000:  574:	i=pk->type;
    10000:  575:	if (i == EVP_PKEY_RSA)
        -:  576:		{
        -:  577:		ret=SSL_PKEY_RSA_ENC;
        -:  578:		}
    #####:  579:	else if (i == EVP_PKEY_DSA)
        -:  580:		{
        -:  581:		ret=SSL_PKEY_DSA_SIGN;
        -:  582:		}
        -:  583:#ifndef OPENSSL_NO_EC
    #####:  584:	else if (i == EVP_PKEY_EC)
        -:  585:		{
        -:  586:		ret = SSL_PKEY_ECC;
        -:  587:		}	
        -:  588:#endif
    #####:  589:	else if (i == NID_id_GostR3410_94 || i == NID_id_GostR3410_94_cc) 
        -:  590:		{
        -:  591:		ret = SSL_PKEY_GOST94;
        -:  592:		}
    #####:  593:	else if (i == NID_id_GostR3410_2001 || i == NID_id_GostR3410_2001_cc) 
        -:  594:		{
        -:  595:		ret = SSL_PKEY_GOST01;
        -:  596:		}
        -:  597:err:
    10000:  598:	if(!pkey) EVP_PKEY_free(pk);
    10000:  599:	return(ret);
        -:  600:	}
        -:  601:
    #####:  602:int ssl_verify_alarm_type(long type)
        -:  603:	{
        -:  604:	int al;
        -:  605:
    #####:  606:	switch(type)
        -:  607:		{
        -:  608:	case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:
        -:  609:	case X509_V_ERR_UNABLE_TO_GET_CRL:
        -:  610:	case X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER:
        -:  611:		al=SSL_AD_UNKNOWN_CA;
        -:  612:		break;
        -:  613:	case X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE:
        -:  614:	case X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE:
        -:  615:	case X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY:
        -:  616:	case X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:
        -:  617:	case X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD:
        -:  618:	case X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD:
        -:  619:	case X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD:
        -:  620:	case X509_V_ERR_CERT_NOT_YET_VALID:
        -:  621:	case X509_V_ERR_CRL_NOT_YET_VALID:
        -:  622:	case X509_V_ERR_CERT_UNTRUSTED:
        -:  623:	case X509_V_ERR_CERT_REJECTED:
        -:  624:		al=SSL_AD_BAD_CERTIFICATE;
        -:  625:		break;
        -:  626:	case X509_V_ERR_CERT_SIGNATURE_FAILURE:
        -:  627:	case X509_V_ERR_CRL_SIGNATURE_FAILURE:
        -:  628:		al=SSL_AD_DECRYPT_ERROR;
        -:  629:		break;
        -:  630:	case X509_V_ERR_CERT_HAS_EXPIRED:
        -:  631:	case X509_V_ERR_CRL_HAS_EXPIRED:
        -:  632:		al=SSL_AD_CERTIFICATE_EXPIRED;
        -:  633:		break;
        -:  634:	case X509_V_ERR_CERT_REVOKED:
        -:  635:		al=SSL_AD_CERTIFICATE_REVOKED;
        -:  636:		break;
        -:  637:	case X509_V_ERR_OUT_OF_MEM:
        -:  638:		al=SSL_AD_INTERNAL_ERROR;
        -:  639:		break;
        -:  640:	case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:
        -:  641:	case X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN:
        -:  642:	case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY:
        -:  643:	case X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE:
        -:  644:	case X509_V_ERR_CERT_CHAIN_TOO_LONG:
        -:  645:	case X509_V_ERR_PATH_LENGTH_EXCEEDED:
        -:  646:	case X509_V_ERR_INVALID_CA:
        -:  647:		al=SSL_AD_UNKNOWN_CA;
        -:  648:		break;
        -:  649:	case X509_V_ERR_APPLICATION_VERIFICATION:
        -:  650:		al=SSL_AD_HANDSHAKE_FAILURE;
        -:  651:		break;
        -:  652:	case X509_V_ERR_INVALID_PURPOSE:
        -:  653:		al=SSL_AD_UNSUPPORTED_CERTIFICATE;
        -:  654:		break;
        -:  655:	default:
        -:  656:		al=SSL_AD_CERTIFICATE_UNKNOWN;
        -:  657:		break;
        -:  658:		}
    #####:  659:	return(al);
        -:  660:	}
        -:  661:
        -:  662:#ifndef OPENSSL_NO_BUF_FREELISTS
        -:  663:/* On some platforms, malloc() performance is bad enough that you can't just
        -:  664: * free() and malloc() buffers all the time, so we need to use freelists from
        -:  665: * unused buffers.  Currently, each freelist holds memory chunks of only a
        -:  666: * given size (list->chunklen); other sized chunks are freed and malloced.
        -:  667: * This doesn't help much if you're using many different SSL option settings
        -:  668: * with a given context.  (The options affecting buffer size are
        -:  669: * max_send_fragment, read buffer vs write buffer,
        -:  670: * SSL_OP_MICROSOFT_BIG_WRITE_BUFFER, SSL_OP_NO_COMPRESSION, and
        -:  671: * SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS.)  Using a separate freelist for every
        -:  672: * possible size is not an option, since max_send_fragment can take on many
        -:  673: * different values.
        -:  674: *
        -:  675: * If you are on a platform with a slow malloc(), and you're using SSL
        -:  676: * connections with many different settings for these options, and you need to
        -:  677: * use the SSL_MOD_RELEASE_BUFFERS feature, you have a few options:
        -:  678: *    - Link against a faster malloc implementation.
        -:  679: *    - Use a separate SSL_CTX for each option set.
        -:  680: *    - Improve this code.
        -:  681: */
        -:  682:static void *
    20000:  683:freelist_extract(SSL_CTX *ctx, int for_read, int sz)
        -:  684:	{
        -:  685:	SSL3_BUF_FREELIST *list;
        -:  686:	SSL3_BUF_FREELIST_ENTRY *ent = NULL;
        -:  687:	void *result = NULL;
        -:  688:
    20000:  689:	CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
    20000:  690:	list = for_read ? ctx->rbuf_freelist : ctx->wbuf_freelist;
    20000:  691:	if (list != NULL && sz == (int)list->chunklen)
    #####:  692:		ent = list->head;
    20000:  693:	if (ent != NULL)
        -:  694:		{
    #####:  695:		list->head = ent->next;
        -:  696:		result = ent;
    #####:  697:		if (--list->len == 0)
    #####:  698:			list->chunklen = 0;
        -:  699:		}
    20000:  700:	CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
    20000:  701:	if (!result)
    20000:  702:		result = OPENSSL_malloc(sz);
    20000:  703:	return result;
        -:  704:}
        -:  705:
        -:  706:static void
    20000:  707:freelist_insert(SSL_CTX *ctx, int for_read, size_t sz, void *mem)
        -:  708:	{
        -:  709:	SSL3_BUF_FREELIST *list;
        -:  710:	SSL3_BUF_FREELIST_ENTRY *ent;
        -:  711:
    20000:  712:	CRYPTO_w_lock(CRYPTO_LOCK_SSL_CTX);
    20000:  713:	list = for_read ? ctx->rbuf_freelist : ctx->wbuf_freelist;
    40000:  714:	if (list != NULL &&
    60000:  715:	    (sz == list->chunklen || list->chunklen == 0) &&
    40000:  716:	    list->len < ctx->freelist_max_len &&
        -:  717:	    sz >= sizeof(*ent))
        -:  718:		{
    20000:  719:		list->chunklen = sz;
        -:  720:		ent = mem;
    20000:  721:		ent->next = list->head;
    20000:  722:		list->head = ent;
    20000:  723:		++list->len;
        -:  724:		mem = NULL;
        -:  725:		}
        -:  726:
    20000:  727:	CRYPTO_w_unlock(CRYPTO_LOCK_SSL_CTX);
    20000:  728:	if (mem)
    #####:  729:		OPENSSL_free(mem);
    20000:  730:	}
        -:  731:#else
        -:  732:#define freelist_extract(c,fr,sz) OPENSSL_malloc(sz)
        -:  733:#define freelist_insert(c,fr,sz,m) OPENSSL_free(m)
        -:  734:#endif
        -:  735:
    10000:  736:int ssl3_setup_read_buffer(SSL *s)
        -:  737:	{
        -:  738:	unsigned char *p;
        -:  739:	size_t len,align=0,headerlen;
        -:  740:	
    10000:  741:	if (SSL_version(s) == DTLS1_VERSION || SSL_version(s) == DTLS1_BAD_VER)
        -:  742:		headerlen = DTLS1_RT_HEADER_LENGTH;
        -:  743:	else
        -:  744:		headerlen = SSL3_RT_HEADER_LENGTH;
        -:  745:
        -:  746:#if defined(SSL3_ALIGN_PAYLOAD) && SSL3_ALIGN_PAYLOAD!=0
        -:  747:	align = (-SSL3_RT_HEADER_LENGTH)&(SSL3_ALIGN_PAYLOAD-1);
        -:  748:#endif
        -:  749:
    10000:  750:	if (s->s3->rbuf.buf == NULL)
        -:  751:		{
    10000:  752:		len = SSL3_RT_MAX_PLAIN_LENGTH
        -:  753:			+ SSL3_RT_MAX_ENCRYPTED_OVERHEAD
        -:  754:			+ headerlen + align;
    10000:  755:		if (s->options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER)
        -:  756:			{
    #####:  757:			s->s3->init_extra = 1;
    #####:  758:			len += SSL3_RT_MAX_EXTRA;
        -:  759:			}
        -:  760:#ifndef OPENSSL_NO_COMP
    10000:  761:		if (!(s->options & SSL_OP_NO_COMPRESSION))
    10000:  762:			len += SSL3_RT_MAX_COMPRESSED_OVERHEAD;
        -:  763:#endif
    10000:  764:		if ((p=freelist_extract(s->ctx, 1, len)) == NULL)
        -:  765:			goto err;
    10000:  766:		s->s3->rbuf.buf = p;
    10000:  767:		s->s3->rbuf.len = len;
        -:  768:		}
        -:  769:
    10000:  770:	s->packet= &(s->s3->rbuf.buf[0]);
    10000:  771:	return 1;
        -:  772:
        -:  773:err:
    #####:  774:	SSLerr(SSL_F_SSL3_SETUP_READ_BUFFER,ERR_R_MALLOC_FAILURE);
    #####:  775:	return 0;
        -:  776:	}
        -:  777:
    10000:  778:int ssl3_setup_write_buffer(SSL *s)
        -:  779:	{
        -:  780:	unsigned char *p;
        -:  781:	size_t len,align=0,headerlen;
        -:  782:
    10000:  783:	if (SSL_version(s) == DTLS1_VERSION || SSL_version(s) == DTLS1_BAD_VER)
        -:  784:		headerlen = DTLS1_RT_HEADER_LENGTH + 1;
        -:  785:	else
        -:  786:		headerlen = SSL3_RT_HEADER_LENGTH;
        -:  787:
        -:  788:#if defined(SSL3_ALIGN_PAYLOAD) && SSL3_ALIGN_PAYLOAD!=0
        -:  789:	align = (-SSL3_RT_HEADER_LENGTH)&(SSL3_ALIGN_PAYLOAD-1);
        -:  790:#endif
        -:  791:
    10000:  792:	if (s->s3->wbuf.buf == NULL)
        -:  793:		{
    20000:  794:		len = s->max_send_fragment
    10000:  795:			+ SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
    10000:  796:			+ headerlen + align;
        -:  797:#ifndef OPENSSL_NO_COMP
    10000:  798:		if (!(s->options & SSL_OP_NO_COMPRESSION))
    10000:  799:			len += SSL3_RT_MAX_COMPRESSED_OVERHEAD;
        -:  800:#endif
    10000:  801:		if (!(s->options & SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS))
    10000:  802:			len += headerlen + align
        -:  803:				+ SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD;
        -:  804:
    10000:  805:		if ((p=freelist_extract(s->ctx, 0, len)) == NULL)
        -:  806:			goto err;
    10000:  807:		s->s3->wbuf.buf = p;
    10000:  808:		s->s3->wbuf.len = len;
        -:  809:		}
        -:  810:
        -:  811:	return 1;
        -:  812:
        -:  813:err:
    #####:  814:	SSLerr(SSL_F_SSL3_SETUP_WRITE_BUFFER,ERR_R_MALLOC_FAILURE);
    #####:  815:	return 0;
        -:  816:	}
        -:  817:
        -:  818:
    10000:  819:int ssl3_setup_buffers(SSL *s)
        -:  820:	{
    10000:  821:	if (!ssl3_setup_read_buffer(s))
        -:  822:		return 0;
    10000:  823:	if (!ssl3_setup_write_buffer(s))
        -:  824:		return 0;
    10000:  825:	return 1;
        -:  826:	}
        -:  827:
    10000:  828:int ssl3_release_write_buffer(SSL *s)
        -:  829:	{
    10000:  830:	if (s->s3->wbuf.buf != NULL)
        -:  831:		{
    10000:  832:		freelist_insert(s->ctx, 0, s->s3->wbuf.len, s->s3->wbuf.buf);
    10000:  833:		s->s3->wbuf.buf = NULL;
        -:  834:		}
    10000:  835:	return 1;
        -:  836:	}
        -:  837:
    10000:  838:int ssl3_release_read_buffer(SSL *s)
        -:  839:	{
    10000:  840:	if (s->s3->rbuf.buf != NULL)
        -:  841:		{
    10000:  842:		freelist_insert(s->ctx, 1, s->s3->rbuf.len, s->s3->rbuf.buf);
    10000:  843:		s->s3->rbuf.buf = NULL;
        -:  844:		}
    10000:  845:	return 1;
        -:  846:	}
        -:  847:
